/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 05 05:20:26 GMT 2022
 */

package org.leplus.ristretto.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.leplus.ristretto.util.IdentityHashSet;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IdentityHashSet_ESTest extends IdentityHashSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IdentityHashSet<Integer> identityHashSet0 = new IdentityHashSet<Integer>(0);
      Object object0 = identityHashSet0.clone();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      boolean boolean0 = predicate0.test(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IdentityHashSet<Integer> identityHashSet0 = new IdentityHashSet<Integer>(0);
      int int0 = identityHashSet0.size();
      assertFalse(identityHashSet0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IdentityHashSet<Integer> identityHashSet0 = new IdentityHashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      identityHashSet0.add(integer0);
      int int0 = identityHashSet0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IdentityHashSet<String> identityHashSet0 = new IdentityHashSet<String>();
      Iterator<String> iterator0 = identityHashSet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IdentityHashSet<String> identityHashSet0 = new IdentityHashSet<String>();
      boolean boolean0 = identityHashSet0.add("1_BtJIdi");
      assertTrue(boolean0);
      
      boolean boolean1 = identityHashSet0.isEmpty();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IdentityHashSet<String> identityHashSet0 = null;
      try {
        identityHashSet0 = new IdentityHashSet<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IdentityHashSet<Object> identityHashSet0 = null;
      try {
        identityHashSet0 = new IdentityHashSet<Object>((-3594));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expectedMaxSize is negative: -3594
         //
         verifyException("java.util.IdentityHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IdentityHashSet<Integer> identityHashSet0 = new IdentityHashSet<Integer>(0);
      IdentityHashSet<Object> identityHashSet1 = new IdentityHashSet<Object>(0);
      boolean boolean0 = identityHashSet1.add(identityHashSet0);
      boolean boolean1 = identityHashSet1.remove(identityHashSet0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IdentityHashSet<IdentityHashSet<Integer>> identityHashSet0 = new IdentityHashSet<IdentityHashSet<Integer>>();
      IdentityHashSet<String> identityHashSet1 = new IdentityHashSet<String>();
      IdentityHashSet<Object> identityHashSet2 = new IdentityHashSet<Object>(identityHashSet1);
      Object object0 = identityHashSet2.clone();
      boolean boolean0 = identityHashSet0.remove(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IdentityHashSet<Integer> identityHashSet0 = new IdentityHashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      identityHashSet0.add(integer0);
      identityHashSet0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IdentityHashSet<String> identityHashSet0 = new IdentityHashSet<String>();
      identityHashSet0.add((String) null);
      identityHashSet0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IdentityHashSet<Integer> identityHashSet0 = new IdentityHashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = identityHashSet0.add(integer0);
      IdentityHashSet<String> identityHashSet1 = new IdentityHashSet<String>(0);
      boolean boolean1 = identityHashSet1.equals(identityHashSet0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IdentityHashSet<Object> identityHashSet0 = new IdentityHashSet<Object>();
      boolean boolean0 = identityHashSet0.add("");
      assertTrue(boolean0);
      
      boolean boolean1 = identityHashSet0.addAll(identityHashSet0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IdentityHashSet<String> identityHashSet0 = new IdentityHashSet<String>();
      identityHashSet0.clear();
      assertEquals(0, identityHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IdentityHashSet<Integer> identityHashSet0 = new IdentityHashSet<Integer>(0);
      boolean boolean0 = identityHashSet0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IdentityHashSet<String> identityHashSet0 = new IdentityHashSet<String>();
      IdentityHashSet<Object> identityHashSet1 = new IdentityHashSet<Object>(identityHashSet0);
      Object object0 = identityHashSet1.clone();
      boolean boolean0 = identityHashSet0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IdentityHashSet<String> identityHashSet0 = new IdentityHashSet<String>();
      IdentityHashSet<Object> identityHashSet1 = new IdentityHashSet<Object>(identityHashSet0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = identityHashSet1.contains(integer0);
      assertFalse(boolean0);
  }
}
