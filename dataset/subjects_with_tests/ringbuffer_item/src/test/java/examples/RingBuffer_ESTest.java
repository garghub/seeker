/*
 * This file was automatically generated by EvoSuite
 * Thu May 12 15:12:55 GMT 2022
 */

package examples;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import examples.RingBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RingBuffer_ESTest extends RingBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RingBuffer<Object> ringBuffer0 = new RingBuffer<Object>(3);
      Integer integer0 = new Integer((-364));
      ringBuffer0.extend(integer0);
      ringBuffer0.remove();
      ringBuffer0.extend("?KQ");
      ringBuffer0.remove();
      ringBuffer0.extend(integer0);
      ringBuffer0.extend("OL_6W:;2|A6dzu}o|");
      ringBuffer0.extend("?KQ");
      assertEquals(4, ringBuffer0.count());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RingBuffer<Integer> ringBuffer0 = new RingBuffer<Integer>(1);
      ringBuffer0.extend((Integer) null);
      ringBuffer0.remove();
      ringBuffer0.extend((Integer) null);
      int int0 = ringBuffer0.count();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RingBuffer<String> ringBuffer0 = new RingBuffer<String>(1120);
      ringBuffer0.extend((String) null);
      ringBuffer0.item();
      assertEquals(1, ringBuffer0.count());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RingBuffer<Integer> ringBuffer0 = new RingBuffer<Integer>(1830);
      RingBuffer<Object> ringBuffer1 = new RingBuffer<Object>(1831);
      ringBuffer1.extend(ringBuffer0);
      ringBuffer1.wipeOut();
      ringBuffer1.isFull();
      assertTrue(ringBuffer1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RingBuffer<Object> ringBuffer0 = new RingBuffer<Object>(1);
      ringBuffer0.isFull();
      assertEquals(2, ringBuffer0.dataCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RingBuffer<Integer> ringBuffer0 = new RingBuffer<Integer>(1830);
      RingBuffer<Object> ringBuffer1 = new RingBuffer<Object>(1831);
      ringBuffer1.extend(ringBuffer0);
      ringBuffer1.isEmpty();
      assertEquals(1, ringBuffer1.count());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RingBuffer<Object> ringBuffer0 = new RingBuffer<Object>(5010);
      Integer integer0 = new Integer(0);
      ringBuffer0.extend(integer0);
      ringBuffer0.remove();
      boolean boolean0 = ringBuffer0.isEmpty();
      assertEquals(1, ringBuffer0.count());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RingBuffer<Integer> ringBuffer0 = new RingBuffer<Integer>(1830);
      int int0 = ringBuffer0.dataCount();
      assertEquals(1831, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RingBuffer<Object> ringBuffer0 = new RingBuffer<Object>(1);
      Object object0 = new Object();
      ringBuffer0.extend("f>}px");
      ringBuffer0.wipeOut();
      ringBuffer0.extend(object0);
      ringBuffer0.remove();
      assertTrue(ringBuffer0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RingBuffer<String> ringBuffer0 = new RingBuffer<String>(478);
      // Undeclared exception!
      try { 
        ringBuffer0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // buffer is empty
         //
         verifyException("examples.RingBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RingBuffer<Object> ringBuffer0 = new RingBuffer<Object>(1);
      Object object0 = new Object();
      ringBuffer0.extend(object0);
      // Undeclared exception!
      try { 
        ringBuffer0.extend("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // buffer is full
         //
         verifyException("examples.RingBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RingBuffer<Integer> ringBuffer0 = new RingBuffer<Integer>(1);
      ringBuffer0.extend((Integer) null);
      ringBuffer0.remove();
      ringBuffer0.extend((Integer) null);
      boolean boolean0 = ringBuffer0.isFull();
      assertEquals(1, ringBuffer0.count());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RingBuffer<Integer> ringBuffer0 = new RingBuffer<Integer>(1758);
      Integer integer0 = new Integer(1758);
      ringBuffer0.extend(integer0);
      int int0 = ringBuffer0.count();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1758);
      RingBuffer<Object> ringBuffer0 = new RingBuffer<Object>((int) integer0);
      int int0 = ringBuffer0.count();
      assertEquals(1759, ringBuffer0.dataCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(1758);
      RingBuffer<Object> ringBuffer0 = new RingBuffer<Object>((int) integer0);
      // Undeclared exception!
      try { 
        ringBuffer0.item();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // empty buffer
         //
         verifyException("examples.RingBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RingBuffer<Integer> ringBuffer0 = new RingBuffer<Integer>(1758);
      Integer integer0 = new Integer(1758);
      ringBuffer0.extend(integer0);
      ringBuffer0.item();
      assertEquals(1, ringBuffer0.count());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RingBuffer<String> ringBuffer0 = null;
      try {
        ringBuffer0 = new RingBuffer<String>((-255));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // parameter must be positive
         //
         verifyException("examples.RingBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RingBuffer<Object> ringBuffer0 = new RingBuffer<Object>(3);
      int int0 = ringBuffer0.capacity();
      assertEquals(3, int0);
      assertTrue(ringBuffer0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RingBuffer<Integer> ringBuffer0 = new RingBuffer<Integer>(1);
      ringBuffer0.extend((Integer) null);
      boolean boolean0 = ringBuffer0.isFull();
      assertEquals(1, ringBuffer0.count());
      assertTrue(boolean0);
  }
}
