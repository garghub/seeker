/*
 * This file was automatically generated by EvoSuite
 * Thu May 12 14:44:24 GMT 2022
 */

package examples;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import examples.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Map_ESTest extends Map_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Map<Integer, Object> map0 = new Map<Integer, Object>();
      Integer integer0 = new Integer(1402);
      Integer integer1 = new Integer(1794);
      map0.extend(integer1, integer0);
      // Undeclared exception!
      try { 
        map0.remove(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("examples.Map", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Map<String, String> map0 = new Map<String, String>();
      map0.extend("", "-ewt*%jv\"<l");
      int int0 = map0.extend("", "");
      assertEquals(1, map0.count());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Map<String, String> map0 = new Map<String, String>();
      map0.extend("jTEWC5.!}r", "hd,Uocq[/h_eV");
      map0.extend("", "");
      int int0 = map0.remove("");
      assertEquals(1, map0.count());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Map<String, Object> map0 = new Map<String, Object>();
      map0.extend("]}vgV]c", (Object) null);
      Object object0 = map0.item("]}vgV]c");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Map<Object, String> map0 = new Map<Object, String>();
      Object object0 = new Object();
      int int0 = map0.extend(object0, (String) null);
      assertEquals(0, int0);
      
      boolean boolean0 = map0.hasValue((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Map<Object, Object> map0 = new Map<Object, Object>();
      Map<Object, String> map1 = new Map<Object, String>();
      map1.extend(map0, "$wP+%HM?%eP^j3/");
      map1.extend("$wP+%HM?%eP^j3/", "$wP+%HM?%eP^j3/");
      int int0 = map1.extend("$wP+%HM?%eP^j3/", "$wP+%HM?%eP^j3/");
      assertEquals(2, map1.count());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Map<Integer, String> map0 = new Map<Integer, String>();
      Integer integer0 = new Integer(677);
      map0.extend(integer0, "^<]sgPd%{?G-7LD");
      int int0 = map0.count();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Map<Object, String> map0 = new Map<Object, String>();
      boolean boolean0 = map0.hasKey((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Map<Integer, Object> map0 = new Map<Integer, Object>();
      Integer integer0 = new Integer(0);
      int int0 = map0.extend(integer0, "%88=!`");
      assertEquals(0, int0);
      
      boolean boolean0 = map0.hasKey(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Map<Object, Object> map0 = new Map<Object, Object>();
      int int0 = map0.count();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Map<Object, String> map0 = new Map<Object, String>();
      int int0 = map0.extend("#Au{X", "#Au{X");
      assertEquals(0, int0);
      
      boolean boolean0 = map0.hasValue("4kCRS^eZX..]+~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Map<String, Object> map0 = new Map<String, Object>();
      map0.extend("]>4CBRJ", "]>4CBRJ");
      int int0 = map0.remove("]>4CBRJ");
      assertEquals(0, map0.count());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Map<Object, Object> map0 = new Map<Object, Object>();
      // Undeclared exception!
      try { 
        map0.item("]>4CBRJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid key
         //
         verifyException("examples.Map", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Map<String, Object> map0 = new Map<String, Object>();
      map0.extend("]>4CBRJ", "]>4CBRJ");
      Object object0 = map0.item("]>4CBRJ");
      assertEquals("]>4CBRJ", object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Map<Integer, Object> map0 = new Map<Integer, Object>();
      Integer integer0 = new Integer(1402);
      // Undeclared exception!
      try { 
        map0.remove(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("examples.Map", e);
      }
  }
}
