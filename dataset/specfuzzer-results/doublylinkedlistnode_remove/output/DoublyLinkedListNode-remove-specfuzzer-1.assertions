===========================================================================
examples.DoublyLinkedListNode:::OBJECT
FuzzedInvariant ( all n : DoublyLinkedListNode.*(left + right) : (n.right.*(left + right)) & (n.left.*(left + right)) not in empty ) holds for: this
FuzzedInvariant ( all n : DoublyLinkedListNode.*(left + right) : n != null ) holds for: this
FuzzedInvariant ( all n : DoublyLinkedListNode.^(left + right) : (n.right.*(left + right)) & (n.left.*(left + right)) not in empty ) holds for: this
FuzzedInvariant ( all n : DoublyLinkedListNode.^(left + right) : (n.right.*(left + right)) & (n.right.*(left + right)) not in empty ) holds for: this
FuzzedInvariant ( all n : DoublyLinkedListNode.^(left + right) : n in n.^(left + right) ) holds for: this
FuzzedInvariant ( no n : DoublyLinkedListNode.*(left + right) : (n.left.*(left + right)) & (n.left.*(left + right)) in empty ) holds for: this
FuzzedInvariant ( no n : DoublyLinkedListNode.*(left + right) : (n.left.*(left + right)) & (n.right.*(left + right)) in empty ) holds for: this
FuzzedInvariant ( no n : DoublyLinkedListNode.^(left + right) : (n.left.*(left + right)) & (n.left.*(left + right)) in empty ) holds for: this
FuzzedInvariant ( no n : DoublyLinkedListNode.^(left + right) : (n.right.*(left + right)) & (n.left.*(left + right)) in empty ) holds for: this
FuzzedInvariant ( no n : DoublyLinkedListNode.^(left + right) : n = null ) holds for: this
FuzzedInvariant ( no n : DoublyLinkedListNode.^(left + right) : n not in n.^(left + right) ) holds for: this
FuzzedInvariant ( some n : DoublyLinkedListNode.*(left + right) : (n.left.*(left + right)) & (n.left.*(left + right)) not in empty ) holds for: this
FuzzedInvariant ( some n : DoublyLinkedListNode.*(left + right) : (n.left.*(left + right)) & (n.right.*(left + right)) not in empty ) holds for: this
FuzzedInvariant ( some n : DoublyLinkedListNode.*(left + right) : n != null ) holds for: this
FuzzedInvariant ( some n : DoublyLinkedListNode.*(left + right) : n in n.^(left + right) ) holds for: this
FuzzedInvariant ( some n : DoublyLinkedListNode.^(left + right) : (n.left.*(left + right)) & (n.left.*(left + right)) not in empty ) holds for: this
FuzzedInvariant ( some n : DoublyLinkedListNode.^(left + right) : (n.left.*(left + right)) & (n.right.*(left + right)) not in empty ) holds for: this
FuzzedInvariant ( some n : DoublyLinkedListNode.^(left + right) : n = n.left.right ) holds for: this
FuzzedInvariant ( some n : DoublyLinkedListNode.^(left + right) : n in n.^(left + right) ) holds for: this
this.left != null
this.left.left != null
this.left.left.left != null
this.left.left.right != null
this.left.right != null
this.left.right.left != null
this.left.right.right != null
this.right != null
this.right.left != null
this.right.left.left != null
this.right.left.right != null
this.right.right != null
this.right.right.left != null
this.right.right.right != null
===========================================================================
examples.DoublyLinkedListNode.remove():::ENTER
this == this.left.right
this.left == this.left.left.right
this.left == this.left.right.left
this.left == this.right.left.left
this.left.right == this.right.left
this.left.right.right == this.right
this.right == this.right.left.right
this.right == this.right.right.left
FuzzedInvariant ( all n : DoublyLinkedListNode.*(left + right) : n in n.^(left + right) ) holds for: this
FuzzedInvariant ( no n : DoublyLinkedListNode.*(left + right) : n not in n.^(left + right) ) holds for: this
===========================================================================
examples.DoublyLinkedListNode.remove():::EXIT
this.left == this.left.left
this.left == this.left.left.left
this.left == this.left.left.right
this.left == this.left.right
this.left == this.left.right.left
this.left == this.left.right.right
this.left == this.right
this.left == this.right.left
this.left == this.right.left.left
this.left == this.right.left.right
this.left == this.right.right
this.left == this.right.right.left
this.left == this.right.right.right
this.left == \old(this)
this.left == \old(this.left.right)
this.left == \old(this.right.left)
FuzzedInvariant ( all n : DoublyLinkedListNode.*(left + right) : n = n.left ) holds for: orig(this)
FuzzedInvariant ( all n : DoublyLinkedListNode.*(left + right) : n = n.right ) holds for: orig(this)
FuzzedInvariant ( all n : DoublyLinkedListNode.*(left + right) : n = n.right.right ) holds for: orig(this)
FuzzedInvariant ( no n : DoublyLinkedListNode.*(left + right) : n != n.right ) holds for: orig(this)
FuzzedInvariant ( no n : DoublyLinkedListNode.^(left + right) : n != n.right ) holds for: orig(this)
FuzzedInvariant ( no n : DoublyLinkedListNode.^(left + right) : n != n.right.right ) holds for: orig(this)
FuzzedInvariant ( some n : DoublyLinkedListNode.*(left + right) : n = n.left ) holds for: orig(this)
FuzzedInvariant ( some n : DoublyLinkedListNode.*(left + right) : n = n.right ) holds for: orig(this)
FuzzedInvariant ( some n : DoublyLinkedListNode.^(left + right) : n = n.left ) holds for: orig(this)
FuzzedInvariant ( some n : DoublyLinkedListNode.^(left + right) : n = n.right ) holds for: orig(this)
