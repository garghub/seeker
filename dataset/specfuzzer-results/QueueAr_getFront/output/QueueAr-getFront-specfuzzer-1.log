> SpecFuzzer
# Inference step (Daikon + Fuzzed Specs)
Daikon version 5.8.2, released May 4, 2020; http://plse.cs.washington.edu/daikon.

Loading invariants from file: invs_file.xml
Loaded: 0

Fuzzing specs:
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = 1) xor (Integer_Variable_1 = 1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 1) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % -1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 1) iff (Integer_Variable_1 = 0)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 1) xor (Integer_Variable_1 >= -1)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 > 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < 1) iff (Integer_Variable_1 = 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < 0)
Fuzzed spec: (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= 1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1)
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) implies (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < -1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= 0) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= 0)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < 0
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 1
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 <= -1)
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) iff (Integer_Variable_1 < 1)
Fuzzed spec: (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= -1) iff (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 <= 1)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 != 0)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0)
Fuzzed spec: (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: (Integer_Variable_0 <= -1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 = -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < -1) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 <= -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != 0)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 > 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 0
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 >= 1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != -1) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0)
Fuzzed spec: (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= -1) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 1
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < 0) iff (Integer_Variable_1 <= 1)
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = -1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 != 0)
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > 1)
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / -1
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != 1) xor (Integer_Variable_1 >= -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 > 0)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < -1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) iff (Integer_Variable_1 != 1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 0) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > -1) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 < 0)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) implies (Integer_Variable_1 <= -1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 1)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 > -1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 < 0)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) xor (Integer_Variable_1 <= 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= -1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = -1) iff (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) implies (Integer_Variable_1 >= 1)
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= -1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 < 1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 1) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > #(QueueAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 != 1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1)
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) iff (Integer_Variable_1 != -1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 >= 0)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= 0) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = 0) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 = 1)
Fuzzed spec: (Integer_Variable_0 = 1) iff (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 0) iff (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = 0) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) xor (Integer_Variable_1 <= -1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 1) iff (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) iff (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 <= 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > -1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 < 0)
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 != 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 > -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 0) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 = 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 = 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) xor (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 > 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) xor (Integer_Variable_1 <= 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != -1
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 0) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 0) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Unique fuzzed invariants: 408 (2000)
Unary: 24 - Binary: 146 - Ternary: 238 - Discarded: 36
Reading declaration files Processing trace data; reading 1 dtrace file:
Loaded objects from file: /specfuzzer/experiments/QueueAr_getFront/setup-files/QueueArTesterDriver-objects.xml
Total loaded objects: 2855

No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
DataStructures.Overflow:::OBJECT
===========================================================================
DataStructures.Overflow.Overflow():::EXIT
===========================================================================
DataStructures.QueueAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.currentSize
this.currentSize >= 0
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.front
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.front
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.front
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.front
this.front >= 0
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.back
this.back >= -1
this.currentSize <= size(this.theArray[])
this.front <= size(this.theArray[])
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.QueueAr(int):::ENTER
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: capacity
capacity >= 0
===========================================================================
DataStructures.QueueAr.QueueAr(int):::EXIT
this.currentSize == this.front
this.back == size(this.theArray[])-1
orig(capacity) == size(this.theArray[])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(capacity)>
this.currentSize <= orig(capacity)
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT100
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
this.back one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this)
orig(this.currentSize) one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(this.currentSize)
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: orig(this.currentSize)
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: orig(this.currentSize)
size(this.theArray[]) one of { 1, 4, 35 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
this.theArray[orig(this.front)] == null
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.back>
this.currentSize <= this.back
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize < orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
this.currentSize <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 <= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.back, orig(this.front)>
this.back >= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])-1>
orig(this.front) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>
this.currentSize - this.back + orig(this.front) == 0
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
this.back - orig(this.currentSize) - orig(this.front) + 1 == 0
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.front one of { 0, 1, 2 }
return == null
FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
this.currentSize <= this.front
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
(orig(this.currentSize) == 0)  <==>  (this.currentSize == orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.currentSize)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.front, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.currentSize)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), orig(this.currentSize)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.currentSize)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.currentSize)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: this.currentSize)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this))
(orig(this.currentSize) == 0)  ==>  (orig(this.currentSize) <= orig(this.front))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[]) elements == null)
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[].getClass().getName()) elements == null)
(orig(this.currentSize) == 0)  ==>  (return == null)
(orig(this.currentSize) == 0)  ==>  (this.currentSize <= orig(this.front))
(orig(this.currentSize) == 0)  ==>  (this.currentSize <= this.front)
(orig(this.currentSize) == 0)  ==>  (this.currentSize == 0)
(orig(this.currentSize) == 0)  ==>  (this.front == orig(this.front))
(orig(this.currentSize) == 0)  ==>  (this.front >= orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (this.front one of { 0, 1, 2 })
(orig(this.currentSize) == 0)  ==>  (this.theArray[] == orig(this.theArray[]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[] elements == null)
(orig(this.currentSize) == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(orig(this.currentSize) one of { 1, 2, 3 })  <==>  (this.currentSize < orig(this.currentSize))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 <= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(this.currentSize))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: orig(this.currentSize))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: orig(this.currentSize))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (orig(this.front) <= size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1]))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (return.getClass().getName() in orig(this.theArray[].getClass().getName()))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (size(this.theArray[]) one of { 1, 4, 35 })
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.back - orig(this.currentSize) - orig(this.front) + 1 == 0)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.back >= orig(this.front))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.back one of { 0, 1, 2 })
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.currentSize - this.back + orig(this.front) == 0)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.currentSize <= size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.currentSize <= this.back)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.currentSize one of { 0, 1, 2 })
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.front <= size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.theArray[orig(this.front)] == null)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1])
this.currentSize one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
this.currentSize <= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
this.front >= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
return.getClass().getName() in orig(this.theArray[].getClass().getName())
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
orig(this.currentSize) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), size(this.theArray[])>
orig(this.front) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
this.currentSize <= this.front
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize <= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
this.currentSize <= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), this.front>
this.front >= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
orig(this.currentSize) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), size(this.theArray[])>
orig(this.front) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER
this.currentSize one of { 0, 1, 2 }
this.front one of { 0, 1, 2 }
this.back >= 0
this.theArray[this.currentSize] == null
this.theArray.getClass().getName() != x.getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
this.currentSize <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
this.front <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
orig(this.theArray[post(this.back)]) == orig(this.theArray[this.currentSize])
this.currentSize one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize
this.front one of { 0, 1, 2 }
this.back one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.back)
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.back)
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.back)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>
this.front % this.currentSize == 0
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize > orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
this.front <= this.back
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= size(this.theArray[])-1
this.back >= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
orig(this.currentSize) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
orig(this.back) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
this.currentSize + this.front - this.back - 1 == 0
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
this.front - this.back + orig(this.currentSize) == 0
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.getFront():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <this, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
===========================================================================
DataStructures.QueueAr.getFront():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isEmpty():::ENTER
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <this, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
(this.currentSize == 0)  <==>  (return == true)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.front, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (this.back >= -1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize one of { 1, 2, 3 })  <==>  (return == false)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.back one of { 0, 1, 2 })
(this.currentSize one of { 1, 2, 3 })  ==>  (this.currentSize + this.front - this.back - 1 == 0)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front <= size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front <= this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front one of { 0, 1, 2 })
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="return == true"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
return == true
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
this.currentSize <= this.front
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="not(return == true)"
this.currentSize one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize
this.front one of { 0, 1, 2 }
this.back one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
return == false
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>
this.front <= this.back
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
this.currentSize + this.front - this.back - 1 == 0
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isFull():::ENTER
this.currentSize one of { 0, 1, 2 }
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <this, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
===========================================================================
DataStructures.QueueAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
(return == true)  <==>  (this.currentSize == size(this.theArray[]))
(return == true)  ==>  (this.back == size(this.theArray[])-1)
(return == true)  ==>  (this.currentSize == this.front)
(return == true)  ==>  (this.theArray[] == [])
(return == true)  ==>  (this.theArray[].getClass().getName() == [])
(this.back >= 0)  <==>  (return == false)
(this.back >= 0)  <==>  (this.currentSize <= size(this.theArray[])-1)
(this.back >= 0)  <==>  (this.front <= size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this))
(this.back >= 0)  ==>  (this.currentSize one of { 0, 1, 2 })
(this.back >= 0)  ==>  (this.front one of { 0, 1, 2 })
this.currentSize one of { 0, 1, 2 }
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="return == true"
this.currentSize == this.front
this.currentSize == orig(this.front)
this.currentSize == size(this.theArray[])
this.currentSize == orig(size(this.theArray[]))
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
this.theArray[] == []
this.theArray[].getClass().getName() == []
return == true
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="not(return == true)"
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
this.back >= 0
return == false
FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
this.currentSize <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
===========================================================================
DataStructures.QueueAr.makeEmpty():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize <= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
this.currentSize <= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), this.back>
this.back >= orig(this.back)
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
orig(this.currentSize) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), size(this.theArray[])>
orig(this.front) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
Exiting Daikon.

# Filtering step

- Mutation is: 1:STD:<ASSIGN>:<NO-OP>:DataStructures.QueueAr@<init>(int):32:theArray = new Object[capacity] |==> <NO-OP>
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m1.dtrace.gz
Loaded invs from previous step: 0
                                                                               [9:31:01 AM]:                                                                  
No return from procedure observed 241 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 241 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 0 errors found in 0 samples (NaN%)
QueueArTesterDriver.inv.gz: 0 false positives, out of 0, which is NaN%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 0
Saving mutants results file

- Mutation is: 10:AOR:-(int,int):%(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length % 1
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
Loaded invs from previous step: 0
                                                                               [9:31:02 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m10-objects.xml
Total loaded objects: 2855
[9:31:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:31:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:32:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:33:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT
No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 10,720 errors found in 4,620,300 samples (0.23%)
QueueArTesterDriver.inv.gz: 1268 false positives, out of 18234, which is 6.95%.
Preserving 384 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 384
Saving mutants results file

- Mutation is: 11:AOR:-(int,int):*(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length QueueArTesterDriver.inv.gz base-invs-by-mutants.csv base_invs_file.xml experiments hs_err_pid1983241.log hs_err_pid51463.log invs-by-mutants.csv invs.csv invs_file.xml lib literals mutants scripts testers 1
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m11.dtrace.gz
Loaded invs from previous step: 384
                                                                               [9:34:17 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m11-objects.xml
Total loaded objects: 2011
[9:34:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:34:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:35:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT
No return from procedure observed 107 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 99 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 81,204 errors found in 2,703,941 samples (3.00%)
QueueArTesterDriver.inv.gz: 1169 false positives, out of 18234, which is 6.41%.
Preserving 325 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 384
Saving - Total: 413
Saving mutants results file

- Mutation is: 12:AOR:-(int,int):+(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length + 1
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m12.dtrace.gz
Loaded invs from previous step: 413
                                                                               [9:36:11 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m12-objects.xml
Total loaded objects: 2011
[9:36:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:36:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:37:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT
No return from procedure observed 107 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 99 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 83,460 errors found in 2,703,941 samples (3.09%)
QueueArTesterDriver.inv.gz: 1026 false positives, out of 18234, which is 5.63%.
Preserving 285 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 413
Saving - Total: 497
Saving mutants results file

- Mutation is: 13:AOR:-(int,int):/(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length / 1
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m13.dtrace.gz
Loaded invs from previous step: 497
                                                                               [9:38:04 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m13-objects.xml
Total loaded objects: 2011
[9:38:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:38:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:39:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT
No return from procedure observed 107 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 99 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 81,204 errors found in 2,703,941 samples (3.00%)
QueueArTesterDriver.inv.gz: 1169 false positives, out of 18234, which is 6.41%.
Preserving 325 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 497
Saving - Total: 497
Saving mutants results file

- Mutation is: 14:STD:<ASSIGN>:<NO-OP>:DataStructures.QueueAr@<init>(int):35:back = theArray.length - 1 |==> <NO-OP>
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
Loaded invs from previous step: 497
                                                                               [9:40:01 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m14-objects.xml
Total loaded objects: 2855
[9:40:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:40:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:41:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:42:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT
No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 10,720 errors found in 4,620,300 samples (0.23%)
QueueArTesterDriver.inv.gz: 1268 false positives, out of 18234, which is 6.95%.
Preserving 384 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 497
Saving - Total: 497
Saving mutants results file

- Mutation is: 2:LVR:0:POS:DataStructures.QueueAr@<init>(int):33:0 |==> 1
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
Loaded invs from previous step: 497
                                                                               [9:43:06 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m2-objects.xml
Total loaded objects: 2866
[9:43:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:43:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:44:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:45:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT
No return from procedure observed 21 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 9 invocations
  DataStructures.QueueAr.getFront() : 1 invocation
  DataStructures.QueueAr.dequeue() : 2 invocations
  DataStructures.QueueAr.dequeueAll() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 52,127 errors found in 4,770,715 samples (1.09%)
QueueArTesterDriver.inv.gz: 1004 false positives, out of 18234, which is 5.51%.
Preserving 463 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 497
Saving - Total: 890
Saving mutants results file

- Mutation is: 3:LVR:0:NEG:DataStructures.QueueAr@<init>(int):33:0 |==> -1
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
Loaded invs from previous step: 890
                                                                               [9:46:22 AM]:                                                                  [9:46:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArTLoaded objects from file: /specfuzzer/experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m3-objects.xml
Total loaded objects: 449
[9:46:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:46:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:47:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:48:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:49:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:50:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:51:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:52:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:53:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:54:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:55:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:56:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:57:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:58:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[9:59:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArT[10:00:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:00:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:01:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:02:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:03:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:04:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:05:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:06:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:07:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:08:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:09:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:10:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:11:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:12:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:13:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:14:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:15:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:16:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:17:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:18:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:19:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:20:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:21:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:22:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:23:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:24:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:25:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:26:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:27:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:28:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:29:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:30:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:31:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:32:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:33:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:34:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:35:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:36:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:37:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:38:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:39:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueArSaving mutants results file

- Mutation is: 39:COR:isEmpty():TRUE:DataStructures.QueueAr@getFront():76:isEmpty() |==> false
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m39.dtrace.gz
Loaded invs from previous step: 890
                                                                               [10:40:32 AM]:                                                                 Loaded objects from file: /specfuzzer/experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m39-objects.xml
Total loaded objects: 2824
[10:40:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:40:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:41:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:42:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr
No return from procedure observed 13 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
  DataStructures.QueueAr.getFront() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 0 errors found in 4,475,547 samples (0.00%)
QueueArTesterDriver.inv.gz: 0 false positives, out of 18234, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 890
Saving - Total: 890
Saving mutants results file

- Mutation is: 4:STD:<ASSIGN>:<NO-OP>:DataStructures.QueueAr@<init>(int):33:currentSize = 0 |==> <NO-OP>
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m4.dtrace.gz
Loaded invs from previous step: 890
                                                                               [10:43:37 AM]:                                                                 Loaded objects from file: /specfuzzer/experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m4-objects.xml
Total loaded objects: 2855
[10:43:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:43:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:44:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:45:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr
No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 0 errors found in 4,622,054 samples (0.00%)
QueueArTesterDriver.inv.gz: 0 false positives, out of 18234, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 890
Saving - Total: 890
Saving mutants results file

- Mutation is: 40:COR:isEmpty():FALSE:DataStructures.QueueAr@getFront():76:isEmpty() |==> true
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m40.dtrace.gz
Loaded invs from previous step: 890
                                                                               [10:46:55 AM]:                                                                 Loaded objects from file: /specfuzzer/experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m40-objects.xml
Total loaded objects: 2825
[10:46:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:46:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:47:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:48:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:49:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr
No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 0 errors found in 4,476,462 samples (0.00%)
QueueArTesterDriver.inv.gz: 0 false positives, out of 18228, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 890
Saving - Total: 890
Saving mutants results file

- Mutation is: 41:EVR:<ARRAY_ACCESS(java.lang.Object)>:<DEFAULT>:DataStructures.QueueAr@getFront():79:theArray[front] |==> null
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m41.dtrace.gz
Loaded invs from previous step: 890
                                                                               [10:50:06 AM]:                                                                 Loaded objects from file: /specfuzzer/experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m41-objects.xml
Total loaded objects: 2855
[10:50:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:50:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:51:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:52:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr
No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 0 errors found in 4,621,750 samples (0.00%)
QueueArTesterDriver.inv.gz: 0 false positives, out of 18228, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 890
Saving - Total: 890
Saving mutants results file

- Mutation is: 42:LVR:TRUE:FALSE:DataStructures.QueueAr@getFront():81:true |==> false
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m42.dtrace.gz
Loaded invs from previous step: 890
                                                                               [10:53:18 AM]:                                                                 Saving mutants results file

- Mutation is: 43:EVR:<IDENTIFIER(java.lang.Object)>:<DEFAULT>:DataStructures.QueueAr@getFront():83:result |==> null
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m43.dtrace.gz
Loaded invs from previous step: 890
                                                                               [10:53:21 AM]:                                                                 Loaded objects from file: /specfuzzer/experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m43-objects.xml
Total loaded objects: 2855
[10:53:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:53:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:54:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:55:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr
No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 0 errors found in 4,621,750 samples (0.00%)
QueueArTesterDriver.inv.gz: 0 false positives, out of 18228, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 890
Saving - Total: 890
Saving mutants results file

- Mutation is: 5:LVR:0:POS:DataStructures.QueueAr@<init>(int):34:0 |==> 1
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m5.dtrace.gz
Loaded invs from previous step: 890
                                                                               [10:56:41 AM]:                                                                 Loaded objects from file: /specfuzzer/experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m5-objects.xml
Total loaded objects: 2853
[10:56:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:56:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:57:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:58:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr
No return from procedure observed 14 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
  DataStructures.QueueAr.dequeueAll() : 1 invocation
  DataStructures.QueueAr.dequeue() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 24,447 errors found in 4,609,997 samples (0.53%)
QueueArTesterDriver.inv.gz: 1063 false positives, out of 18234, which is 5.83%.
Preserving 350 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 890
Saving - Total: 1048
Saving mutants results file

- Mutation is: 6:LVR:0:NEG:DataStructures.QueueAr@<init>(int):34:0 |==> -1
Checking invs on mutant: experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m6.dtrace.gz
Loaded invs from previous step: 1048
                                                                               [10:59:52 AM]:                                                                 Loaded objects from file: /specfuzzer/experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m6-objects.xml
Total loaded objects: 2513
[10:59:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[10:59:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:44 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:00:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:08 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:21 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:22 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:23 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:24 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:25 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:26 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:27 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:28 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:29 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:30 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:31 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:32 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:33 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:34 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:35 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:36 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:37 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:38 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:39 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:40 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:41 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:42 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:43 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:45 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:46 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:47 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:48 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:49 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:50 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:51 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:52 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:53 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:54 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:55 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:56 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:57 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:58 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:01:59 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:00 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:01 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:02 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:03 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:04 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:05 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:06 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:07 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:09 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:10 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:11 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:12 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:13 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:14 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:15 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:16 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:17 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:18 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:19 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr[11:02:20 AM]: Reading experiments/QueueAr_getFront/setup-files/mutants/QueueAr
No return from procedure observed 79 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.getFront() : 38 invocations
  DataStructures.QueueAr.dequeue() : 20 invocations
  DataStructures.QueueAr.dequeueAll() : 9 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 114,136 errors found in 3,775,666 samples (3.02%)
QueueArTesterDriver.inv.gz: 1691 false positives, out of 18234, which is 9.27%.
Preserving 398 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 1048
Saving - Total: 1344
                                                                               Saving mutants results file

Filtering step finished due to timeout: 5484
# Filtering step took minutes: 91
# Mutation killing ability results saved in: experiments/QueueAr_getFront/output/QueueAr-getFront-specfuzzer-1-invs-by-mutants.csv

# Writing assertions to file: experiments/QueueAr_getFront/output/QueueAr-getFront-specfuzzer-1.assertions

# Filtering specs with buckets
> Mutant filter from file: experiments/QueueAr_getFront/output/QueueAr-getFront-specfuzzer-1-invs-by-mutants.csv
Unique mutants: 9
Loading assertions from: experiments/QueueAr_getFront/output/QueueAr-getFront-specfuzzer-1.assertions
Specs killing mutants: 27

> Minimizing by exploring the bit vector of each spec
Building bit vectors of size: 9
Building buckets
=====================================
Buckets: 9
Vector: [1. 0. 0. 0. 1. 1. 1. 1. 0.]
Mutants:
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m5.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  162  - Fails:  419 Quality:  422
Picked:
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>

Vector: [1. 0. 0. 0. 1. 0. 0. 0. 0.]
Mutants:
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  163  - Fails:  116 Quality:  119
Picked:
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>

Vector: [1. 1. 1. 1. 1. 0. 0. 0. 0.]
Mutants:
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m11.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m12.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m13.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
Specs:
	this.back <= daikon.Quant.size(this.theArray)-1 l:  47  - Fails:  3835 Quality:  3835
Picked:
	this.back <= daikon.Quant.size(this.theArray)-1

Vector: [0. 0. 0. 0. 0. 1. 1. 0. 0.]
Mutants:
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back> l:  105  - Fails:  2132 Quality:  2134
	FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back> l:  114  - Fails:  136 Quality:  138
	this.currentSize <= daikon.Quant.size(this.theArray) l:  52  - Fails:  76 Quality:  76
	FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize> l:  103  - Fails:  26 Quality:  27
Picked:
	this.currentSize <= daikon.Quant.size(this.theArray)
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>

Vector: [0. 0. 0. 0. 0. 1. 1. 1. 0.]
Mutants:
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m5.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back> l:  99  - Fails:  713 Quality:  715
	FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front> l:  120  - Fails:  44 Quality:  46
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>

Vector: [0. 0. 0. 0. 0. 1. 1. 1. 1.]
Mutants:
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m5.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m6.dtrace.gz
Specs:
	this.front == 0 || this.front == 1 || this.front == 2 l:  53  - Fails:  1224 Quality:  1224
Picked:
	this.front == 0 || this.front == 1 || this.front == 2

Vector: [0. 0. 0. 0. 0. 0. 0. 1. 1.]
Mutants:
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m5.dtrace.gz
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m6.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back> l:  108  - Fails:  86 Quality:  88
Picked:
	FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>

Vector: [0. 0. 0. 0. 0. 0. 0. 1. 0.]
Mutants:
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m5.dtrace.gz
Specs:
	this.front <= daikon.Quant.size(this.theArray) l:  46  - Fails:  44 Quality:  44
Picked:
	this.front <= daikon.Quant.size(this.theArray)

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 1.]
Mutants:
	experiments/QueueAr_getFront/setup-files/mutants/QueueArTesterDriver-m6.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.front l:  65  - Fails:  2071 Quality:  2072
	FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.front l:  65  - Fails:  2071 Quality:  2072
	FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.front l:  66  - Fails:  2071 Quality:  2072
	this.front >= 0 l:  15  - Fails:  2071 Quality:  2071
	FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, this.back> l:  110  - Fails:  2038 Quality:  2040
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back> l:  100  - Fails:  2038 Quality:  2040
	FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 1) ) holds for: <this.front, this.back> l:  109  - Fails:  2028 Quality:  2030
	FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front> l:  118  - Fails:  1233 Quality:  1235
	FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front> l:  117  - Fails:  1233 Quality:  1235
	FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front> l:  116  - Fails:  1233 Quality:  1235
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front> l:  138  - Fails:  1233 Quality:  1235
	FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front> l:  116  - Fails:  1224 Quality:  1226
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back> l:  130  - Fails:  821 Quality:  823
	FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front> l:  115  - Fails:  590 Quality:  592
	FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front> l:  121  - Fails:  9 Quality:  11
Picked:
	FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.front

Buckets: 9
Specs: 10
Saved in file: experiments/QueueAr_getFront/output/QueueAr-getFront-specfuzzer-1-buckets.assertions

