buckets=12
specs=15
=====================================
:::OBJECT
this.topOfStack <= daikon.Quant.size(this.theArray)-1
this.theArray != null
=====================================
:::POSTCONDITION
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.theArray), new String[] { null, null, null, null, null, null, null, null, null, null }) || daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.theArray), new String[] { "java.lang.Long", null, null, null, null, null, null, null, null, null })
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack < daikon.Quant.size(this.theArray)-1
this.topOfStack < daikon.Quant.size(this.theArray)
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
\old(this.topOfStack) < daikon.Quant.size(this.theArray)-1
this.topOfStack == -1
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
