> SpecFuzzer
# Inference step (Daikon + Fuzzed Specs)
Daikon version 5.8.2, released May 4, 2020; http://plse.cs.washington.edu/daikon.

Loading invariants from file: invs_file.xml
Loaded: 0

Fuzzing specs:
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 < 0)
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= -1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= 0)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 >= 1)
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != 0)
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * -1
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 < -1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 1) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= 0) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 0
Fuzzed spec: (Integer_Variable_0 != 1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 != -1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - -1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 != -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 <= 0)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 < 0)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 0) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= -1) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 != 1)
Fuzzed spec: (Integer_Variable_0 != 1) xor (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 0)
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: all n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 0
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0)
Fuzzed spec: some n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 = -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / -1
Fuzzed spec: (Integer_Variable_0 <= -1) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 = -1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 < #(StackAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 > 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= -1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 1) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 <= 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 0
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 <= 0)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 > 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != 1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 0) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = -1) iff (Integer_Variable_1 = 0)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 >= 0)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 < 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 1
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 0) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > -1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 > -1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 >= -1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > -1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 <= 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 < -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < 0) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 1) iff (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) xor (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 0
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 >= -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = -1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= -1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + -1
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 <= -1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 0) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != -1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) xor (Integer_Variable_1 <= -1)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 < 0)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 0
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = 0) iff (Integer_Variable_1 > 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 > 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 < 0)
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 > 1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 = 1)
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 = -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 < 1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 0) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = 1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1)
Fuzzed spec: (Integer_Variable_0 = 1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 1
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 <= 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 0) or (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 >= -1)
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 0) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 >= 1)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 0) iff (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 0) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= 0) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = 0) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= 0)
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 > 0)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = -1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= 1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 0
Fuzzed spec: (Integer_Variable_0 >= 0) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 1) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= 1)
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= 0) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2)
Unique fuzzed invariants: 432 (2000)
Unary: 24 - Binary: 126 - Ternary: 282 - Discarded: 34
Reading declaration files Processing trace data; reading 1 dtrace file:
Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/StackArTesterDriver-objects.xml
Total loaded objects: 2843

No return from procedure observed 63 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 44 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
DataStructures.OverflowException:::CLASS
===========================================================================
DataStructures.OverflowException:::OBJECT
===========================================================================
DataStructures.OverflowException.OverflowException():::EXIT
===========================================================================
DataStructures.StackAr:::CLASS
===========================================================================
DataStructures.StackAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.topOfStack
this.topOfStack >= -1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <this, DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <this, DataStructures.StackAr.DEFAULT_CAPACITY>
this.topOfStack <= size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.StackAr():::EXIT
this.theArray[] contains only nulls and has only one value, of length 10
this.theArray[] elements == null
this.theArray[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null]
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
size(this.theArray[]) == 10
===========================================================================
DataStructures.StackAr.StackAr(int):::ENTER
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: capacity
capacity >= 0
===========================================================================
DataStructures.StackAr.StackAr(int):::EXIT
orig(capacity) == size(this.theArray[])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 = 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 <= -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 <= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.isEmpty():::ENTER
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(this.topOfStack == -1)  <==>  (return == true)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack >= 0)  <==>  (return == false)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[]))
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(this.topOfStack >= 0)  ==>  (size(this.theArray[]) one of { 10, 32, 100 })
(this.topOfStack >= 0)  ==>  (this.topOfStack < size(this.theArray[])-1)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="return == true"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == true
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="not(return == true)"
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack
this.topOfStack >= 0
return == false
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
size(this.theArray[]) one of { 10, 32, 100 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.isFull():::ENTER
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(return == false)  <==>  (this.topOfStack < size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(return == true)  <==>  (this.topOfStack == size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 <= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), size(this.theArray[])-1>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), size(this.theArray[])-1>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), size(this.theArray[])-1>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n != null ) holds for: orig(this))
(return == true)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this))
(return == true)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this))
(return == true)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n = null ) holds for: orig(this))
(return == true)  ==>  (this.theArray[] == [])
(return == true)  ==>  (this.theArray[].getClass().getName() == [])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="return == true"
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray[] == []
this.theArray[].getClass().getName() == []
return == true
FuzzedInvariant ( all n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n = null ) holds for: orig(this)
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="not(return == true)"
return == false
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.makeEmpty():::ENTER
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack <= orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.pop():::ENTER
this.topOfStack one of { 0, 1, 2 }
size(this.theArray[]) == 10
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.pop():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[].getClass().getName() one of { [null, null, null, null, null, null, null, null, null, null], [java.lang.Long, null, null, null, null, null, null, null, null, null] }
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.topOfStack)
size(this.theArray[]) == 10
this.theArray[orig(this.topOfStack)] == null
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack < orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
this.theArray[orig(this.topOfStack)] in orig(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER
this.theArray.getClass().getName() != x.getClass().getName()
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
size(this.theArray[]) == orig(size(this.theArray[]))
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack
this.topOfStack >= 0
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
orig(this.theArray[post(this.topOfStack)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack - orig(this.topOfStack) - 1 == 0
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.top():::ENTER
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.top():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
===========================================================================
DataStructures.UnderflowException:::CLASS
===========================================================================
DataStructures.UnderflowException:::OBJECT
===========================================================================
DataStructures.UnderflowException.UnderflowException():::EXIT
Exiting Daikon.

# Filtering step

- Mutation is: 1:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@<init>(int):44:theArray = new Object[capacity] |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m1.dtrace.gz
Loaded invs from previous step: 0
                                                                               [6:54:27 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m1-objects.xml
Total loaded objects: 1113
[6:54:28 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:29 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:30 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:31 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 373 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 13 invocations
  DataStructures.StackAr.isFull() : 190 invocations
  DataStructures.StackAr.push(java.lang.Object) : 142 invocations
  DataStructures.StackAr.makeEmpty() : 28 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 2,813 errors found in 158,725 samples (1.77%)
StackArTesterDriver.inv.gz: 172 false positives, out of 728, which is 23.63%.
Preserving 84 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 84
Saving mutants results file

- Mutation is: 2:LVR:NEG:0:DataStructures.StackAr@<init>(int):45:-1 |==> 0
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
Loaded invs from previous step: 84
                                                                               [6:54:34 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m2-objects.xml
Total loaded objects: 2792
[6:54:35 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:36 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:37 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:38 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:39 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:40 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:41 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:42 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:46 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:47 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:49 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:50 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:51 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:52 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:54 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:55 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:56 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:57 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:58 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:54:59 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:00 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:05 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:07 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:08 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:09 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:10 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:11 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:12 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:14 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:15 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:16 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:17 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:18 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:20 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:21 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:22 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:23 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:24 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:26 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 52 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 20 invocations
  DataStructures.StackAr.push(java.lang.Object) : 6 invocations
  DataStructures.StackAr.top() : 11 invocations
  DataStructures.StackAr.makeEmpty() : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 50,118 errors found in 1,600,090 samples (3.13%)
StackArTesterDriver.inv.gz: 686 false positives, out of 6120, which is 11.21%.
Preserving 250 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 84
Saving - Total: 299
Saving mutants results file

- Mutation is: 3:LVR:NEG:POS:DataStructures.StackAr@<init>(int):45:-1 |==> 1
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
Loaded invs from previous step: 299
                                                                               [6:55:28 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m3-objects.xml
Total loaded objects: 2789
[6:55:29 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:30 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:31 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:35 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:36 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:37 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:41 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:46 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:47 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:50 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:51 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:52 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:54 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:55 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:56 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:57 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:58 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:55:59 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:00 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:05 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:07 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:08 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:09 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:10 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:11 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:14 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:15 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:16 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:17 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:18 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:20 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 55 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 22 invocations
  DataStructures.StackAr.push(java.lang.Object) : 6 invocations
  DataStructures.StackAr.top() : 12 invocations
  DataStructures.StackAr.makeEmpty() : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 70,027 errors found in 1,595,083 samples (4.39%)
StackArTesterDriver.inv.gz: 644 false positives, out of 6108, which is 10.54%.
Preserving 217 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 299
Saving - Total: 362
Saving mutants results file

- Mutation is: 37:COR:isEmpty():TRUE:DataStructures.StackAr@pop():99:isEmpty() |==> false
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m37.dtrace.gz
Loaded invs from previous step: 362
                                                                               [6:56:23 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m37-objects.xml
Total loaded objects: 2799
[6:56:24 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:26 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:27 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:28 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:29 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:30 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:31 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:34 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:35 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:36 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:37 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:38 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:39 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:40 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:41 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:42 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:46 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:47 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:49 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:51 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:52 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:54 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:55 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:56 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:57 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:58 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:56:59 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:00 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:05 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:07 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:08 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:09 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:10 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:11 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 63 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 44 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,564,049 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 6102, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 362
Saving - Total: 362
Saving mutants results file

- Mutation is: 38:COR:isEmpty():FALSE:DataStructures.StackAr@pop():99:isEmpty() |==> true
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m38.dtrace.gz
Loaded invs from previous step: 362
                                                                               [6:57:15 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m38-objects.xml
Total loaded objects: 2469
[6:57:16 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:17 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:20 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:21 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:22 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:23 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:24 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:27 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:28 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:30 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:31 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:34 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:35 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:36 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:38 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:39 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:41 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:42 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:47 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:52 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:57:56 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 121 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 102 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,261,354 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 4753, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 362
Saving - Total: 362
Saving mutants results file

- Mutation is: 39:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@pop():102:theArray[topOfStack] = null |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m39.dtrace.gz
Loaded invs from previous step: 362
                                                                               [6:57:57 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m39-objects.xml
Total loaded objects: 2843
[6:57:58 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:00 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:05 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:07 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:08 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:09 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:10 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:11 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:12 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:14 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:15 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:16 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:17 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:18 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:20 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:21 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:22 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:23 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:24 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:26 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:27 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:28 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:29 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:30 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:31 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:34 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:35 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:36 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:37 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:38 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:39 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:40 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:41 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:42 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:47 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:49 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:50 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:51 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 63 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 44 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 260 errors found in 1,612,378 samples (0.02%)
StackArTesterDriver.inv.gz: 16 false positives, out of 6118, which is 0.26%.
Preserving 2 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 362
Saving - Total: 364
Saving mutants results file

- Mutation is: 4:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@<init>(int):45:topOfStack = -1 |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
Loaded invs from previous step: 364
                                                                               [6:58:52 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m4-objects.xml
Total loaded objects: 2792
[6:58:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:54 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:55 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:56 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:57 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:58 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:58:59 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:00 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:05 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:07 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:08 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:09 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:10 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:11 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:12 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:14 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:15 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:16 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:17 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:18 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:20 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:21 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:22 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:23 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:24 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:26 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:27 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:28 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:29 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:30 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:31 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:34 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:35 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:36 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:37 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:38 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:39 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:41 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:42 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 52 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 20 invocations
  DataStructures.StackAr.push(java.lang.Object) : 6 invocations
  DataStructures.StackAr.top() : 11 invocations
  DataStructures.StackAr.makeEmpty() : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 50,114 errors found in 1,600,090 samples (3.13%)
StackArTesterDriver.inv.gz: 686 false positives, out of 6120, which is 11.21%.
Preserving 250 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 364
Saving - Total: 364
Saving mutants results file

- Mutation is: 40:LVR:POS:0:DataStructures.StackAr@pop():103:1 |==> 0
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m40.dtrace.gz
Loaded invs from previous step: 364
                                                                               [6:59:47 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m40-objects.xml
Total loaded objects: 2843
[6:59:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:49 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:50 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:51 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:52 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:54 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:55 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:56 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:57 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:58 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[6:59:59 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:00 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:05 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:07 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:08 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:09 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:10 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:11 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:12 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:14 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:15 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:16 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:17 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:18 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:20 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:21 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:22 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:23 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:24 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:26 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:27 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:28 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:29 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:30 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:31 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:34 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:35 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:36 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:37 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:38 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:39 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 59 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 40 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 12,457 errors found in 1,617,768 samples (0.77%)
StackArTesterDriver.inv.gz: 200 false positives, out of 6118, which is 3.27%.
Preserving 91 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 364
Saving - Total: 437
Saving mutants results file

- Mutation is: 41:LVR:POS:NEG:DataStructures.StackAr@pop():103:1 |==> -1
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m41.dtrace.gz
Loaded invs from previous step: 437
                                                                               [7:00:41 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m41-objects.xml
Total loaded objects: 2843
[7:00:42 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:46 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:47 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:49 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:50 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:51 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:52 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:54 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:55 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:56 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:57 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:00:58 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:00 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:05 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:07 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:08 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:09 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:10 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:11 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:12 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:14 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:15 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:16 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:17 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:18 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:20 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:21 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:22 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:23 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:24 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:26 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:27 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:28 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:29 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:30 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:31 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:34 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 59 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 40 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 12,057 errors found in 1,617,768 samples (0.75%)
StackArTesterDriver.inv.gz: 181 false positives, out of 6118, which is 2.96%.
Preserving 80 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 437
Saving - Total: 460
Saving mutants results file

- Mutation is: 42:AOR:-(int,int):%(int,int):DataStructures.StackAr@pop():103:topOfStack - 1 |==> topOfStack % 1
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
Loaded invs from previous step: 460
                                                                               [7:01:37 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m42-objects.xml
Total loaded objects: 2843
[7:01:38 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:39 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:40 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:41 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:42 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:46 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:47 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:49 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:50 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:51 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:52 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:54 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:55 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:56 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:57 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:58 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:01:59 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:00 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:05 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:07 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:09 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:10 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:11 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:12 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:14 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:15 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:16 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:17 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:18 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:20 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:21 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:22 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:23 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:24 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:26 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:27 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:28 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:29 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 59 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 40 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 8,860 errors found in 1,617,780 samples (0.55%)
StackArTesterDriver.inv.gz: 148 false positives, out of 6118, which is 2.42%.
Preserving 72 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 460
Saving - Total: 462
Saving mutants results file

- Mutation is: 43:AOR:-(int,int):*(int,int):DataStructures.StackAr@pop():103:topOfStack - 1 |==> topOfStack StackArTesterDriver.inv.gz base-invs-by-mutants.csv base_invs_file.xml experiments hs_err_pid1983241.log hs_err_pid51463.log hs_err_pid53479.log invs-by-mutants.csv invs.csv invs_file.xml lib literals mutants scripts testers 1
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m43.dtrace.gz
Loaded invs from previous step: 462
                                                                               [7:02:31 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m43-objects.xml
Total loaded objects: 2843
[7:02:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:34 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:36 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:37 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:38 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:39 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:40 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:41 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:42 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:46 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:47 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:49 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:50 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:51 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:52 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:54 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:55 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:56 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:57 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:58 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:02:59 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:00 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:05 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:07 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:08 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:09 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:10 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:11 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:14 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:15 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:16 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:17 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:18 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:20 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:21 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:22 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:23 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:24 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:26 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:27 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 59 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 40 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 12,457 errors found in 1,617,768 samples (0.77%)
StackArTesterDriver.inv.gz: 200 false positives, out of 6118, which is 3.27%.
Preserving 91 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 462
Saving - Total: 462
Saving mutants results file

- Mutation is: 44:AOR:-(int,int):+(int,int):DataStructures.StackAr@pop():103:topOfStack - 1 |==> topOfStack + 1
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m44.dtrace.gz
Loaded invs from previous step: 462
                                                                               [7:03:29 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m44-objects.xml
Total loaded objects: 2843
[7:03:30 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:31 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:35 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:36 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:38 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:40 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:46 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:47 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:50 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:51 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:54 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:03:59 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:07 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:08 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:09 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:15 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:16 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:17 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:18 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 59 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 40 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 12,057 errors found in 1,617,768 samples (0.75%)
StackArTesterDriver.inv.gz: 181 false positives, out of 6118, which is 2.96%.
Preserving 80 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 462
Saving - Total: 462
Saving mutants results file

- Mutation is: 45:AOR:-(int,int):/(int,int):DataStructures.StackAr@pop():103:topOfStack - 1 |==> topOfStack / 1
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m45.dtrace.gz
Loaded invs from previous step: 462
                                                                               [7:04:22 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m45-objects.xml
Total loaded objects: 2843
[7:04:23 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:24 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:26 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:27 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:28 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:29 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:31 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:34 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:35 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:36 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:37 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:38 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:39 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:40 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:41 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:42 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:46 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:47 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:49 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:50 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:51 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:52 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:54 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:55 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:56 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:57 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:58 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:04:59 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:00 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:05 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:07 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:08 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:09 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:10 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:11 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:12 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:14 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 59 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 40 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 12,457 errors found in 1,617,768 samples (0.77%)
StackArTesterDriver.inv.gz: 200 false positives, out of 6118, which is 3.27%.
Preserving 91 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 462
Saving - Total: 462
Saving mutants results file

- Mutation is: 46:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@pop():103:topOfStack = topOfStack - 1 |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
Loaded invs from previous step: 462
                                                                               [7:05:17 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m46-objects.xml
Total loaded objects: 2843
[7:05:18 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:20 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:21 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:22 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:23 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:24 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:26 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:27 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:28 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:29 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:30 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:31 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:34 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:35 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:36 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:37 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:38 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:39 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:40 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:41 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:42 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:47 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:49 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:50 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:51 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:52 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:54 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:55 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:56 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:57 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:58 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:05:59 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:00 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:05 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:07 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:09 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:10 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 59 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 40 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 12,457 errors found in 1,617,768 samples (0.77%)
StackArTesterDriver.inv.gz: 200 false positives, out of 6118, which is 3.27%.
Preserving 91 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 462
Saving - Total: 462
Saving mutants results file

- Mutation is: 47:LVR:POS:0:DataStructures.StackAr@pop():105:1 |==> 0
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
Loaded invs from previous step: 462
                                                                               [7:06:12 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m47-objects.xml
Total loaded objects: 2575
[7:06:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:14 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:15 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:16 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:17 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:18 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:20 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:21 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:22 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:23 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:24 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:26 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:27 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:28 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:29 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:30 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:34 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:35 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:36 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:37 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:38 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:39 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:40 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:41 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:42 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:46 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:47 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:49 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:50 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:51 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:52 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:54 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:06:55 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 110 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 91 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,339,951 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 6118, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 462
Saving - Total: 462
Saving mutants results file

- Mutation is: 48:LVR:POS:NEG:DataStructures.StackAr@pop():105:1 |==> -1
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m48.dtrace.gz
Loaded invs from previous step: 462
                                                                               [7:06:58 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m48-objects.xml
Total loaded objects: 2556
[7:06:59 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:00 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:05 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:08 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:09 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:10 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:11 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:12 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:14 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:15 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:16 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:17 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:18 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:20 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:21 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:22 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:23 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:24 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:26 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:27 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:28 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:29 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:30 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:31 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:34 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:35 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:36 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:37 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:38 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:39 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:40 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 114 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 95 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,324,714 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 6118, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 462
Saving - Total: 462
Saving mutants results file

- Mutation is: 49:AOR:+(int,int):%(int,int):DataStructures.StackAr@pop():105:topOfStack + 1 |==> topOfStack % 1
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
Loaded invs from previous step: 462
                                                                               [7:07:43 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m49-objects.xml
Total loaded objects: 2843
[7:07:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:46 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:47 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:49 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:50 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:51 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:52 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:54 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:55 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:56 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:57 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:58 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:07:59 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:00 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:05 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:07 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:08 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:09 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:10 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:11 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:12 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:14 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:15 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:16 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:17 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:18 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:20 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:21 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:22 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:23 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:24 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:26 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:27 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:28 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:29 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:30 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:31 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:34 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:35 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 63 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 44 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,612,378 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 6118, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 462
Saving - Total: 462
Saving mutants results file

- Mutation is: 50:AOR:+(int,int):*(int,int):DataStructures.StackAr@pop():105:topOfStack + 1 |==> topOfStack StackArTesterDriver.inv.gz base-invs-by-mutants.csv base_invs_file.xml experiments hs_err_pid1983241.log hs_err_pid51463.log hs_err_pid53479.log invs-by-mutants.csv invs.csv invs_file.xml lib literals mutants scripts testers 1
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
Loaded invs from previous step: 462
                                                                               [7:08:38 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m50-objects.xml
Total loaded objects: 2575
[7:08:39 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:40 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:41 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:42 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:50 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:54 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:55 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:56 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:57 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:08:59 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:00 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:05 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:07 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:08 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:09 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:10 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:11 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:12 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:14 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:15 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:16 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:17 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:18 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:20 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:21 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 110 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 91 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,339,951 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 6118, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 462
Saving - Total: 462
Saving mutants results file

- Mutation is: 51:AOR:+(int,int):-(int,int):DataStructures.StackAr@pop():105:topOfStack + 1 |==> topOfStack - 1
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m51.dtrace.gz
Loaded invs from previous step: 462
                                                                               [7:09:23 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m51-objects.xml
Total loaded objects: 2556
[7:09:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:26 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:27 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:28 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:29 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:30 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:31 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:34 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:35 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:37 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:38 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:39 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:40 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:41 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:42 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:46 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:47 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:49 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:50 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:51 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:52 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:53 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:54 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:55 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:56 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:57 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:58 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:09:59 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:00 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:01 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:02 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:03 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:04 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:05 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:06 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 114 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 95 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,324,714 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 6118, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 462
Saving - Total: 462
Saving mutants results file

- Mutation is: 52:AOR:+(int,int):/(int,int):DataStructures.StackAr@pop():105:topOfStack + 1 |==> topOfStack / 1
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m52.dtrace.gz
Loaded invs from previous step: 462
                                                                               [7:10:09 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m52-objects.xml
Total loaded objects: 2575
[7:10:10 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:11 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:12 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:13 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:14 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:15 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:16 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:17 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:18 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:19 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:20 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:21 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:22 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:23 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:24 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:25 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:26 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:27 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:28 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:29 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:30 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:31 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:32 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:33 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:34 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:35 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:36 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:37 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:38 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:39 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:40 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:41 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:42 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:43 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:44 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:45 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:46 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:47 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:48 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:49 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:50 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester[7:10:51 PM]: Reading experiments/StackAr_pop/setup-files/mutants/StackArTester
No return from procedure observed 110 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 91 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,339,951 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 6118, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 462
Saving - Total: 462
Saving mutants results file

- Mutation is: 53:LVR:TRUE:FALSE:DataStructures.StackAr@pop():106:true |==> false
Checking invs on mutant: experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m53.dtrace.gz
Loaded invs from previous step: 462
                                                                               [7:10:53 PM]:                                                                  Saving mutants results file

# Filtering step took minutes: 16
# Mutation killing ability results saved in: experiments/StackAr_pop/output/StackAr-pop-specfuzzer-1-invs-by-mutants.csv

# Writing assertions to file: experiments/StackAr_pop/output/StackAr-pop-specfuzzer-1.assertions

# Filtering specs with buckets
> Mutant filter from file: experiments/StackAr_pop/output/StackAr-pop-specfuzzer-1-invs-by-mutants.csv
Unique mutants: 12
Loading assertions from: experiments/StackAr_pop/output/StackAr-pop-specfuzzer-1.assertions
Specs killing mutants: 45

> Minimizing by exploring the bit vector of each spec
Building bit vectors of size: 12
Building buckets
=====================================
Buckets: 12
Vector: [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m1.dtrace.gz
Specs:
	this.theArray != null l:  21  - Fails:  1517 Quality:  1517
Picked:
	this.theArray != null

Vector: [0. 1. 1. 0. 1. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
Specs:
	this.topOfStack == -1 l:  21  - Fails:  3492 Quality:  3492
	this.topOfStack <= daikon.Quant.size(this.theArray)-1 l:  53  - Fails:  871 Quality:  871
	this.topOfStack < daikon.Quant.size(this.theArray) l:  50  - Fails:  669 Quality:  669
Picked:
	this.topOfStack <= daikon.Quant.size(this.theArray)-1
	this.topOfStack < daikon.Quant.size(this.theArray)
	this.topOfStack == -1

Vector: [0. 1. 1. 0. 1. 1. 1. 0. 1. 1. 1. 1.]
Mutants:
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m40.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m41.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m43.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m44.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m45.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack> l:  101  - Fails:  3457 Quality:  3458
	FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack> l:  102  - Fails:  3324 Quality:  3325
	FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  126  - Fails:  278 Quality:  280
	FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack l:  70  - Fails:  278 Quality:  279
	this.topOfStack == -1 || this.topOfStack == 0 || this.topOfStack == 1 l:  69  - Fails:  278 Quality:  278
Picked:
	FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>

Vector: [0. 1. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
Specs:
	\old(this.topOfStack) < daikon.Quant.size(this.theArray)-1 l:  58  - Fails:  8 Quality:  8
	this.topOfStack < daikon.Quant.size(this.theArray)-1 l:  52  - Fails:  4 Quality:  4
Picked:
	this.topOfStack < daikon.Quant.size(this.theArray)-1
	\old(this.topOfStack) < daikon.Quant.size(this.theArray)-1

Vector: [0. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
Mutants:
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m39.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m40.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m41.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m43.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m44.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m45.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
Specs:
	daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.theArray), new String[] { null, null, null, null, null, null, null, null, null, null }) || daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.theArray), new String[] { "java.lang.Long", null, null, null, null, null, null, null, null, null }) l:  300  - Fails:  234 Quality:  234
Picked:
	daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.theArray), new String[] { null, null, null, null, null, null, null, null, null, null }) || daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.theArray), new String[] { "java.lang.Long", null, null, null, null, null, null, null, null, null })

Vector: [0. 0. 1. 0. 0. 1. 1. 0. 1. 1. 1. 1.]
Mutants:
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m40.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m41.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m43.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m44.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m45.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack> l:  102  - Fails:  566 Quality:  567
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>

Vector: [0. 0. 0. 0. 0. 1. 1. 1. 1. 1. 1. 1.]
Mutants:
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m40.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m41.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m43.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m44.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m45.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  115  - Fails:  1186 Quality:  1188
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  115  - Fails:  1168 Quality:  1170
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  115  - Fails:  1168 Quality:  1170
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  115  - Fails:  1168 Quality:  1170
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  142  - Fails:  1168 Quality:  1170
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  111  - Fails:  1168 Quality:  1170
	this.topOfStack < \old(this.topOfStack) l:  39  - Fails:  1168 Quality:  1168
	FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  126  - Fails:  832 Quality:  834
	FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  126  - Fails:  832 Quality:  834
	FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  125  - Fails:  832 Quality:  834
Picked:
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 0. 0. 0. 1. 0. 1. 1. 0. 1. 1.]
Mutants:
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m40.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m43.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m45.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  820 Quality:  822
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  820 Quality:  822
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  820 Quality:  822
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  112  - Fails:  820 Quality:  822
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  820 Quality:  822
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  147  - Fails:  604 Quality:  606
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  604 Quality:  606
Picked:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 0. 0. 0. 1. 1. 0. 1. 1. 1. 1.]
Mutants:
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m40.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m41.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m43.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m44.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m45.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  141  - Fails:  336 Quality:  338
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  147  - Fails:  336 Quality:  338
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  148  - Fails:  180 Quality:  182
	FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  125  - Fails:  156 Quality:  158
	FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  126  - Fails:  156 Quality:  158
Picked:
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 0. 0. 0. 1. 0. 0. 1. 0. 1. 1.]
Mutants:
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m40.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m43.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m45.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  142  - Fails:  216 Quality:  218
	FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  130  - Fails:  120 Quality:  122
Picked:
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 0. 0. 0. 0. 1. 0. 0. 1. 0. 0.]
Mutants:
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m41.dtrace.gz
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m44.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  115  - Fails:  348 Quality:  350
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  348 Quality:  350
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  112  - Fails:  348 Quality:  350
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  348 Quality:  350
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  142  - Fails:  348 Quality:  350
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  348 Quality:  350
Picked:
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_pop/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  130  - Fails:  18 Quality:  20
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  18 Quality:  20
Picked:
	FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>

Buckets: 12
Specs: 15
Saved in file: experiments/StackAr_pop/output/StackAr-pop-specfuzzer-1-buckets.assertions

