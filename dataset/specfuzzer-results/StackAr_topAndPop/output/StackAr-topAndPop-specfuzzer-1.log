> SpecFuzzer
# Inference step (Daikon + Fuzzed Specs)
Daikon version 5.8.2, released May 4, 2020; http://plse.cs.washington.edu/daikon.

Loading invariants from file: invs_file.xml
Loaded: 0

Fuzzing specs:
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * -1
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 > 0)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: (Integer_Variable_0 < -1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= -1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = 0
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 1
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 != 0)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 > -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 1
Fuzzed spec: (Integer_Variable_0 > 1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 < 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 <= 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 != 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= 0)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0)
Fuzzed spec: (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 1
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 = -1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 0
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= 1)
Fuzzed spec: (Integer_Variable_0 = 0) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1)
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = 1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 < -1)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / -1
Fuzzed spec: (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 > 0)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = 0) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 0
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 0
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != -1) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 1
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 > 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 > -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 > 1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 <= -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1)
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != 0) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 <= 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 < 0)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 0
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = 0) xor (Integer_Variable_1 < 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 1) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= 0) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 < 1)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 >= -1)
Fuzzed spec: (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != -1
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / -1
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / -1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 1) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 1) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < 0) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 1
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 != 0)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < -1)
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 <= 0)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 0) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: (Integer_Variable_0 > 0) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 >= 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = 1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 <= -1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 = -1)
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= -1) iff (Integer_Variable_1 > 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 = 0
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 >= 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 >= 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 < -1)
Fuzzed spec: (Integer_Variable_0 > 0) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= 1)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 <= -1)
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 > 1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 0) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 0) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = 1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != -1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 = #(StackAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > -1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 <= -1)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = -1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 >= -1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 != -1)
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = 1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 0) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 = 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) or (Integer_Variable_1 <= 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 < 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - -1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1)
Fuzzed spec: (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 0
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + -1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= 0)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 0) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Unique fuzzed invariants: 455 (2000)
Unary: 24 - Binary: 152 - Ternary: 279 - Discarded: 43
Reading declaration files Processing trace data; reading 1 dtrace file:
Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/StackArTesterDriver-objects.xml
Total loaded objects: 3542

No return from procedure observed 53 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 38 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
DataStructures.Overflow:::OBJECT
===========================================================================
DataStructures.Overflow.Overflow():::EXIT
===========================================================================
DataStructures.StackAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.topOfStack
this.topOfStack >= -1
this.topOfStack <= size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.StackAr(int):::ENTER
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: capacity
capacity >= 0
===========================================================================
DataStructures.StackAr.StackAr(int):::EXIT
orig(capacity) == size(this.theArray[])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.isEmpty():::ENTER
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(this.topOfStack == -1)  <==>  (return == true)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack one of { 0, 1 })  <==>  (return == false)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(this.topOfStack one of { 0, 1 })  ==>  (orig(this.theArray[post(this.topOfStack)]) != null)
(this.topOfStack one of { 0, 1 })  ==>  (orig(this.theArray[this.topOfStack]) != null)
(this.topOfStack one of { 0, 1 })  ==>  (this.theArray[orig(this.topOfStack)] != null)
(this.topOfStack one of { 0, 1 })  ==>  (this.theArray[this.topOfStack] != null)
(this.topOfStack one of { 0, 1 })  ==>  (this.topOfStack < size(this.theArray[])-1)
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="return == true"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == true
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="not(return == true)"
this.topOfStack one of { 0, 1 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack
return == false
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
this.theArray[this.topOfStack] != null
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.isFull():::ENTER
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(return == false)  <==>  (this.topOfStack < size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(return == false)  ==>  (this.topOfStack one of { -1, 0, 1 })
(return == true)  <==>  (this.topOfStack == size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), size(this.theArray[])-1>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), size(this.theArray[])-1>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), size(this.theArray[])-1>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n != null ) holds for: orig(this))
(return == true)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this))
(return == true)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this))
(return == true)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n = null ) holds for: orig(this))
(return == true)  ==>  (this.theArray[] == [])
(return == true)  ==>  (this.theArray[].getClass().getName() == [])
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="return == true"
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray[] == []
this.theArray[].getClass().getName() == []
return == true
FuzzedInvariant ( all n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n = null ) holds for: orig(this)
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="not(return == true)"
return == false
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.makeEmpty():::ENTER
this.topOfStack one of { -1, 0 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack <= orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.pop():::ENTER
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: this
this.topOfStack one of { 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
this.theArray[this.topOfStack] != null
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.pop():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
this.topOfStack one of { -1, 0 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
this.theArray[orig(this.topOfStack)] == null
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack < orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
this.theArray[orig(this.topOfStack)] in orig(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
this.theArray.getClass().getName() != x.getClass().getName()
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
size(this.theArray[]) == orig(size(this.theArray[]))
this.topOfStack one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
orig(this.theArray[post(this.topOfStack)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(this.theArray[post(this.topOfStack)]) in this.theArray[]
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack > orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.top():::ENTER
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.top():::EXIT76
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
this.theArray[] elements == return
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.top():::EXIT77
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
this.topOfStack one of { 0, 1 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack
return != null
FuzzedInvariant ( some n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.top():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(this.topOfStack == -1)  <==>  (return == null)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this))
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this))
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == return)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack one of { 0, 1 })  <==>  (return != null)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n != null ) holds for: orig(this))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(this.topOfStack one of { 0, 1 })  ==>  (orig(this.theArray[post(this.topOfStack)]) != null)
(this.topOfStack one of { 0, 1 })  ==>  (orig(this.theArray[this.topOfStack]) != null)
(this.topOfStack one of { 0, 1 })  ==>  (return == orig(this.theArray[post(this.topOfStack)]))
(this.topOfStack one of { 0, 1 })  ==>  (return == orig(this.theArray[this.topOfStack]))
(this.topOfStack one of { 0, 1 })  ==>  (return == this.theArray[orig(this.topOfStack)])
(this.topOfStack one of { 0, 1 })  ==>  (return == this.theArray[this.topOfStack])
(this.topOfStack one of { 0, 1 })  ==>  (return.getClass().getName() in this.theArray[].getClass().getName())
(this.topOfStack one of { 0, 1 })  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(this.topOfStack one of { 0, 1 })  ==>  (this.theArray[orig(this.topOfStack)] != null)
(this.topOfStack one of { 0, 1 })  ==>  (this.theArray[this.topOfStack] != null)
(this.topOfStack one of { 0, 1 })  ==>  (this.topOfStack < size(this.theArray[])-1)
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT110
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
this.theArray[] elements == return
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT116
return == orig(this.theArray[this.topOfStack])
return != null
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
orig(this.topOfStack) one of { 0, 1 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.topOfStack)
size(this.theArray[]) one of { 4, 35, 97 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
this.theArray[orig(this.topOfStack)] == null
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack < orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
this.theArray[orig(this.topOfStack)] in orig(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
(return != null)  <==>  (orig(this.topOfStack) one of { 0, 1 })
(return != null)  <==>  (this.topOfStack < orig(this.topOfStack))
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.topOfStack))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.topOfStack))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[]))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.topOfStack))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(return != null)  ==>  (orig(this.theArray[this.topOfStack]) != null)
(return != null)  ==>  (orig(this.topOfStack) < size(this.theArray[])-1)
(return != null)  ==>  (return == orig(this.theArray[this.topOfStack]))
(return != null)  ==>  (return.getClass().getName() in orig(this.theArray[].getClass().getName()))
(return != null)  ==>  (size(this.theArray[]) one of { 4, 35, 97 })
(return != null)  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(return != null)  ==>  (this.theArray[orig(this.topOfStack)] == null)
(return != null)  ==>  (this.theArray[orig(this.topOfStack)] in orig(this.theArray[]))
(return != null)  ==>  (this.topOfStack < size(this.theArray[])-1)
(return != null)  ==>  (this.topOfStack one of { -1, 0 })
(return == null)  <==>  (orig(this.topOfStack) == -1)
(return == null)  <==>  (this.topOfStack == orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), orig(this.topOfStack)>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), orig(this.topOfStack)>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), orig(this.topOfStack)>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(return == null)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this))
(return == null)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this))
(return == null)  ==>  (orig(this.theArray[]) elements == null)
(return == null)  ==>  (orig(this.theArray[]) elements == return)
(return == null)  ==>  (orig(this.theArray[].getClass().getName()) elements == null)
(return == null)  ==>  (this.theArray[] == orig(this.theArray[]))
(return == null)  ==>  (this.theArray[] elements == null)
(return == null)  ==>  (this.theArray[] elements == return)
(return == null)  ==>  (this.theArray[].getClass().getName() elements == null)
(return == null)  ==>  (this.topOfStack == -1)
this.topOfStack one of { -1, 0 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
this.topOfStack <= orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
return.getClass().getName() in orig(this.theArray[].getClass().getName())
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.Underflow:::OBJECT
===========================================================================
DataStructures.Underflow.Underflow():::EXIT
Exiting Daikon.

# Filtering step

- Mutation is: 1:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@<init>(int):33:theArray = new Object[capacity] |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m1.dtrace.gz
Loaded invs from previous step: 0
                                                                               [7:51:56 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m1-objects.xml
Total loaded objects: 804
[7:51:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:51:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:51:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 271 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 9 invocations
  DataStructures.StackAr.makeEmpty() : 127 invocations
  DataStructures.StackAr.isFull() : 88 invocations
  DataStructures.StackAr.push(java.lang.Object) : 47 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 2,553 errors found in 158,060 samples (1.62%)
StackArTesterDriver.inv.gz: 217 false positives, out of 646, which is 33.59%.
Preserving 107 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 107
Saving mutants results file

- Mutation is: 2:LVR:NEG:0:DataStructures.StackAr@<init>(int):34:-1 |==> 0
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
Loaded invs from previous step: 107
                                                                               [7:52:05 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m2-objects.xml
Total loaded objects: 3552
[7:52:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:52:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 46 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 26 invocations
  DataStructures.StackAr.push(java.lang.Object) : 2 invocations
  DataStructures.StackAr.top() : 3 invocations
  DataStructures.StackAr.makeEmpty() : 4 invocations
  DataStructures.StackAr.topAndPop() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 41,248 errors found in 2,272,347 samples (1.82%)
StackArTesterDriver.inv.gz: 1309 false positives, out of 7736, which is 16.92%.
                                                                               Preserving 416 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 107
Saving - Total: 474
Saving mutants results file

- Mutation is: 3:LVR:NEG:POS:DataStructures.StackAr@<init>(int):34:-1 |==> 1
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
Loaded invs from previous step: 474
                                                                               [7:53:30 PM]: Checking size of experiments/StackAr_topAndPop/setup-files/mutantLoaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m3-objects.xml
Total loaded objects: 3521
[7:53:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:53:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 51 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 25 invocations
  DataStructures.StackAr.top() : 7 invocations
  DataStructures.StackAr.push(java.lang.Object) : 3 invocations
  DataStructures.StackAr.makeEmpty() : 5 invocations
  DataStructures.StackAr.topAndPop() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 71,647 errors found in 2,275,228 samples (3.15%)
StackArTesterDriver.inv.gz: 1138 false positives, out of 7738, which is 14.71%.
Preserving 402 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 474
Saving - Total: 526
Saving mutants results file

- Mutation is: 4:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@<init>(int):34:topOfStack = -1 |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
Loaded invs from previous step: 526
                                                                               [7:54:54 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m4-objects.xml
Total loaded objects: 3552
[7:54:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:54:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:55:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 46 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 26 invocations
  DataStructures.StackAr.push(java.lang.Object) : 2 invocations
  DataStructures.StackAr.top() : 3 invocations
  DataStructures.StackAr.makeEmpty() : 4 invocations
  DataStructures.StackAr.topAndPop() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 41,245 errors found in 2,272,347 samples (1.82%)
StackArTesterDriver.inv.gz: 1309 false positives, out of 7736, which is 16.92%.
Preserving 416 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 526
Saving - Total: 526
Saving mutants results file

- Mutation is: 41:COR:isEmpty():TRUE:DataStructures.StackAr@topAndPop():109:isEmpty() |==> false
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m41.dtrace.gz
Loaded invs from previous step: 526
                                                                               [7:56:18 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m41-objects.xml
Total loaded objects: 3080
[7:56:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:56:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 129 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 27 invocations
  DataStructures.StackAr.topAndPop() : 89 invocations
  DataStructures.StackAr.push(java.lang.Object) : 3 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 7 errors found in 1,807,185 samples (0.00%)
StackArTesterDriver.inv.gz: 7 false positives, out of 7536, which is 0.09%.
Preserving 4 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 526
Saving - Total: 527
Saving mutants results file

- Mutation is: 42:COR:isEmpty():FALSE:DataStructures.StackAr@topAndPop():109:isEmpty() |==> true
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
Loaded invs from previous step: 527
                                                                               [7:57:29 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m42-objects.xml
Total loaded objects: 3416
[7:57:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:57:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 46 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 31 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 6,847 errors found in 1,958,878 samples (0.35%)
StackArTesterDriver.inv.gz: 337 false positives, out of 6937, which is 4.86%.
Preserving 146 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 527
Saving - Total: 547
Saving mutants results file

- Mutation is: 43:STD:<RETURN>:<NO-OP>:DataStructures.StackAr@topAndPop():110:return null; |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m43.dtrace.gz
Loaded invs from previous step: 547
                                                                               [7:58:44 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m43-objects.xml
Total loaded objects: 3080
[7:58:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:58:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 129 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 27 invocations
  DataStructures.StackAr.topAndPop() : 89 invocations
  DataStructures.StackAr.push(java.lang.Object) : 3 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 7 errors found in 1,869,524 samples (0.00%)
StackArTesterDriver.inv.gz: 7 false positives, out of 7536, which is 0.09%.
Preserving 4 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 547
Saving - Total: 547
Saving mutants results file

- Mutation is: 44:EVR:<METHOD_INVOCATION(java.lang.Object)>:<DEFAULT>:DataStructures.StackAr@topAndPop():111:top() |==> null
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m44.dtrace.gz
Loaded invs from previous step: 547
                                                                               [7:59:56 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m44-objects.xml
Total loaded objects: 3483
[7:59:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[7:59:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:00:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 53 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 38 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 252 errors found in 2,094,380 samples (0.01%)
StackArTesterDriver.inv.gz: 2 false positives, out of 7729, which is 0.03%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 547
Saving - Total: 547
Saving mutants results file

- Mutation is: 45:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@topAndPop():113:theArray[topOfStack] = null |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m45.dtrace.gz
Loaded invs from previous step: 547
                                                                               [8:01:14 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m45-objects.xml
Total loaded objects: 3542
[8:01:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:01:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 53 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 38 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 362 errors found in 2,197,206 samples (0.02%)
StackArTesterDriver.inv.gz: 29 false positives, out of 7735, which is 0.37%.
Preserving 2 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 547
Saving - Total: 547
Saving mutants results file

- Mutation is: 46:LVR:POS:0:DataStructures.StackAr@topAndPop():114:1 |==> 0
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
Loaded invs from previous step: 547
                                                                               [8:02:36 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m46-objects.xml
Total loaded objects: 3533
[8:02:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:02:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:03:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 46 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 31 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 12,964 errors found in 2,216,644 samples (0.58%)
StackArTesterDriver.inv.gz: 460 false positives, out of 7735, which is 5.95%.
Preserving 225 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 547
Saving - Total: 617
Saving mutants results file

- Mutation is: 47:LVR:POS:NEG:DataStructures.StackAr@topAndPop():114:1 |==> -1
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
Loaded invs from previous step: 617
                                                                               [8:03:58 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m47-objects.xml
Total loaded objects: 3533
[8:03:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:04:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 49 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 31 invocations
  DataStructures.StackAr.push(java.lang.Object) : 7 invocations
  DataStructures.StackAr.makeEmpty() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 31,533 errors found in 2,212,278 samples (1.43%)
StackArTesterDriver.inv.gz: 1026 false positives, out of 7735, which is 13.26%.
Preserving 333 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 617
Saving - Total: 659
Saving mutants results file

- Mutation is: 48:AOR:-(int,int):%(int,int):DataStructures.StackAr@topAndPop():114:topOfStack - 1 |==> topOfStack % 1
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m48.dtrace.gz
Loaded invs from previous step: 659
                                                                               [8:05:19 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m48-objects.xml
Total loaded objects: 3533
[8:05:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:05:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 47 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 32 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 11,197 errors found in 2,215,045 samples (0.51%)
StackArTesterDriver.inv.gz: 214 false positives, out of 7735, which is 2.77%.
Preserving 137 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 659
Saving - Total: 659
Saving mutants results file

- Mutation is: 49:AOR:-(int,int):*(int,int):DataStructures.StackAr@topAndPop():114:topOfStack - 1 |==> topOfStack StackArTesterDriver.inv.gz base-invs-by-mutants.csv base_invs_file.xml experiments hs_err_pid1983241.log hs_err_pid51463.log hs_err_pid53479.log invs-by-mutants.csv invs.csv invs_file.xml lib literals mutants scripts testers 1
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
Loaded invs from previous step: 659
                                                                               [8:06:42 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m49-objects.xml
Total loaded objects: 3533
[8:06:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:06:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:07:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 46 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 31 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 12,964 errors found in 2,216,644 samples (0.58%)
StackArTesterDriver.inv.gz: 460 false positives, out of 7735, which is 5.95%.
Preserving 225 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 659
Saving - Total: 659
Saving mutants results file

- Mutation is: 50:AOR:-(int,int):+(int,int):DataStructures.StackAr@topAndPop():114:topOfStack - 1 |==> topOfStack + 1
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
Loaded invs from previous step: 659
                                                                               [8:08:05 PM]: Checking size of experiments/StackAr_topAndPop/setup-files/mutantLoaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m50-objects.xml
Total loaded objects: 3533
[8:08:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:08:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 49 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 31 invocations
  DataStructures.StackAr.push(java.lang.Object) : 7 invocations
  DataStructures.StackAr.makeEmpty() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 31,533 errors found in 2,212,278 samples (1.43%)
StackArTesterDriver.inv.gz: 1026 false positives, out of 7735, which is 13.26%.
Preserving 333 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 659
Saving - Total: 659
Saving mutants results file

- Mutation is: 51:AOR:-(int,int):/(int,int):DataStructures.StackAr@topAndPop():114:topOfStack - 1 |==> topOfStack / 1
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m51.dtrace.gz
Loaded invs from previous step: 659
                                                                               [8:09:25 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m51-objects.xml
Total loaded objects: 3533
[8:09:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:09:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:42 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 46 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 31 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 12,964 errors found in 2,216,644 samples (0.58%)
StackArTesterDriver.inv.gz: 460 false positives, out of 7735, which is 5.95%.
Preserving 225 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 659
Saving - Total: 659
Saving mutants results file

- Mutation is: 52:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@topAndPop():114:topOfStack = topOfStack - 1 |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m52.dtrace.gz
Loaded invs from previous step: 659
                                                                               [8:10:47 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m52-objects.xml
Total loaded objects: 3533
[8:10:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:10:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:14 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:35 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:36 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:37 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:38 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:40 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:41 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:45 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:46 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:47 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:51 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:56 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:11:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:01 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:07 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 46 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 31 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 12,964 errors found in 2,216,644 samples (0.58%)
StackArTesterDriver.inv.gz: 460 false positives, out of 7735, which is 5.95%.
Preserving 225 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 659
Saving - Total: 659
Saving mutants results file

- Mutation is: 53:LVR:TRUE:FALSE:DataStructures.StackAr@topAndPop():115:true |==> false
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m53.dtrace.gz
Loaded invs from previous step: 659
                                                                               [8:12:13 PM]:                                                                  Saving mutants results file

- Mutation is: 54:EVR:<IDENTIFIER(java.lang.Object)>:<DEFAULT>:DataStructures.StackAr@topAndPop():116:result |==> null
Checking invs on mutant: experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m54.dtrace.gz
Loaded invs from previous step: 659
                                                                               [8:12:15 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m54-objects.xml
Total loaded objects: 3542
[8:12:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:34 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:39 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:43 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:44 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:48 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:49 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:50 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:52 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:53 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:54 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:55 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:57 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:58 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:12:59 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:00 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:02 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:03 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:04 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:05 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:06 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:08 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:09 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:10 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:11 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:12 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:13 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:15 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:16 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:17 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:18 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:19 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:20 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:21 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:22 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:23 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:24 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:25 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:26 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:27 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:28 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:29 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:30 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:31 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:32 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr[8:13:33 PM]: Reading experiments/StackAr_topAndPop/setup-files/mutants/StackAr
No return from procedure observed 53 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 38 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 252 errors found in 2,196,440 samples (0.01%)
StackArTesterDriver.inv.gz: 2 false positives, out of 7729, which is 0.03%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 659
Saving - Total: 659
Saving mutants results file

# Filtering step took minutes: 21
# Mutation killing ability results saved in: experiments/StackAr_topAndPop/output/StackAr-topAndPop-specfuzzer-1-invs-by-mutants.csv

# Writing assertions to file: experiments/StackAr_topAndPop/output/StackAr-topAndPop-specfuzzer-1.assertions

# Filtering specs with buckets
> Mutant filter from file: experiments/StackAr_topAndPop/output/StackAr-topAndPop-specfuzzer-1-invs-by-mutants.csv
Unique mutants: 18
Loading assertions from: experiments/StackAr_topAndPop/output/StackAr-topAndPop-specfuzzer-1.assertions
Specs killing mutants: 78

> Minimizing by exploring the bit vector of each spec
Building bit vectors of size: 18
Building buckets
=====================================
Buckets: 21
Vector: [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m1.dtrace.gz
Specs:
	this.theArray != null l:  21  - Fails:  1117 Quality:  1117
Picked:
	this.theArray != null

Vector: [0. 1. 1. 1. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack l:  71  - Fails:  2561 Quality:  2562
	FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack l:  70  - Fails:  2561 Quality:  2562
	FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack l:  69  - Fails:  2561 Quality:  2562
	this.topOfStack == -1 l:  21  - Fails:  2561 Quality:  2561
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack

Vector: [0. 1. 0. 1. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack l:  70  - Fails:  1739 Quality:  1740
Picked:
	FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack

Vector: [0. 1. 1. 1. 0. 0. 0. 0. 0. 1. 1. 1. 1. 1. 1. 1. 1. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m48.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m51.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m52.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m53.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  144  - Fails:  1167 Quality:  1169
	\old(daikon.Quant.getElement_Object(this.theArray, this.topOfStack)) != null l:  76  - Fails:  186 Quality:  186
Picked:
	\old(daikon.Quant.getElement_Object(this.theArray, this.topOfStack)) != null
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 1. 1. 1. 0. 0. 0. 1. 0. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m44.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m48.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m51.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m52.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m53.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m54.dtrace.gz
Specs:
	\result != null l:  15  - Fails:  893 Quality:  893
Picked:
	\result != null

Vector: [0. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
Specs:
	daikon.Quant.size(this.theArray) == 4 || daikon.Quant.size(this.theArray) == 35 || daikon.Quant.size(this.theArray) == 97 l:  121  - Fails:  31 Quality:  31
Picked:
	daikon.Quant.size(this.theArray) == 4 || daikon.Quant.size(this.theArray) == 35 || daikon.Quant.size(this.theArray) == 97

Vector: [0. 1. 1. 1. 0. 1. 0. 0. 0. 1. 1. 0. 1. 1. 1. 1. 1. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m51.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m52.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m53.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack> l:  101  - Fails:  3123 Quality:  3124
	FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack> l:  102  - Fails:  3115 Quality:  3116
	this.topOfStack < daikon.Quant.size(this.theArray)-1 l:  52  - Fails:  103 Quality:  103
Picked:
	this.topOfStack < daikon.Quant.size(this.theArray)-1
	FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>

Vector: [0. 1. 1. 1. 0. 0. 0. 0. 0. 0. 1. 0. 0. 1. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
Specs:
	this.topOfStack <= daikon.Quant.size(this.theArray)-1 l:  53  - Fails:  212 Quality:  212
	this.topOfStack < daikon.Quant.size(this.theArray) l:  50  - Fails:  104 Quality:  104
	\old(this.topOfStack) < daikon.Quant.size(this.theArray)-1 l:  58  - Fails:  31 Quality:  31
Picked:
	\old(this.topOfStack) < daikon.Quant.size(this.theArray)-1
	this.topOfStack < daikon.Quant.size(this.theArray)
	this.topOfStack <= daikon.Quant.size(this.theArray)-1

Vector: [0. 1. 1. 1. 0. 1. 0. 0. 0. 1. 1. 1. 1. 1. 1. 1. 1. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m48.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m51.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m52.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m53.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack l:  70  - Fails:  2118 Quality:  2119
	FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack l:  69  - Fails:  2118 Quality:  2119
	FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack l:  70  - Fails:  1949 Quality:  1950
	FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack l:  70  - Fails:  1810 Quality:  1811
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  1545 Quality:  1547
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  142  - Fails:  1043 Quality:  1045
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  966 Quality:  968
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  966 Quality:  968
	FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: orig(this.topOfStack) l:  76  - Fails:  964 Quality:  965
	FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: orig(this.topOfStack) l:  75  - Fails:  964 Quality:  965
	FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(this.topOfStack) l:  76  - Fails:  830 Quality:  831
	FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  127  - Fails:  422 Quality:  424
	FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  126  - Fails:  422 Quality:  424
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  148  - Fails:  412 Quality:  414
	FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  131  - Fails:  288 Quality:  290
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack

Vector: [0. 1. 1. 1. 0. 0. 0. 0. 0. 1. 1. 0. 1. 1. 1. 1. 1. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m51.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m52.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m53.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  128  - Fails:  468 Quality:  470
	FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  127  - Fails:  468 Quality:  470
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  468 Quality:  470
	FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  127  - Fails:  468 Quality:  470
Picked:
	FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 1. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack> l:  102  - Fails:  98 Quality:  99
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>

Vector: [0. 0. 1. 0. 0. 1. 0. 0. 0. 1. 1. 0. 1. 1. 1. 1. 1. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m51.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m52.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m53.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  126  - Fails:  134 Quality:  136
Picked:
	FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 1. 0. 0. 1. 0. 0. 0. 1. 1. 1. 1. 1. 1. 1. 1. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m48.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m51.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m52.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m53.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  130  - Fails:  136 Quality:  138
Picked:
	FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 1. 0. 0. 0. 0. 0. 0. 1. 1. 0. 1. 1. 1. 1. 1. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m51.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m52.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m53.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  127  - Fails:  54 Quality:  56
	FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  129  - Fails:  54 Quality:  56
	FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  126  - Fails:  54 Quality:  56
Picked:
	FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 0. 0. 0. 1. 0. 0. 1. 0. 0. 1. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m45.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m48.dtrace.gz
Specs:
	FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this) l:  77  - Fails:  169 Quality:  169
	FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this) l:  77  - Fails:  169 Quality:  169
	daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null) l:  67  - Fails:  158 Quality:  158
Picked:
	daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
	FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)

Vector: [0. 0. 0. 0. 0. 1. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m45.dtrace.gz
Specs:
	daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.theArray, \new(this.topOfStack))) , this.theArray ) l:  114  - Fails:  174 Quality:  174
	daikon.Quant.eltsEqual(this.theArray, \result) l:  46  - Fails:  144 Quality:  144
Picked:
	daikon.Quant.eltsEqual(this.theArray, \result)
	daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.theArray, \new(this.topOfStack))) , this.theArray )

Vector: [0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
Specs:
	FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this) l:  78  - Fails:  4 Quality:  4
Picked:
	FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)

Vector: [0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m44.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m54.dtrace.gz
Specs:
	\result == \old(daikon.Quant.getElement_Object(this.theArray, this.topOfStack)) l:  79  - Fails:  252 Quality:  252
Picked:
	\result == \old(daikon.Quant.getElement_Object(this.theArray, this.topOfStack))

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 1. 1. 1. 1. 1. 1. 1. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m48.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m51.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m52.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m53.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  1039 Quality:  1041
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  115  - Fails:  1039 Quality:  1041
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  143  - Fails:  1037 Quality:  1039
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  144  - Fails:  1037 Quality:  1039
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  1037 Quality:  1039
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  1037 Quality:  1039
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  115  - Fails:  1037 Quality:  1039
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  111  - Fails:  1037 Quality:  1039
	this.topOfStack < \old(this.topOfStack) l:  39  - Fails:  1037 Quality:  1037
	FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  127  - Fails:  943 Quality:  945
	FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  127  - Fails:  943 Quality:  945
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  147  - Fails:  943 Quality:  945
Picked:
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 1. 1. 0. 1. 1. 1. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m48.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m51.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m52.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m53.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  775 Quality:  777
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  143  - Fails:  775 Quality:  777
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  145  - Fails:  775 Quality:  777
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  146  - Fails:  775 Quality:  777
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  775 Quality:  777
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  142  - Fails:  775 Quality:  777
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  112  - Fails:  775 Quality:  777
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  775 Quality:  777
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  775 Quality:  777
Picked:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 1. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
	experiments/StackAr_topAndPop/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  262 Quality:  264
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  112  - Fails:  262 Quality:  264
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  262 Quality:  264
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  262 Quality:  264
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  144  - Fails:  262 Quality:  264
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  262 Quality:  264
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  262 Quality:  264
	this.topOfStack <= \old(this.topOfStack) l:  40  - Fails:  262 Quality:  262
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  146  - Fails:  254 Quality:  256
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>

daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.theArray, \new(this.topOfStack))) , this.theArray )
Buckets: 21
Specs: 26
Saved in file: experiments/StackAr_topAndPop/output/StackAr-topAndPop-specfuzzer-1-buckets.assertions

