buckets=21
specs=26
=====================================
:::OBJECT
this.theArray != null
this.topOfStack <= daikon.Quant.size(this.theArray)-1
=====================================
:::POSTCONDITION
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
\old(this.topOfStack) < daikon.Quant.size(this.theArray)-1
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
daikon.Quant.size(this.theArray) == 4 || daikon.Quant.size(this.theArray) == 35 || daikon.Quant.size(this.theArray) == 97
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
\result != null
FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack
\old(daikon.Quant.getElement_Object(this.theArray, this.topOfStack)) != null
this.topOfStack < daikon.Quant.size(this.theArray)
daikon.Quant.eltsEqual(this.theArray, \result)
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
this.topOfStack < daikon.Quant.size(this.theArray)-1
\result == \old(daikon.Quant.getElement_Object(this.theArray, this.topOfStack))
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
