> SpecFuzzer
# Inference step (Daikon + Fuzzed Specs)
Daikon version 5.8.2, released May 4, 2020; http://plse.cs.washington.edu/daikon.

Loading invariants from file: invs_file.xml
Loaded: 0

Fuzzing specs:
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1)
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1)
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 0
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0)
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 < 1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 0) xor (Integer_Variable_1 > 1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 > 0)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 != 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != 1)
Fuzzed spec: (Integer_Variable_0 != -1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 != -1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 1
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != -1)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < 0) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 >= 0)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 >= 0)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > 1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 1
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1)
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 0
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < 0)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 >= 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = 0)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 0) xor (Integer_Variable_1 < 1)
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / -1
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 >= -1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 <= -1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1)
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 = 0)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 0
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1)
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1)
Fuzzed spec: (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 >= 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 1) iff (Integer_Variable_1 != 0)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 = -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 >= -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= -1) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 >= 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != -1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 > 1)
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 >= 1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 != -1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= -1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * -1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 0
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 > 0)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1)
Fuzzed spec: (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) xor (Integer_Variable_1 >= 1)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 > -1)
Fuzzed spec: (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) iff (Integer_Variable_1 = 1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 < -1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = 1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: (Integer_Variable_0 < 1) xor (Integer_Variable_1 = 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = 1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != 0) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= 1)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 != 1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0)
Fuzzed spec: (Integer_Variable_0 != 0) xor (Integer_Variable_1 = 0)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= -1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) iff (Integer_Variable_1 <= 1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 >= -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > -1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) xor (Integer_Variable_1 < 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 0) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1)
Fuzzed spec: (Integer_Variable_0 < -1) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 0
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 >= 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * -1
Fuzzed spec: (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) implies (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 1)
Fuzzed spec: (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) iff (Integer_Variable_1 = 1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 > 0)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % -1
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 > -1)
Fuzzed spec: (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) iff (Integer_Variable_1 = 1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 <= 0)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Unique fuzzed invariants: 447 (2000)
Unary: 24 - Binary: 157 - Ternary: 266 - Discarded: 38
Reading declaration files Processing trace data; reading 1 dtrace file:
Loaded objects from file: /specfuzzer/experiments/QueueAr_dequeueAll/setup-files/QueueArTesterDriver-objects.xml
Total loaded objects: 2860

No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
DataStructures.Overflow:::OBJECT
===========================================================================
DataStructures.Overflow.Overflow():::EXIT
===========================================================================
DataStructures.QueueAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.currentSize
this.currentSize >= 0
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.front
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.front
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.front
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.front
this.front >= 0
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.back
this.back >= -1
this.currentSize <= size(this.theArray[])
this.front <= size(this.theArray[])
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.QueueAr(int):::ENTER
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: capacity
capacity >= 0
===========================================================================
DataStructures.QueueAr.QueueAr(int):::EXIT
this.currentSize == this.front
this.back == size(this.theArray[])-1
orig(capacity) == size(this.theArray[])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(capacity)>
this.currentSize <= orig(capacity)
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT86
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.front one of { 0, 1, 2 }
return == null
FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
this.currentSize <= this.front
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
this.back one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this)
orig(this.currentSize) one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(this.currentSize)
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: orig(this.currentSize)
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: orig(this.currentSize)
size(this.theArray[]) one of { 1, 4, 35 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
this.theArray[orig(this.front)] == null
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
this.currentSize <= this.back
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize < orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
this.currentSize <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.back, orig(this.front)>
this.back >= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
orig(this.front) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>
this.currentSize - this.back + orig(this.front) == 0
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
this.back - orig(this.currentSize) - orig(this.front) + 1 == 0
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
(orig(this.currentSize) == 0)  <==>  (this.currentSize == orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.currentSize)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.currentSize)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), orig(this.currentSize)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.currentSize)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.currentSize)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: this.currentSize)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this))
(orig(this.currentSize) == 0)  ==>  (orig(this.currentSize) <= orig(this.front))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[]) elements == null)
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[].getClass().getName()) elements == null)
(orig(this.currentSize) == 0)  ==>  (return == null)
(orig(this.currentSize) == 0)  ==>  (this.currentSize <= orig(this.front))
(orig(this.currentSize) == 0)  ==>  (this.currentSize <= this.front)
(orig(this.currentSize) == 0)  ==>  (this.currentSize == 0)
(orig(this.currentSize) == 0)  ==>  (this.front == orig(this.front))
(orig(this.currentSize) == 0)  ==>  (this.front >= orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (this.front one of { 0, 1, 2 })
(orig(this.currentSize) == 0)  ==>  (this.theArray[] == orig(this.theArray[]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[] elements == null)
(orig(this.currentSize) == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(orig(this.currentSize) one of { 1, 2, 3 })  <==>  (this.currentSize < orig(this.currentSize))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(this.currentSize))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: orig(this.currentSize))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: orig(this.currentSize))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (orig(this.front) <= size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1]))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (return.getClass().getName() in orig(this.theArray[].getClass().getName()))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (size(this.theArray[]) one of { 1, 4, 35 })
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.back - orig(this.currentSize) - orig(this.front) + 1 == 0)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.back >= orig(this.front))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.back one of { 0, 1, 2 })
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.currentSize - this.back + orig(this.front) == 0)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.currentSize <= size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.currentSize <= this.back)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.currentSize one of { 0, 1, 2 })
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.front <= size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.theArray[orig(this.front)] == null)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1])
this.currentSize one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
this.currentSize <= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.back>
this.front >= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
return.getClass().getName() in orig(this.theArray[].getClass().getName())
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
orig(this.currentSize) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.front), size(this.theArray[])>
orig(this.front) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
this.currentSize <= this.front
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize <= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
this.currentSize <= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.front), this.front>
this.front >= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
orig(this.currentSize) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.front), size(this.theArray[])>
orig(this.front) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER
this.currentSize one of { 0, 1, 2 }
this.front one of { 0, 1, 2 }
this.back >= 0
this.theArray[this.currentSize] == null
this.theArray.getClass().getName() != x.getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
this.currentSize <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.back>
this.front <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
orig(this.theArray[post(this.back)]) == orig(this.theArray[this.currentSize])
this.currentSize one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize
this.front one of { 0, 1, 2 }
this.back one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.back)
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.back)
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.back)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>
this.front % this.currentSize == 0
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize > orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.back>
this.front <= this.back
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= size(this.theArray[])-1
this.back >= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
orig(this.currentSize) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.back), size(this.theArray[])-1>
orig(this.back) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
this.currentSize + this.front - this.back - 1 == 0
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
this.front - this.back + orig(this.currentSize) == 0
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.getFront():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <this, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
===========================================================================
DataStructures.QueueAr.getFront():::EXIT75
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
return == null
FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this)
this.theArray[] elements == return
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
this.currentSize <= this.front
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
===========================================================================
DataStructures.QueueAr.getFront():::EXIT76
return == this.theArray[this.front]
return == this.theArray[orig(this.front)]
return == orig(this.theArray[post(this.front)])
return == orig(this.theArray[this.front])
this.theArray[this.currentSize-1] == this.theArray[this.back]
this.theArray[this.back] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.back] == orig(this.theArray[post(this.currentSize)-1])
this.theArray[this.back] == orig(this.theArray[this.currentSize-1])
this.currentSize one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize
this.front one of { 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.front
this.back one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this)
size(this.theArray[]) one of { 4, 35, 100 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
this.theArray[this.currentSize] == null
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>
this.currentSize >= this.front
this.front % this.currentSize == 0
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.back>
this.currentSize >= this.back
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
this.currentSize <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>
this.front <= this.back
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
this.front < size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])-1>
this.back < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.getFront():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this))
(this.currentSize == 0)  ==>  (FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this))
(this.currentSize == 0)  ==>  (return == null)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.front one of { 0, 1, 2 })
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[] elements == return)
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.front)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this))
(this.currentSize one of { 1, 2, 3 })  ==>  (orig(this.theArray[post(this.currentSize)]) == null)
(this.currentSize one of { 1, 2, 3 })  ==>  (orig(this.theArray[this.currentSize]) == null)
(this.currentSize one of { 1, 2, 3 })  ==>  (return == orig(this.theArray[post(this.front)]))
(this.currentSize one of { 1, 2, 3 })  ==>  (return == orig(this.theArray[this.front]))
(this.currentSize one of { 1, 2, 3 })  ==>  (return == this.theArray[orig(this.front)])
(this.currentSize one of { 1, 2, 3 })  ==>  (return == this.theArray[this.front])
(this.currentSize one of { 1, 2, 3 })  ==>  (return.getClass().getName() in this.theArray[].getClass().getName())
(this.currentSize one of { 1, 2, 3 })  ==>  (size(this.theArray[]) one of { 4, 35, 100 })
(this.currentSize one of { 1, 2, 3 })  ==>  (this.back < size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.back one of { 0, 1, 2 })
(this.currentSize one of { 1, 2, 3 })  ==>  (this.currentSize <= size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.currentSize >= this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.currentSize >= this.front)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front % this.currentSize == 0)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front < size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front <= this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front one of { 0, 1 })
(this.currentSize one of { 1, 2, 3 })  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(this.currentSize one of { 1, 2, 3 })  ==>  (this.theArray[orig(this.currentSize)] == null)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.theArray[this.back] == orig(this.theArray[post(this.currentSize)-1]))
(this.currentSize one of { 1, 2, 3 })  ==>  (this.theArray[this.back] == orig(this.theArray[this.currentSize-1]))
(this.currentSize one of { 1, 2, 3 })  ==>  (this.theArray[this.back] == this.theArray[orig(this.currentSize)-1])
(this.currentSize one of { 1, 2, 3 })  ==>  (this.theArray[this.currentSize-1] == this.theArray[this.back])
(this.currentSize one of { 1, 2, 3 })  ==>  (this.theArray[this.currentSize] == null)
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isEmpty():::ENTER
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <this, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
(this.currentSize == 0)  <==>  (return == true)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (this.back >= -1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize one of { 1, 2, 3 })  <==>  (return == false)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.back one of { 0, 1, 2 })
(this.currentSize one of { 1, 2, 3 })  ==>  (this.currentSize + this.front - this.back - 1 == 0)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front <= size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front <= this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front one of { 0, 1, 2 })
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="return == true"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
return == true
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
this.currentSize <= this.front
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="not(return == true)"
this.currentSize one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize
this.front one of { 0, 1, 2 }
this.back one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
return == false
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>
this.front <= this.back
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
this.currentSize + this.front - this.back - 1 == 0
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isFull():::ENTER
this.currentSize one of { 0, 1, 2 }
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <this, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
===========================================================================
DataStructures.QueueAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
(return == true)  <==>  (this.currentSize == size(this.theArray[]))
(return == true)  ==>  (this.back == size(this.theArray[])-1)
(return == true)  ==>  (this.currentSize == this.front)
(return == true)  ==>  (this.theArray[] == [])
(return == true)  ==>  (this.theArray[].getClass().getName() == [])
(this.back >= 0)  <==>  (return == false)
(this.back >= 0)  <==>  (this.currentSize <= size(this.theArray[])-1)
(this.back >= 0)  <==>  (this.front <= size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this))
(this.back >= 0)  ==>  (this.currentSize one of { 0, 1, 2 })
(this.back >= 0)  ==>  (this.front one of { 0, 1, 2 })
this.currentSize one of { 0, 1, 2 }
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="return == true"
this.currentSize == this.front
this.currentSize == orig(this.front)
this.currentSize == size(this.theArray[])
this.currentSize == orig(size(this.theArray[]))
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
this.theArray[] == []
this.theArray[].getClass().getName() == []
return == true
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="not(return == true)"
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
this.back >= 0
return == false
FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
this.currentSize <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
===========================================================================
DataStructures.QueueAr.makeEmpty():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize <= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
this.currentSize <= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.front), this.back>
this.back >= orig(this.back)
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
orig(this.currentSize) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.front), size(this.theArray[])>
orig(this.front) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
Exiting Daikon.

# Filtering step

- Mutation is: 1:STD:<ASSIGN>:<NO-OP>:DataStructures.QueueAr@<init>(int):32:theArray = new Object[capacity] |==> <NO-OP>
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m1.dtrace.gz
Loaded invs from previous step: 0
                                                                               [6:44:58 AM]:                                                                  
No return from procedure observed 241 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 241 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 0 errors found in 0 samples (NaN%)
QueueArTesterDriver.inv.gz: 0 false positives, out of 0, which is NaN%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 0
Saving mutants results file

- Mutation is: 10:AOR:-(int,int):%(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length % 1
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
Loaded invs from previous step: 0
                                                                               [6:44:59 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m10-objects.xml
Total loaded objects: 2860
[6:45:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:45:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:46:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:47:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA
No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 10,365 errors found in 4,812,783 samples (0.22%)
QueueArTesterDriver.inv.gz: 1412 false positives, out of 20387, which is 6.93%.
Preserving 448 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 448
Saving mutants results file

- Mutation is: 11:AOR:-(int,int):*(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length QueueArTesterDriver.inv.gz base-invs-by-mutants.csv base_invs_file.xml experiments hs_err_pid1983241.log hs_err_pid51463.log invs-by-mutants.csv invs.csv invs_file.xml lib literals mutants scripts testers 1
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m11.dtrace.gz
Loaded invs from previous step: 448
                                                                               [6:48:13 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m11-objects.xml
Total loaded objects: 2012
[6:48:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:48:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:49:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA
No return from procedure observed 107 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 99 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 96,700 errors found in 2,794,219 samples (3.46%)
QueueArTesterDriver.inv.gz: 1222 false positives, out of 20387, which is 5.99%.
Preserving 332 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 448
Saving - Total: 477
Saving mutants results file

- Mutation is: 12:AOR:-(int,int):+(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length + 1
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m12.dtrace.gz
Loaded invs from previous step: 477
                                                                               [6:50:08 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m12-objects.xml
Total loaded objects: 2012
[6:50:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:50:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:51:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA
No return from procedure observed 107 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 99 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 93,742 errors found in 2,794,219 samples (3.35%)
QueueArTesterDriver.inv.gz: 1103 false positives, out of 20387, which is 5.41%.
Preserving 301 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 477
Saving - Total: 577
Saving mutants results file

- Mutation is: 13:AOR:-(int,int):/(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length / 1
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m13.dtrace.gz
Loaded invs from previous step: 577
                                                                               [6:52:03 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m13-objects.xml
Total loaded objects: 2012
[6:52:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:52:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA
No return from procedure observed 107 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 99 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 96,700 errors found in 2,794,219 samples (3.46%)
QueueArTesterDriver.inv.gz: 1222 false positives, out of 20387, which is 5.99%.
Preserving 332 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 577
Saving - Total: 577
Saving mutants results file

- Mutation is: 14:STD:<ASSIGN>:<NO-OP>:DataStructures.QueueAr@<init>(int):35:back = theArray.length - 1 |==> <NO-OP>
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
Loaded invs from previous step: 577
                                                                               [6:53:57 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m14-objects.xml
Total loaded objects: 2860
[6:53:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:53:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:54:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:55:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:56:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA
No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 10,365 errors found in 4,812,783 samples (0.22%)
QueueArTesterDriver.inv.gz: 1412 false positives, out of 20387, which is 6.93%.
Preserving 448 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 577
Saving - Total: 577
Saving mutants results file

- Mutation is: 2:LVR:0:POS:DataStructures.QueueAr@<init>(int):33:0 |==> 1
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
Loaded invs from previous step: 577
                                                                               [6:57:18 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m2-objects.xml
Total loaded objects: 2873
[6:57:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:57:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:58:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[6:59:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA
No return from procedure observed 21 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 9 invocations
  DataStructures.QueueAr.getFront() : 1 invocation
  DataStructures.QueueAr.dequeue() : 2 invocations
  DataStructures.QueueAr.dequeueAll() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 46,078 errors found in 4,985,058 samples (0.92%)
QueueArTesterDriver.inv.gz: 1208 false positives, out of 20387, which is 5.93%.
Preserving 572 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 577
Saving - Total: 1039
Saving mutants results file

- Mutation is: 3:LVR:0:NEG:DataStructures.QueueAr@<init>(int):33:0 |==> -1
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
Loaded invs from previous step: 1039
                                                                               [7:00:39 AM]:                                                                  [7:00:40 AM]: Checking size of experiments/QueueAr_dequeueAll/setup-files/mutan[7:00:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:00:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:01:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:02:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:02:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:02:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:02:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:02:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:02:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:02:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:02:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:02:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:02:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:02:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:02:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:02:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:02:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:02:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:03:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueASaving mutants results file

- Mutation is: 4:STD:<ASSIGN>:<NO-OP>:DataStructures.QueueAr@<init>(int):33:currentSize = 0 |==> <NO-OP>
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m4.dtrace.gz
Loaded invs from previous step: 1039
                                                                               [7:04:19 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m4-objects.xml
Total loaded objects: 2860
[7:04:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:04:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:05:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:06:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA
No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 0 errors found in 4,814,537 samples (0.00%)
QueueArTesterDriver.inv.gz: 0 false positives, out of 20387, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 1039
Saving - Total: 1039
Saving mutants results file

- Mutation is: 5:LVR:0:POS:DataStructures.QueueAr@<init>(int):34:0 |==> 1
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m5.dtrace.gz
Loaded invs from previous step: 1039
                                                                               [7:07:39 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m5-objects.xml
Total loaded objects: 2858
[7:07:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:07:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:08:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:09:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA
No return from procedure observed 14 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
  DataStructures.QueueAr.dequeueAll() : 1 invocation
  DataStructures.QueueAr.dequeue() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 23,796 errors found in 4,802,187 samples (0.50%)
QueueArTesterDriver.inv.gz: 1288 false positives, out of 20387, which is 6.32%.
Preserving 375 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 1039
Saving - Total: 1247
Saving mutants results file

- Mutation is: 6:LVR:0:NEG:DataStructures.QueueAr@<init>(int):34:0 |==> -1
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m6.dtrace.gz
Loaded invs from previous step: 1247
                                                                               [7:10:57 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m6-objects.xml
Total loaded objects: 2514
[7:10:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:10:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:11:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:12:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA
No return from procedure observed 79 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.getFront() : 38 invocations
  DataStructures.QueueAr.dequeue() : 20 invocations
  DataStructures.QueueAr.dequeueAll() : 9 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 137,859 errors found in 3,903,767 samples (3.53%)
QueueArTesterDriver.inv.gz: 2079 false positives, out of 20387, which is 10.20%.
Preserving 466 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 1247
Saving - Total: 1591
Saving mutants results file

- Mutation is: 66:STD:<CALL>:<NO-OP>:DataStructures.QueueAr@dequeueAll():114:dequeue() |==> <NO-OP>
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m66.dtrace.gz
Loaded invs from previous step: 1591
                                                                               [7:13:42 AM]:                                                                  [7:13:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueALoaded objects from file: /specfuzzer/experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m66-objects.xml
Total loaded objects: 67
[7:13:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:13:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:14:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:15:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:16:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:17:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:18:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:19:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:20:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:21:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:22:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:23:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:24:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:25:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:26:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:27:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:28:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:29:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:30:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:31:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:32:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:33:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:34:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:35:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:36:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:37:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:38:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA
No return from procedure observed 5 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 3 invocations
  DataStructures.QueueAr.dequeueAll() : 1 invocation
  DataStructures.QueueAr.isEmpty() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 0 errors found in 38,217,384 samples (0.00%)
QueueArTesterDriver.inv.gz: 0 false positives, out of 14034, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 1591
Saving - Total: 1591
Saving mutants results file

- Mutation is: 67:LVR:TRUE:FALSE:DataStructures.QueueAr@dequeueAll():117:true |==> false
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m67.dtrace.gz
Loaded invs from previous step: 1591
                                                                               [7:39:08 AM]:                                                                  Saving mutants results file

- Mutation is: 7:STD:<ASSIGN>:<NO-OP>:DataStructures.QueueAr@<init>(int):34:front = 0 |==> <NO-OP>
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m7.dtrace.gz
Loaded invs from previous step: 1591
                                                                               [7:39:12 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m7-objects.xml
Total loaded objects: 2860
[7:39:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:39:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:40:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:41:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA
No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 0 errors found in 4,814,537 samples (0.00%)
QueueArTesterDriver.inv.gz: 0 false positives, out of 20387, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 1591
Saving - Total: 1591
Saving mutants results file

- Mutation is: 8:LVR:POS:0:DataStructures.QueueAr@<init>(int):35:1 |==> 0
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m8.dtrace.gz
Loaded invs from previous step: 1591
                                                                               [7:42:33 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m8-objects.xml
Total loaded objects: 2012
[7:42:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:42:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:43:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA
No return from procedure observed 107 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 99 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 96,700 errors found in 2,794,219 samples (3.46%)
QueueArTesterDriver.inv.gz: 1222 false positives, out of 20387, which is 5.99%.
Preserving 332 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 1591
Saving - Total: 1591
Saving mutants results file

- Mutation is: 9:LVR:POS:NEG:DataStructures.QueueAr@<init>(int):35:1 |==> -1
Checking invs on mutant: experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m9.dtrace.gz
Loaded invs from previous step: 1591
                                                                               [7:44:33 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m9-objects.xml
Total loaded objects: 2012
[7:44:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:35 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:44:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:27 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:28 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:29 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:30 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:31 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:32 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:33 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:34 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:36 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:37 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:38 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:39 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:40 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:41 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:42 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:43 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:44 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:45 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:46 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:47 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:48 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:49 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:50 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:51 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:52 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:53 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:54 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:55 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:56 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:57 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:58 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:45:59 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:00 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:01 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:02 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:03 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:04 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:05 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:06 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:07 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:08 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:09 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:10 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:11 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:12 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:13 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:14 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:15 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:16 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:17 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:18 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:19 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:20 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:21 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:22 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:23 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:24 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:25 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA[7:46:26 AM]: Reading experiments/QueueAr_dequeueAll/setup-files/mutants/QueueA
No return from procedure observed 107 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 99 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 96,700 errors found in 2,794,219 samples (3.46%)
QueueArTesterDriver.inv.gz: 1222 false positives, out of 20387, which is 5.99%.
Preserving 332 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 1591
Saving - Total: 1591
Saving mutants results file

# Filtering step took minutes: 61
# Mutation killing ability results saved in: experiments/QueueAr_dequeueAll/output/QueueAr-dequeueAll-specfuzzer-1-invs-by-mutants.csv

# Writing assertions to file: experiments/QueueAr_dequeueAll/output/QueueAr-dequeueAll-specfuzzer-1.assertions

# Filtering specs with buckets
> Mutant filter from file: experiments/QueueAr_dequeueAll/output/QueueAr-dequeueAll-specfuzzer-1-invs-by-mutants.csv
Unique mutants: 11
Loading assertions from: experiments/QueueAr_dequeueAll/output/QueueAr-dequeueAll-specfuzzer-1.assertions
Specs killing mutants: 138

> Minimizing by exploring the bit vector of each spec
Building bit vectors of size: 11
Building buckets
=====================================
Buckets: 13
Vector: [1. 0. 0. 0. 1. 1. 1. 1. 0. 0. 0.]
Mutants:
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m5.dtrace.gz
Specs:
	daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null) l:  67  - Fails:  146 Quality:  146
	FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this) l:  77  - Fails:  101 Quality:  101
	FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this) l:  77  - Fails:  101 Quality:  101
Picked:
	daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)

Vector: [1. 0. 0. 0. 1. 0. 0. 0. 1. 0. 0.]
Mutants:
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m6.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  168  - Fails:  100 Quality:  103
Picked:
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>

Vector: [1. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back> l:  136  - Fails:  60 Quality:  62
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back> l:  168  - Fails:  56 Quality:  59
	FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back> l:  151  - Fails:  12 Quality:  15
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back> l:  130  - Fails:  10 Quality:  12
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back> l:  131  - Fails:  4 Quality:  6
Picked:
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>

Vector: [1. 1. 1. 1. 1. 0. 0. 0. 0. 1. 1.]
Mutants:
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m11.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m12.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m13.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m8.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m9.dtrace.gz
Specs:
	this.back <= daikon.Quant.size(this.theArray)-1 l:  47  - Fails:  6333 Quality:  6333
Picked:
	this.back <= daikon.Quant.size(this.theArray)-1

Vector: [1. 0. 0. 0. 1. 0. 0. 1. 1. 0. 0.]
Mutants:
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m5.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m6.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back> l:  174  - Fails:  22 Quality:  25
Picked:
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>

Vector: [0. 1. 1. 1. 0. 0. 0. 0. 1. 1. 1.]
Mutants:
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m11.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m12.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m13.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m6.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m8.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m9.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back> l:  100  - Fails:  74 Quality:  76
Picked:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>

Vector: [0. 0. 0. 0. 0. 1. 1. 0. 0. 0. 0.]
Mutants:
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back> l:  105  - Fails:  2132 Quality:  2134
	FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back> l:  115  - Fails:  1894 Quality:  1896
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back> l:  104  - Fails:  1292 Quality:  1294
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back> l:  105  - Fails:  1292 Quality:  1294
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back> l:  105  - Fails:  1292 Quality:  1294
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back> l:  104  - Fails:  1292 Quality:  1294
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back> l:  105  - Fails:  1292 Quality:  1294
	this.currentSize == 0 l:  21  - Fails:  1292 Quality:  1292
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back> l:  132  - Fails:  236 Quality:  238
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back> l:  134  - Fails:  236 Quality:  238
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back> l:  133  - Fails:  236 Quality:  238
	this.currentSize <= daikon.Quant.size(this.theArray) l:  52  - Fails:  76 Quality:  76
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  163  - Fails:  72 Quality:  75
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.back> l:  111  - Fails:  64 Quality:  66
	FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), this.back> l:  121  - Fails:  52 Quality:  54
	FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize> l:  103  - Fails:  26 Quality:  27
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back> l:  132  - Fails:  16 Quality:  18
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , this.back> l:  148  - Fails:  8 Quality:  11
	\old(this.currentSize) <= daikon.Quant.size(this.theArray) l:  58  - Fails:  8 Quality:  8
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
	this.currentSize <= daikon.Quant.size(this.theArray)
	\old(this.currentSize) <= daikon.Quant.size(this.theArray)

Vector: [0. 0. 0. 0. 0. 1. 1. 1. 1. 0. 0.]
Mutants:
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m5.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m6.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back> l:  136  - Fails:  266 Quality:  269
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>

Vector: [0. 0. 0. 0. 0. 1. 1. 1. 0. 0. 0.]
Mutants:
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m5.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back> l:  99  - Fails:  713 Quality:  715
	FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back> l:  109  - Fails:  625 Quality:  627
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.back> l:  105  - Fails:  24 Quality:  26
	FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), this.back> l:  115  - Fails:  18 Quality:  20
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>

Vector: [0. 0. 0. 0. 0. 1. 1. 0. 1. 0. 0.]
Mutants:
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m6.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  163  - Fails:  13 Quality:  16
Picked:
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>

Vector: [0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]
Mutants:
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m5.dtrace.gz
Specs:
	this.front <= daikon.Quant.size(this.theArray) l:  46  - Fails:  44 Quality:  44
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back> l:  169  - Fails:  30 Quality:  33
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)> l:  187  - Fails:  26 Quality:  29
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back> l:  175  - Fails:  6 Quality:  9
	\old(this.front) <= daikon.Quant.size(this.theArray) l:  52  - Fails:  7 Quality:  7
Picked:
	\old(this.front) <= daikon.Quant.size(this.theArray)
	this.front <= daikon.Quant.size(this.theArray)

Vector: [0. 0. 0. 0. 0. 0. 0. 1. 1. 0. 0.]
Mutants:
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m5.dtrace.gz
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m6.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.back> l:  142  - Fails:  348 Quality:  351
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.back>

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]
Mutants:
	experiments/QueueAr_dequeueAll/setup-files/mutants/QueueArTesterDriver-m6.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.front l:  65  - Fails:  2071 Quality:  2072
	FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.front l:  65  - Fails:  2071 Quality:  2072
	FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.front l:  66  - Fails:  2071 Quality:  2072
	this.front >= 0 l:  15  - Fails:  2071 Quality:  2071
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.front, this.back> l:  99  - Fails:  2038 Quality:  2040
	FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back> l:  110  - Fails:  2038 Quality:  2040
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back> l:  100  - Fails:  2038 Quality:  2040
	FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front> l:  121  - Fails:  1233 Quality:  1235
	FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front> l:  118  - Fails:  1233 Quality:  1235
	FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front> l:  118  - Fails:  1233 Quality:  1235
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front> l:  139  - Fails:  1233 Quality:  1235
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front> l:  132  - Fails:  1233 Quality:  1235
	FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front> l:  122  - Fails:  643 Quality:  645
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front> l:  107  - Fails:  643 Quality:  645
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.front)> l:  113  - Fails:  399 Quality:  401
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)> l:  145  - Fails:  399 Quality:  401
	FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)> l:  124  - Fails:  399 Quality:  401
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)> l:  138  - Fails:  399 Quality:  401
	FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)> l:  127  - Fails:  399 Quality:  401
	FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)> l:  128  - Fails:  399 Quality:  401
	FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)> l:  124  - Fails:  399 Quality:  401
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)> l:  186  - Fails:  366 Quality:  369
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), this.back> l:  106  - Fails:  366 Quality:  368
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.front), this.back> l:  105  - Fails:  366 Quality:  368
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.front)> l:  139  - Fails:  366 Quality:  368
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)> l:  138  - Fails:  366 Quality:  368
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)> l:  138  - Fails:  366 Quality:  368
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)> l:  112  - Fails:  366 Quality:  368
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.front)> l:  112  - Fails:  366 Quality:  368
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.front)> l:  108  - Fails:  366 Quality:  368
	FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)> l:  122  - Fails:  366 Quality:  368
	FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)> l:  122  - Fails:  366 Quality:  368
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)> l:  111  - Fails:  366 Quality:  368
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.front)> l:  112  - Fails:  366 Quality:  368
	FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back> l:  116  - Fails:  366 Quality:  368
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)> l:  113  - Fails:  366 Quality:  368
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.front)> l:  112  - Fails:  366 Quality:  368
	FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.front)> l:  124  - Fails:  366 Quality:  368
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)> l:  112  - Fails:  366 Quality:  368
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)> l:  139  - Fails:  366 Quality:  368
	FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)> l:  122  - Fails:  366 Quality:  368
	FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)> l:  122  - Fails:  366 Quality:  368
	this.currentSize <= \old(this.front) l:  36  - Fails:  366 Quality:  366
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back> l:  173  - Fails:  360 Quality:  363
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)> l:  155  - Fails:  328 Quality:  331
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front> l:  132  - Fails:  149 Quality:  151
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front> l:  105  - Fails:  116 Quality:  118
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front> l:  106  - Fails:  116 Quality:  118
	FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front> l:  118  - Fails:  116 Quality:  118
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front> l:  107  - Fails:  116 Quality:  118
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front> l:  106  - Fails:  116 Quality:  118
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front> l:  106  - Fails:  116 Quality:  118
	FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front> l:  116  - Fails:  116 Quality:  118
	FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front> l:  116  - Fails:  116 Quality:  118
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front> l:  102  - Fails:  116 Quality:  118
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front> l:  133  - Fails:  116 Quality:  118
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front> l:  133  - Fails:  116 Quality:  118
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front> l:  106  - Fails:  116 Quality:  118
	FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front> l:  116  - Fails:  116 Quality:  118
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front> l:  132  - Fails:  116 Quality:  118
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.front> l:  106  - Fails:  116 Quality:  118
	FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front> l:  116  - Fails:  116 Quality:  118
	this.currentSize <= this.front l:  30  - Fails:  116 Quality:  116
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  167  - Fails:  112 Quality:  115
	FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)> l:  160  - Fails:  46 Quality:  49
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.front> l:  143  - Fails:  46 Quality:  49
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)> l:  180  - Fails:  46 Quality:  49
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)> l:  149  - Fails:  46 Quality:  49
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front> l:  170  - Fails:  46 Quality:  49
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front> l:  170  - Fails:  46 Quality:  49
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), this.front> l:  107  - Fails:  46 Quality:  48
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), this.front> l:  107  - Fails:  46 Quality:  48
	FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front> l:  122  - Fails:  46 Quality:  48
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.front), this.front> l:  106  - Fails:  46 Quality:  48
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front> l:  133  - Fails:  46 Quality:  48
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front> l:  134  - Fails:  46 Quality:  48
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front> l:  139  - Fails:  46 Quality:  48
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front> l:  135  - Fails:  46 Quality:  48
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front> l:  134  - Fails:  46 Quality:  48
	FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front> l:  122  - Fails:  46 Quality:  48
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front> l:  137  - Fails:  46 Quality:  48
	FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.front> l:  117  - Fails:  46 Quality:  48
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back> l:  130  - Fails:  43 Quality:  45
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back> l:  127  - Fails:  43 Quality:  45
	FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back> l:  115  - Fails:  43 Quality:  45
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)> l:  155  - Fails:  38 Quality:  41
	FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back> l:  162  - Fails:  24 Quality:  27
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back> l:  169  - Fails:  6 Quality:  9
	FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back> l:  156  - Fails:  6 Quality:  9
	FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back> l:  162  - Fails:  6 Quality:  9
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back> l:  133  - Fails:  6 Quality:  8
	FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back> l:  121  - Fails:  6 Quality:  8
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back> l:  136  - Fails:  6 Quality:  8
	FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back> l:  156  - Fails:  2 Quality:  5
	FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back> l:  150  - Fails:  2 Quality:  5
Picked:
	FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.front

Buckets: 13
Specs: 16
Saved in file: experiments/QueueAr_dequeueAll/output/QueueAr-dequeueAll-specfuzzer-1-buckets.assertions

