> SpecFuzzer
# Inference step (Daikon + Fuzzed Specs)
Daikon version 5.8.2, released May 4, 2020; http://plse.cs.washington.edu/daikon.

Loading invariants from file: invs_file.xml
Loaded: 0

Fuzzing specs:
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 1) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: (Integer_Variable_0 <= 0) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 = 1)
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 0
Fuzzed spec: (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0)
Fuzzed spec: (Integer_Variable_0 > -1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 = -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 1) iff (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 1
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 0
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 > 1)
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 1
Fuzzed spec: (Integer_Variable_0 != 1) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 != 1)
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 = -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= 0) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 < 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 > 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 1) iff (Integer_Variable_1 > 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 != 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 < 1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = -1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0)
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = 0) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 < #(StackAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = 1) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: (Integer_Variable_0 <= 0) xor (Integer_Variable_1 >= #(StackAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * -1
Fuzzed spec: (Integer_Variable_0 >= 0) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 = -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 1) xor (Integer_Variable_1 < 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = -1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0)
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != -1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < -1
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 > 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > 1) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 > 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 1
Fuzzed spec: all n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 0
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 1) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0)
Fuzzed spec: (Integer_Variable_0 = 1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 <= -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 0
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 < -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + -1
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= -1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0)
Fuzzed spec: (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = 0) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - -1
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 = 1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 > 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 0) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % -1
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= 1)
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = -1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 1
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1)
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 0
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= -1) iff (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != 0) implies (Integer_Variable_1 = 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 1) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 >= -1)
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 = 1)
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 0) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != -1)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 < -1)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 <= 1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / -1
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 0) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 = 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 >= -1)
Fuzzed spec: (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1)
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 <= 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 1) xor (Integer_Variable_1 >= #(StackAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 <= 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 > 1)
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 > Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = 1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 0
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 0
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 != 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 > -1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 1
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 1
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 > 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: (Integer_Variable_0 <= 1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1)
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 1) iff (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) iff (Integer_Variable_1 > -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > 1)
Fuzzed spec: (Integer_Variable_0 != 1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < 0) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 0) iff (Integer_Variable_1 != -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 0
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 1
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 <= 0)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1)
Unique fuzzed invariants: 430 (2000)
Unary: 24 - Binary: 157 - Ternary: 249 - Discarded: 42
Reading declaration files Processing trace data; reading 1 dtrace file:
Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/StackArTesterDriver-objects.xml
Total loaded objects: 3542

No return from procedure observed 53 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 38 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
DataStructures.Overflow:::OBJECT
===========================================================================
DataStructures.Overflow.Overflow():::EXIT
===========================================================================
DataStructures.StackAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.topOfStack
this.topOfStack >= -1
this.topOfStack <= size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.StackAr(int):::ENTER
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: capacity
capacity >= 0
===========================================================================
DataStructures.StackAr.StackAr(int):::EXIT
orig(capacity) == size(this.theArray[])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 <= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 != -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 < 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 != -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 = -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.isEmpty():::ENTER
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(this.topOfStack == -1)  <==>  (return == true)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack one of { 0, 1 })  <==>  (return == false)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(this.topOfStack one of { 0, 1 })  ==>  (orig(this.theArray[post(this.topOfStack)]) != null)
(this.topOfStack one of { 0, 1 })  ==>  (orig(this.theArray[this.topOfStack]) != null)
(this.topOfStack one of { 0, 1 })  ==>  (this.theArray[orig(this.topOfStack)] != null)
(this.topOfStack one of { 0, 1 })  ==>  (this.theArray[this.topOfStack] != null)
(this.topOfStack one of { 0, 1 })  ==>  (this.topOfStack < size(this.theArray[])-1)
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="return == true"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == true
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="not(return == true)"
this.topOfStack one of { 0, 1 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack
return == false
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
this.theArray[this.topOfStack] != null
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.isFull():::ENTER
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(return == false)  <==>  (this.topOfStack < size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(return == false)  ==>  (this.topOfStack one of { -1, 0, 1 })
(return == true)  <==>  (this.topOfStack == size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), size(this.theArray[])-1>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), size(this.theArray[])-1>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), size(this.theArray[])-1>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n != null ) holds for: orig(this))
(return == true)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this))
(return == true)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this))
(return == true)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n = null ) holds for: orig(this))
(return == true)  ==>  (this.theArray[] == [])
(return == true)  ==>  (this.theArray[].getClass().getName() == [])
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="return == true"
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray[] == []
this.theArray[].getClass().getName() == []
return == true
FuzzedInvariant ( all n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n = null ) holds for: orig(this)
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="not(return == true)"
return == false
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.makeEmpty():::ENTER
this.topOfStack one of { -1, 0 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack <= orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.pop():::ENTER
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: this
this.topOfStack one of { 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
this.theArray[this.topOfStack] != null
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.pop():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
this.topOfStack one of { -1, 0 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
this.theArray[orig(this.topOfStack)] == null
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack < orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
this.theArray[orig(this.topOfStack)] in orig(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
this.theArray.getClass().getName() != x.getClass().getName()
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
size(this.theArray[]) == orig(size(this.theArray[]))
this.topOfStack one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
orig(this.theArray[post(this.topOfStack)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(this.theArray[post(this.topOfStack)]) in this.theArray[]
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack > orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.top():::ENTER
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.top():::EXIT78
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
this.theArray[] elements == return
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.top():::EXIT79
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
this.topOfStack one of { 0, 1 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack
return != null
FuzzedInvariant ( some n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.top():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(this.topOfStack == -1)  <==>  (return == null)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this))
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this))
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == return)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack one of { 0, 1 })  <==>  (return != null)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n != null ) holds for: orig(this))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(this.topOfStack one of { 0, 1 })  ==>  (orig(this.theArray[post(this.topOfStack)]) != null)
(this.topOfStack one of { 0, 1 })  ==>  (orig(this.theArray[this.topOfStack]) != null)
(this.topOfStack one of { 0, 1 })  ==>  (return == orig(this.theArray[post(this.topOfStack)]))
(this.topOfStack one of { 0, 1 })  ==>  (return == orig(this.theArray[this.topOfStack]))
(this.topOfStack one of { 0, 1 })  ==>  (return == this.theArray[orig(this.topOfStack)])
(this.topOfStack one of { 0, 1 })  ==>  (return == this.theArray[this.topOfStack])
(this.topOfStack one of { 0, 1 })  ==>  (return.getClass().getName() in this.theArray[].getClass().getName())
(this.topOfStack one of { 0, 1 })  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(this.topOfStack one of { 0, 1 })  ==>  (this.theArray[orig(this.topOfStack)] != null)
(this.topOfStack one of { 0, 1 })  ==>  (this.theArray[this.topOfStack] != null)
(this.topOfStack one of { 0, 1 })  ==>  (this.topOfStack < size(this.theArray[])-1)
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT112
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
this.theArray[] elements == return
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT115
return == orig(this.theArray[this.topOfStack])
return != null
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
orig(this.topOfStack) one of { 0, 1 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.topOfStack)
size(this.theArray[]) one of { 4, 35, 97 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
this.theArray[orig(this.topOfStack)] == null
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack < orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
this.theArray[orig(this.topOfStack)] in orig(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
(return != null)  <==>  (orig(this.topOfStack) one of { 0, 1 })
(return != null)  <==>  (this.topOfStack < orig(this.topOfStack))
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.topOfStack))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.topOfStack))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[]))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.topOfStack))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(return != null)  ==>  (orig(this.theArray[this.topOfStack]) != null)
(return != null)  ==>  (orig(this.topOfStack) < size(this.theArray[])-1)
(return != null)  ==>  (return == orig(this.theArray[this.topOfStack]))
(return != null)  ==>  (return.getClass().getName() in orig(this.theArray[].getClass().getName()))
(return != null)  ==>  (size(this.theArray[]) one of { 4, 35, 97 })
(return != null)  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(return != null)  ==>  (this.theArray[orig(this.topOfStack)] == null)
(return != null)  ==>  (this.theArray[orig(this.topOfStack)] in orig(this.theArray[]))
(return != null)  ==>  (this.topOfStack < size(this.theArray[])-1)
(return != null)  ==>  (this.topOfStack one of { -1, 0 })
(return == null)  <==>  (orig(this.topOfStack) == -1)
(return == null)  <==>  (this.topOfStack == orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), orig(this.topOfStack)>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), orig(this.topOfStack)>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), orig(this.topOfStack)>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(return == null)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this))
(return == null)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this))
(return == null)  ==>  (orig(this.theArray[]) elements == null)
(return == null)  ==>  (orig(this.theArray[]) elements == return)
(return == null)  ==>  (orig(this.theArray[].getClass().getName()) elements == null)
(return == null)  ==>  (this.theArray[] == orig(this.theArray[]))
(return == null)  ==>  (this.theArray[] elements == null)
(return == null)  ==>  (this.theArray[] elements == return)
(return == null)  ==>  (this.theArray[].getClass().getName() elements == null)
(return == null)  ==>  (this.topOfStack == -1)
this.topOfStack one of { -1, 0 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
this.topOfStack <= orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
return.getClass().getName() in orig(this.theArray[].getClass().getName())
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.Underflow:::OBJECT
===========================================================================
DataStructures.Underflow.Underflow():::EXIT
Exiting Daikon.

# Filtering step

- Mutation is: 1:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@<init>(int):33:theArray = new Object[capacity] |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m1.dtrace.gz
Loaded invs from previous step: 0
                                                                               [6:40:17 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m1-objects.xml
Total loaded objects: 804
[6:40:18 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:19 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:20 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:21 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:22 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:23 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:24 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 271 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 9 invocations
  DataStructures.StackAr.makeEmpty() : 127 invocations
  DataStructures.StackAr.isFull() : 88 invocations
  DataStructures.StackAr.push(java.lang.Object) : 47 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 2,379 errors found in 154,173 samples (1.54%)
StackArTesterDriver.inv.gz: 199 false positives, out of 633, which is 31.44%.
Preserving 98 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 98
Saving mutants results file

- Mutation is: 19:LVR:0:POS:DataStructures.StackAr@makeEmpty():63:0 |==> 1
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m19.dtrace.gz
Loaded invs from previous step: 98
                                                                               [6:40:25 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m19-objects.xml
Total loaded objects: 1396
[6:40:26 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:27 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:28 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:29 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:30 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:31 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:32 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:33 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:34 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:35 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:36 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:37 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:38 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:39 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:40 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:41 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:42 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:44 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:45 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:46 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:47 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:48 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:49 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:50 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 192 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 18 invocations
  DataStructures.StackAr.makeEmpty() : 162 invocations
  DataStructures.StackAr.push(java.lang.Object) : 2 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 122 errors found in 635,856 samples (0.02%)
StackArTesterDriver.inv.gz: 17 false positives, out of 7578, which is 0.22%.
Preserving 2 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 98
Saving - Total: 100
Saving mutants results file

- Mutation is: 2:LVR:NEG:0:DataStructures.StackAr@<init>(int):34:-1 |==> 0
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
Loaded invs from previous step: 100
                                                                               [6:40:51 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m2-objects.xml
Total loaded objects: 3552
[6:40:52 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:53 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:54 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:55 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:56 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:57 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:58 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:40:59 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:00 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:01 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:02 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:03 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:04 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:05 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:06 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:07 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:08 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:09 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:10 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:11 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:12 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:13 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:14 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:15 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:16 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:17 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:18 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:19 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:20 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:21 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:22 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:23 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:24 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:25 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:26 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:27 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:28 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:29 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:30 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:31 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:32 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:33 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:34 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:35 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:36 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:37 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:38 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:39 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:40 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:41 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:42 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:43 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:44 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:45 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:46 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:47 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:48 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:49 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:50 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:51 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:52 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:53 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:54 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:55 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:56 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:57 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:41:59 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:00 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:01 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:02 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:03 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:04 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:05 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:06 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 46 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 26 invocations
  DataStructures.StackAr.push(java.lang.Object) : 2 invocations
  DataStructures.StackAr.top() : 3 invocations
  DataStructures.StackAr.makeEmpty() : 4 invocations
  DataStructures.StackAr.topAndPop() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 40,743 errors found in 2,222,739 samples (1.83%)
StackArTesterDriver.inv.gz: 1260 false positives, out of 7579, which is 16.62%.
Preserving 415 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 100
Saving - Total: 478
Saving mutants results file

- Mutation is: 20:LVR:0:NEG:DataStructures.StackAr@makeEmpty():63:0 |==> -1
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m20.dtrace.gz
Loaded invs from previous step: 478
                                                                               [6:42:07 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m20-objects.xml
Total loaded objects: 1355
[6:42:08 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:09 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:10 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:11 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:12 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:13 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:14 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:15 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:16 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:17 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:19 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:20 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:21 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:22 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:23 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:24 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:25 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:26 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:27 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:28 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:29 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:30 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 196 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 16 invocations
  DataStructures.StackAr.makeEmpty() : 168 invocations
  DataStructures.StackAr.push(java.lang.Object) : 2 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 610,914 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 6449, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 478
Saving - Total: 478
Saving mutants results file

- Mutation is: 21:LVR:POS:0:DataStructures.StackAr@makeEmpty():63:1 |==> 0
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m21.dtrace.gz
Loaded invs from previous step: 478
                                                                               [6:42:31 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m21-objects.xml
Total loaded objects: 1396
[6:42:32 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:33 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:34 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:35 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:36 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:37 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:38 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:40 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:41 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:42 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:43 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:44 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:45 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:46 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:47 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:48 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:49 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:50 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:51 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:52 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:53 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:54 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:55 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:42:56 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 192 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 18 invocations
  DataStructures.StackAr.makeEmpty() : 162 invocations
  DataStructures.StackAr.push(java.lang.Object) : 2 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 122 errors found in 635,856 samples (0.02%)
StackArTesterDriver.inv.gz: 17 false positives, out of 7578, which is 0.22%.
Preserving 2 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 478
Saving - Total: 478
Saving mutants results file

- Mutation is: 22:LVR:POS:NEG:DataStructures.StackAr@makeEmpty():63:1 |==> -1
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m22.dtrace.gz
Loaded invs from previous step: 478
                                                                               [6:42:58 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m22-objects.xml
Total loaded objects: 1355
[6:42:59 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:00 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:01 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:02 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:03 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:04 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:05 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:06 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:07 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:08 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:09 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:10 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:11 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:12 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:13 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:14 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:15 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:16 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:17 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:18 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:19 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:20 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 196 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 16 invocations
  DataStructures.StackAr.makeEmpty() : 168 invocations
  DataStructures.StackAr.push(java.lang.Object) : 2 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 610,914 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 6449, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 478
Saving - Total: 478
Saving mutants results file

- Mutation is: 23:AOR:+(int,int):%(int,int):DataStructures.StackAr@makeEmpty():63:topOfStack + 1 |==> topOfStack % 1
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m23.dtrace.gz
Loaded invs from previous step: 478
                                                                               [6:43:22 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m23-objects.xml
Total loaded objects: 3542
[6:43:23 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:24 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:25 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:26 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:27 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:28 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:29 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:30 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:31 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:32 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:33 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:34 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:35 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:36 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:37 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:38 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:39 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:40 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:42 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:43 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:44 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:45 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:46 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:47 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:48 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:49 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:50 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:51 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:52 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:53 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:54 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:55 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:56 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:57 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:58 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:43:59 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:00 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:01 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:02 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:03 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:04 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:05 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:06 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:07 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:08 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:09 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:10 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:11 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:12 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:13 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:14 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:15 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:16 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:17 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:18 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:19 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:20 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:21 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:22 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:23 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:24 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:25 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:26 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:28 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:29 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:30 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:31 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:32 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:33 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:34 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:35 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:36 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:37 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 53 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 38 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 584 errors found in 2,152,309 samples (0.03%)
StackArTesterDriver.inv.gz: 28 false positives, out of 7578, which is 0.37%.
Preserving 2 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 478
Saving - Total: 478
Saving mutants results file

- Mutation is: 24:AOR:+(int,int):*(int,int):DataStructures.StackAr@makeEmpty():63:topOfStack + 1 |==> topOfStack StackArTesterDriver.inv.gz base-invs-by-mutants.csv base_invs_file.xml experiments hs_err_pid1983241.log hs_err_pid51463.log hs_err_pid53479.log invs-by-mutants.csv invs.csv invs_file.xml lib literals mutants scripts testers 1
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m24.dtrace.gz
Loaded invs from previous step: 478
                                                                               [6:44:38 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m24-objects.xml
Total loaded objects: 1396
[6:44:39 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:40 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:41 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:42 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:43 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:44 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:45 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:46 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:47 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:49 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:50 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:51 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:52 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:53 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:54 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:55 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:56 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:57 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:58 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:44:59 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:00 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:01 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:02 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 192 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 18 invocations
  DataStructures.StackAr.makeEmpty() : 162 invocations
  DataStructures.StackAr.push(java.lang.Object) : 2 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 122 errors found in 635,856 samples (0.02%)
StackArTesterDriver.inv.gz: 17 false positives, out of 7578, which is 0.22%.
Preserving 2 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 478
Saving - Total: 478
Saving mutants results file

- Mutation is: 25:AOR:+(int,int):-(int,int):DataStructures.StackAr@makeEmpty():63:topOfStack + 1 |==> topOfStack - 1
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m25.dtrace.gz
Loaded invs from previous step: 478
                                                                               [6:45:03 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m25-objects.xml
Total loaded objects: 1355
[6:45:04 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:05 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:06 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:07 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:08 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:09 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:10 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:11 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:12 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:13 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:14 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:16 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:17 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:18 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:19 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:20 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:21 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:22 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:23 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:24 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:25 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:26 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 196 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 16 invocations
  DataStructures.StackAr.makeEmpty() : 168 invocations
  DataStructures.StackAr.push(java.lang.Object) : 2 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 610,914 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 6449, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 478
Saving - Total: 478
Saving mutants results file

- Mutation is: 26:AOR:+(int,int):/(int,int):DataStructures.StackAr@makeEmpty():63:topOfStack + 1 |==> topOfStack / 1
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m26.dtrace.gz
Loaded invs from previous step: 478
                                                                               [6:45:27 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m26-objects.xml
Total loaded objects: 1396
[6:45:28 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:29 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:30 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:31 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:32 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:33 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:34 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:35 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:36 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:38 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:39 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:40 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:41 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:42 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:43 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:44 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:45 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:46 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:47 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:48 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:49 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:50 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:51 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 192 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 18 invocations
  DataStructures.StackAr.makeEmpty() : 162 invocations
  DataStructures.StackAr.push(java.lang.Object) : 2 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 122 errors found in 635,856 samples (0.02%)
StackArTesterDriver.inv.gz: 17 false positives, out of 7578, which is 0.22%.
Preserving 2 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 478
Saving - Total: 478
Saving mutants results file

- Mutation is: 27:STD:<CALL>:<NO-OP>:DataStructures.StackAr@makeEmpty():63:java.util.Arrays.fill(theArray, 0, topOfStack + 1, null) |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m27.dtrace.gz
Loaded invs from previous step: 478
                                                                               [6:45:52 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m27-objects.xml
Total loaded objects: 3542
[6:45:53 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:54 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:55 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:56 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:57 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:58 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:45:59 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:00 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:01 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:02 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:03 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:04 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:05 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:06 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:07 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:08 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:09 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:11 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:12 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:13 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:14 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:15 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:16 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:17 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:18 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:19 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:20 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:21 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:22 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:23 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:24 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:25 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:26 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:27 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:28 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:29 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:30 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:31 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:32 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:33 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:34 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:35 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:36 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:37 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:38 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:39 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:40 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:41 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:42 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:43 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:44 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:45 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:46 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:47 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:48 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:49 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:50 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:51 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:52 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:53 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:54 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:55 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:56 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:57 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:58 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:46:59 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:00 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:01 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:02 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:03 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:04 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:05 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:06 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:07 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:08 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 53 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 38 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 584 errors found in 2,152,309 samples (0.03%)
StackArTesterDriver.inv.gz: 28 false positives, out of 7578, which is 0.37%.
Preserving 2 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 478
Saving - Total: 478
Saving mutants results file

- Mutation is: 28:LVR:NEG:0:DataStructures.StackAr@makeEmpty():64:-1 |==> 0
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m28.dtrace.gz
Loaded invs from previous step: 478
                                                                               [6:47:10 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m28-objects.xml
Total loaded objects: 3591
[6:47:11 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:12 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:13 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:14 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:16 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:17 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:18 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:19 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:20 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:21 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:22 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:23 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:24 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:25 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:26 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:27 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:28 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:29 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:30 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:31 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:32 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:33 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:35 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:36 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:37 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:38 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:39 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:40 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:41 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:42 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:43 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:44 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:45 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:46 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:47 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:48 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:49 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:50 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:51 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:52 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:53 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:54 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:55 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:56 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:57 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:58 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:47:59 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:00 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:01 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:02 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:03 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:04 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:05 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:06 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:07 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:08 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:09 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:10 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:11 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:12 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:13 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:14 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:15 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:16 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:17 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:18 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:19 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:20 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:21 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:22 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:23 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:24 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:25 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:26 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:27 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 35 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 19 invocations
  DataStructures.StackAr.push(java.lang.Object) : 4 invocations
  DataStructures.StackAr.top() : 2 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 56,663 errors found in 2,230,578 samples (2.54%)
StackArTesterDriver.inv.gz: 960 false positives, out of 7578, which is 12.67%.
Preserving 305 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 478
Saving - Total: 566
Saving mutants results file

- Mutation is: 29:LVR:NEG:POS:DataStructures.StackAr@makeEmpty():64:-1 |==> 1
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m29.dtrace.gz
Loaded invs from previous step: 566
                                                                               [6:48:30 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m29-objects.xml
Total loaded objects: 3586
[6:48:31 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:32 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:33 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:34 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:35 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:36 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:37 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:38 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:39 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:40 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:41 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:42 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:43 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:44 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:45 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:46 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:47 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:48 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:49 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:50 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:51 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:52 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:53 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:54 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:55 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:56 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:57 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:58 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:48:59 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:00 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:01 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:02 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:03 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:04 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:05 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:06 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:07 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:08 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:09 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:10 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:11 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:12 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:13 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:14 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:15 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:16 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:17 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:18 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:19 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:20 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:21 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:22 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:23 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:24 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:25 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:26 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:27 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:28 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:29 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:30 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:31 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:32 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:33 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:34 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:36 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:37 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:38 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:39 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:40 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:41 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:42 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:43 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:44 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:45 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:46 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:47 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 35 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 17 invocations
  DataStructures.StackAr.push(java.lang.Object) : 6 invocations
  DataStructures.StackAr.top() : 2 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 106,950 errors found in 2,233,697 samples (4.79%)
StackArTesterDriver.inv.gz: 1347 false positives, out of 7578, which is 17.78%.
Preserving 364 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 566
Saving - Total: 609
Saving mutants results file

- Mutation is: 3:LVR:NEG:POS:DataStructures.StackAr@<init>(int):34:-1 |==> 1
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
Loaded invs from previous step: 609
                                                                               [6:49:50 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m3-objects.xml
Total loaded objects: 3521
[6:49:51 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:52 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:53 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:54 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:55 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:56 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:57 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:58 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:49:59 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:00 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:01 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:02 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:03 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:04 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:05 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:06 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:07 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:08 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:09 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:10 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:11 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:12 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:13 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:14 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:15 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:16 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:17 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:18 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:19 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:20 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:21 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:22 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:23 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:24 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:25 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:29 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:30 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:33 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:34 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:35 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:36 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:37 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:38 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:40 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:41 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:42 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:43 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:44 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:45 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:46 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:47 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:48 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:49 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:50 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:51 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:52 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:53 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:54 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:55 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:56 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:57 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:58 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:50:59 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:00 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:01 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:03 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:04 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:05 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 51 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 25 invocations
  DataStructures.StackAr.top() : 7 invocations
  DataStructures.StackAr.push(java.lang.Object) : 3 invocations
  DataStructures.StackAr.makeEmpty() : 5 invocations
  DataStructures.StackAr.topAndPop() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 91,014 errors found in 2,224,816 samples (4.09%)
StackArTesterDriver.inv.gz: 1180 false positives, out of 7581, which is 15.57%.
Preserving 420 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 609
Saving - Total: 637
Saving mutants results file

- Mutation is: 30:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@makeEmpty():64:topOfStack = -1 |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m30.dtrace.gz
Loaded invs from previous step: 637
                                                                               [6:51:08 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m30-objects.xml
Total loaded objects: 3546
[6:51:09 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:10 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:11 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:12 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:13 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:14 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:15 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:16 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:17 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:18 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:19 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:20 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:21 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:22 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:23 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:24 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:25 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:26 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:27 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:28 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:29 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:30 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:31 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:32 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:34 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:35 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:36 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:37 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:38 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:39 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:40 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:41 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:42 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:43 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:44 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:45 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:46 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:47 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:48 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:49 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:50 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:51 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:52 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:53 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:54 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:55 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:56 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:57 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:58 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:51:59 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:00 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:01 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:02 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:03 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:04 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:05 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:06 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:07 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:08 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:09 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:10 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:11 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:12 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:13 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:14 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:15 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:16 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:17 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:18 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:19 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:20 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:21 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:22 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:23 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 51 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 36 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 7,385 errors found in 2,162,359 samples (0.34%)
StackArTesterDriver.inv.gz: 316 false positives, out of 7578, which is 4.17%.
Preserving 153 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 637
Saving - Total: 637
Saving mutants results file

- Mutation is: 31:LVR:TRUE:FALSE:DataStructures.StackAr@makeEmpty():66:true |==> false
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m31.dtrace.gz
Loaded invs from previous step: 637
                                                                               [6:52:26 PM]:                                                                  Saving mutants results file

- Mutation is: 4:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@<init>(int):34:topOfStack = -1 |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
Loaded invs from previous step: 637
                                                                               [6:52:29 PM]: Checking size of experiments/StackAr_makeEmpty/setup-files/mutantLoaded objects from file: /specfuzzer/experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m4-objects.xml
Total loaded objects: 3552
[6:52:30 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:31 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:32 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:33 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:34 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:35 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:36 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:37 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:38 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:39 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:40 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:41 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:42 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:43 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:44 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:45 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:46 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:47 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:48 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:49 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:50 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:51 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:52 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:53 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:54 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:56 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:57 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:58 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:52:59 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:00 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:01 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:02 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:03 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:04 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:05 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:06 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:07 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:08 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:09 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:10 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:11 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:12 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:13 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:14 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:15 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:16 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:17 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:18 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:19 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:20 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:21 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:22 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:23 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:24 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:25 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:26 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:27 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:28 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:29 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:30 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:31 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:32 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:33 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:34 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:35 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:36 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:37 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:38 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:39 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:40 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:41 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:42 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:43 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:44 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:45 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:46 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr[6:53:47 PM]: Reading experiments/StackAr_makeEmpty/setup-files/mutants/StackAr
No return from procedure observed 46 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 26 invocations
  DataStructures.StackAr.push(java.lang.Object) : 2 invocations
  DataStructures.StackAr.top() : 3 invocations
  DataStructures.StackAr.makeEmpty() : 4 invocations
  DataStructures.StackAr.topAndPop() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 40,740 errors found in 2,222,739 samples (1.83%)
StackArTesterDriver.inv.gz: 1260 false positives, out of 7579, which is 16.62%.
Preserving 415 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 637
Saving - Total: 637
Saving mutants results file

# Filtering step took minutes: 13
# Mutation killing ability results saved in: experiments/StackAr_makeEmpty/output/StackAr-makeEmpty-specfuzzer-1-invs-by-mutants.csv

# Writing assertions to file: experiments/StackAr_makeEmpty/output/StackAr-makeEmpty-specfuzzer-1.assertions

# Filtering specs with buckets
> Mutant filter from file: experiments/StackAr_makeEmpty/output/StackAr-makeEmpty-specfuzzer-1-invs-by-mutants.csv
Unique mutants: 14
Loading assertions from: experiments/StackAr_makeEmpty/output/StackAr-makeEmpty-specfuzzer-1.assertions
Specs killing mutants: 66

> Minimizing by exploring the bit vector of each spec
Building bit vectors of size: 14
Building buckets
=====================================
Buckets: 15
Vector: [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m1.dtrace.gz
Specs:
	this.theArray != null l:  21  - Fails:  1117 Quality:  1117
Picked:
	this.theArray != null

Vector: [0. 1. 0. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m19.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m21.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m23.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m24.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m26.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m27.dtrace.gz
Specs:
	daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null) l:  67  - Fails:  314 Quality:  314
	FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this) l:  77  - Fails:  232 Quality:  232
	FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this) l:  77  - Fails:  232 Quality:  232
Picked:
	daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)

Vector: [0. 0. 1. 0. 0. 0. 0. 0. 1. 1. 1. 1. 1. 1.]
Mutants:
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m28.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m29.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m30.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m31.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
Specs:
	this.topOfStack == -1 l:  21  - Fails:  3814 Quality:  3814
	FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack> l:  101  - Fails:  2983 Quality:  2984
	FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack> l:  102  - Fails:  2944 Quality:  2945
	FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  125  - Fails:  1674 Quality:  1676
	FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  127  - Fails:  1674 Quality:  1676
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  1420 Quality:  1422
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  1160 Quality:  1162
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  1160 Quality:  1162
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  851 Quality:  853
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  851 Quality:  853
	FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  128  - Fails:  851 Quality:  853
	FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  132  - Fails:  670 Quality:  672
	FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  127  - Fails:  670 Quality:  672
	FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  125  - Fails:  670 Quality:  672
	FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  127  - Fails:  670 Quality:  672
	FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  126  - Fails:  586 Quality:  588
	FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  132  - Fails:  425 Quality:  427
	FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  124  - Fails:  381 Quality:  383
Picked:
	this.topOfStack == -1

Vector: [0. 0. 1. 0. 0. 0. 0. 0. 1. 1. 1. 0. 0. 1.]
Mutants:
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m28.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m29.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  141  - Fails:  1466 Quality:  1468
	FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  126  - Fails:  1008 Quality:  1010
	FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  125  - Fails:  1008 Quality:  1010
	FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  124  - Fails:  777 Quality:  779
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  142  - Fails:  596 Quality:  598
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  142  - Fails:  596 Quality:  598
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  148  - Fails:  463 Quality:  465
	this.topOfStack <= daikon.Quant.size(this.theArray)-1 l:  53  - Fails:  250 Quality:  250
Picked:
	this.topOfStack <= daikon.Quant.size(this.theArray)-1
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 1.]
Mutants:
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  480 Quality:  482
	FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  132  - Fails:  480 Quality:  482
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  480 Quality:  482
	FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  132  - Fails:  454 Quality:  456
Picked:
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 1. 0. 0. 0. 0. 0. 1. 0. 1. 0. 0. 1.]
Mutants:
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m28.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  130  - Fails:  538 Quality:  540
Picked:
	FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 0. 0. 1. 0. 0. 1. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m23.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m27.dtrace.gz
Specs:
	daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.theArray, \new(this.topOfStack))) , this.theArray ) l:  114  - Fails:  36 Quality:  36
Picked:
	daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.theArray, \new(this.topOfStack))) , this.theArray )

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 1. 1. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m28.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m29.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  914 Quality:  916
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  112  - Fails:  914 Quality:  916
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  914 Quality:  916
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  914 Quality:  916
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  914 Quality:  916
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  143  - Fails:  914 Quality:  916
	this.topOfStack <= \old(this.topOfStack) l:  40  - Fails:  914 Quality:  914
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  143  - Fails:  870 Quality:  872
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  488 Quality:  490
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  488 Quality:  490
Picked:
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 1. 1. 0. 1. 1. 0.]
Mutants:
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m28.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m29.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m30.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m31.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  1384 Quality:  1386
	FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  126  - Fails:  1384 Quality:  1386
	FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  130  - Fails:  1194 Quality:  1196
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  144  - Fails:  398 Quality:  400
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  145  - Fails:  398 Quality:  400
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  148  - Fails:  398 Quality:  400
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  148  - Fails:  354 Quality:  356
	FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  125  - Fails:  190 Quality:  192
	FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  125  - Fails:  132 Quality:  134
Picked:
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 1. 1. 0.]
Mutants:
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m28.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m30.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m31.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  782 Quality:  784
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  782 Quality:  784
Picked:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m28.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  130  - Fails:  58 Quality:  60
Picked:
	FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 1. 1. 1. 1. 1. 0.]
Mutants:
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m28.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m29.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m30.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m31.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  260 Quality:  262
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m29.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  130  - Fails:  426 Quality:  428
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  426 Quality:  428
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  426 Quality:  428
	FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  125  - Fails:  44 Quality:  46
	FuzzedInvariant ( (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  131  - Fails:  44 Quality:  46
Picked:
	FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 1. 0. 0. 0.]
Mutants:
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m29.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack> l:  102  - Fails:  124 Quality:  125
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 1. 1. 0.]
Mutants:
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m29.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m30.dtrace.gz
	experiments/StackAr_makeEmpty/setup-files/mutants/StackArTesterDriver-m31.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  143  - Fails:  74 Quality:  76
Picked:
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>

daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.theArray, \new(this.topOfStack))) , this.theArray )
Buckets: 15
Specs: 15
Saved in file: experiments/StackAr_makeEmpty/output/StackAr-makeEmpty-specfuzzer-1-buckets.assertions

