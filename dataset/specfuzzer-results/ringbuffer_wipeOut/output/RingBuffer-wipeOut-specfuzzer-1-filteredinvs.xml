<object-stream>
  <set>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % 1 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &lt; -1) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 &lt; 0) ) holds for: &lt;return , return , size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &gt;= 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &lt; 0) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * 1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 &gt;= -1) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * 1 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % 1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: orig(this.start)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 0 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt;= 1) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 &lt; -1) ) holds for: &lt;return , return , size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * 1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: orig(this.free)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt; 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 &gt; 1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 = -1) ) holds for: &lt;return , return , size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 = 1) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = Integer_Variable_1) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: n</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.start</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % 1 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt;= 0) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = -1) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &gt; 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * -1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + 1 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.free) , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = Integer_Variable_1) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: this.capacity_</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &gt; Integer_Variable_1) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;n , n , n&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;return , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / -1 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.capacity_</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % 1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &lt; Integer_Variable_1) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: n</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &lt;= -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 &lt;= -1) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.capacity_, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= #(RingBuffer.data) ) holds for: &lt;orig(this), return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: this.free</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.free) , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &gt;= Integer_Variable_1) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= #(RingBuffer.data) ) holds for: &lt;this, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= #(RingBuffer.data) ) holds for: &lt;orig(this), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: size(this.data[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 = 1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 &gt;= 0) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != -1) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 = -1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 = 1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % 1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 0 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 &gt; -1) ) holds for: &lt;return , return , size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: this.capacity_</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 &gt;= -1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &lt; 0) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt;= 0) ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: this.start</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.free) , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt;= 1) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt; Integer_Variable_1) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - 1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: return</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / 1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 0 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.capacity_, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 = 1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt;= Integer_Variable_1) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 &gt;= 0) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % 1 ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt; 0) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;n , n , n&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &lt;= 0) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / -1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 0 ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &lt;= 0) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.free) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * 1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.free)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &gt; 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 &gt;= -1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: return</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; -1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 != -1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 &lt;= -1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % -1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; -1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt; Integer_Variable_1) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: size(this.data[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 0 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * 1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) iff (Integer_Variable_1 != -1) ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * -1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 &lt;= -1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &gt; Integer_Variable_1) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: this.free</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; -1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.capacity_, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 0 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.capacity_, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= #(RingBuffer.data) ) holds for: &lt;orig(this), this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 &gt;= -1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( some n : RingBuffer.data : n = null ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: orig(this.free)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt; Integer_Variable_1) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * -1 ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;n , n , n&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / 1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.free) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; #(RingBuffer.data) ) holds for: &lt;this, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt;= Integer_Variable_1) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt; Integer_Variable_1) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &lt;= 0) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt;= 0) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 0 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 0 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % 1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt; 1) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 &lt;= -1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 &lt;= -1) ) holds for: &lt;return , return , size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: this.start</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: this.free</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / -1 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; -1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: orig(this.start)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != Integer_Variable_1) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.capacity_, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = Integer_Variable_1) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 &lt;= 0) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * -1 ) holds for: &lt;this.capacity_, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * -1 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 = -1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 0 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &lt; -1) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % 1 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;n , n , n&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 != -1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt;= Integer_Variable_1) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &gt;= Integer_Variable_1) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.free) , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.free) , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt; -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 != 0) ) holds for: &lt;return , return , size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 &gt;= 0) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / -1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + 0 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt; 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 &gt; 1) ) holds for: &lt;return , return , size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 &gt;= 0) ) holds for: &lt;return , return , size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % 1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 &lt; 1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 = 0) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: n</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;n , n , n&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = 0) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt;= Integer_Variable_1) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * 1 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / -1 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;return , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; -1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt; 0) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % -1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 &lt; -1) ) holds for: &lt;return , return , size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt;= 1) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 &gt; -1) ) holds for: &lt;return , return , size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt; Integer_Variable_1) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * -1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % -1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;return , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.free) , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 &lt; 0) ) holds for: &lt;return , return , size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt; 1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.free) , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.free) , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &lt; Integer_Variable_1) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 &lt; 1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(size(this.data[..]))-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt; 0) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;n , n , n&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 &lt; 0) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % 1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 != 1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &lt; 0) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.free</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 &gt; 1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= #(RingBuffer.data) ) holds for: &lt;orig(this), this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - 1 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.capacity_, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 != 1) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;return , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: this.free</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / -1 ) holds for: &lt;this.capacity_, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt; 0) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 != 0) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 = 1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &lt; Integer_Variable_1) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &lt; 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &lt; 0) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: return</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 &gt; -1) ) holds for: &lt;return , return , size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.capacity_</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % 1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * 1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt; Integer_Variable_1) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 = 1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 0 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt;= Integer_Variable_1) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &gt;= Integer_Variable_1) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 1) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 0 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * 1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; #(RingBuffer.data) ) holds for: &lt;orig(this), return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= 0) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.free) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / -1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt; 0) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 0 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % -1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.free) , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * 1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 = -1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 &lt; 0) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;n , n , n&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.free) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 != 0) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= #(RingBuffer.data) ) holds for: &lt;this, this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt;= Integer_Variable_1) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % 1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != -1) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % 1 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - 1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt;= -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &lt; 0) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.capacity_</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt;= -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt; -1) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 != 1) ) holds for: &lt;return , return , size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &lt;= 1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: &lt;orig(this), return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; -1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: &lt;orig(this), this.start&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 &lt;= 0) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &lt;= 0) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt; Integer_Variable_1) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt; 1) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt; Integer_Variable_1) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 != 1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 != 0) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 &gt;= 0) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &lt;= -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = Integer_Variable_1) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * -1 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt; 0) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &lt; Integer_Variable_1) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; #(RingBuffer.data) ) holds for: &lt;orig(this), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % 1 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - 1 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * -1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * -1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % 1 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; #(RingBuffer.data) ) holds for: &lt;orig(this), return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &gt;= Integer_Variable_1) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &gt;= 1) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * 1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.free) , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.capacity_, this.start&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &gt;= 0) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.start</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;n , n , n&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &lt;= 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;return , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( some n : RingBuffer.data : n = null ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;return , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &gt; -1) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 &gt;= 0) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 = 0) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 0 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % -1 ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 &lt;= 0) ) holds for: &lt;return , return , size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.capacity_, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: size(this.data[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= 0) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / 1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) iff (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: return</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; -1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= #(RingBuffer.data) ) holds for: &lt;orig(this), return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: size(this.data[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt; 0) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &gt;= -1) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &lt; 1) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &lt;= 0) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &gt; Integer_Variable_1) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 &lt; 0) ) holds for: &lt;return , return , size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = -1) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 &gt; 0) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt;= 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: orig(this.free)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;n , n , n&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * -1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % -1 ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % -1 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt;= 0) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: orig(size(this.data[..]))-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: &lt;orig(this), this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 &gt; -1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 = -1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.free) , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &lt; -1) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * -1 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt; 0) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.free</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - 1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: orig(size(this.data[..]))-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: n</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &lt; Integer_Variable_1) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % -1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= -1 ) holds for: return</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % 1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt;= 0) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt;= Integer_Variable_1) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 0 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= #(RingBuffer.data) ) holds for: &lt;this, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; -1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / 1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / -1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &gt; 0) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &gt; 0) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = 0) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != -1) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &gt;= -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;return , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * 1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 0 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = 1 ) holds for: this.start</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt;= 0) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; -1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % 1 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &gt;= -1) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt;= -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt; Integer_Variable_1) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: return</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: this.start</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &lt; 0) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt;= 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt; -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: return</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 &gt;= 0) ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= #(RingBuffer.data) ) holds for: &lt;orig(this), this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt; Integer_Variable_1) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;n , n , n&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % 1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 = -1) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % 1 ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; -1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= 0) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) iff (Integer_Variable_1 != -1) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &gt;= 0) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 != 1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 1 ) holds for: return</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.start</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: size(this.data[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt; Integer_Variable_1) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: &lt;orig(this), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 0 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &gt; Integer_Variable_1) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;return , return , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 &lt;= -1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * -1 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + 0 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 &gt; 0) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; #(RingBuffer.data) ) holds for: &lt;orig(this), this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 0 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = 1 ) holds for: size(this.data[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * 1 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.free) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt; 0) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 = -1) ) holds for: &lt;return , return , size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &lt;= -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &lt; 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != Integer_Variable_1) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: &lt;this, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 &gt;= 0) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.free) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 0 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt;= 0) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &gt;= -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &gt;= 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt;= Integer_Variable_1) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 &gt; 1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 &lt;= 1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt;= Integer_Variable_1) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: n</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 &gt;= 0) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 0 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.free) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % 1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 = -1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt; Integer_Variable_1) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= #(RingBuffer.data) ) holds for: &lt;this, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / -1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.free) , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &lt; -1) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt;= 1) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 &gt;= -1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;n , n , n&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % -1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;n , n , n&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 0 ) holds for: &lt;orig(this.free), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt;= Integer_Variable_1) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 &lt; 0) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.capacity_, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 &gt; 1) ) holds for: &lt;return , return , size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 1 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 &gt; -1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % 1 ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &gt; 0) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: size(this.data[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;n , n , n&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: this.start</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: &lt;orig(this), this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= #(RingBuffer.data) ) holds for: &lt;this, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt; 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % -1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt; -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 &lt;= 0) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.free) , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.start) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.free) , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.free) , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= #(RingBuffer.data) ) holds for: &lt;orig(this), this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: size(this.data[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.data[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 &gt;= 0) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / 1 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != -1) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = Integer_Variable_1) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;return , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 0 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= 0) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * -1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % -1 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; -1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &gt;= -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = 0) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 &lt;= 1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: &lt;this, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % 1 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt;= 0) ) holds for: &lt;this.capacity_, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % 1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.free) , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; -1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 = -1) ) holds for: &lt;return , return , size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt;= 0) ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 1 ) holds for: this.start</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 != 1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.free) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 &gt;= 0) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != Integer_Variable_1) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt; 1) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &gt; Integer_Variable_1) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.start)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 &gt; 0) ) holds for: &lt;return , return , size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: this.capacity_</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: orig(this.free)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; -1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / -1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 &gt;= 0) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 = 1) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.free) , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 xor Boolean_Variable_1) xor (Integer_Variable_0 &gt; -1) ) holds for: &lt;return , return , size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 1 ) holds for: &lt;this.free, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / -1 ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + 0 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt; 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / -1 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / 1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &gt;= Integer_Variable_1) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = Integer_Variable_1) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 1 ) holds for: this.free</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * 1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: orig(this.start)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(this.free)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt; Integer_Variable_1) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 0 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) iff (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: n</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + 0 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: return</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: orig(this.start)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &gt; 1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;return , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 1 ) holds for: this.capacity_</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 0 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &lt; 0) ) holds for: &lt;return, size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 &gt;= 0) ) holds for: &lt;this.capacity_, this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.free) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: this.capacity_</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.start , this.start&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 &lt; 0) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 &gt; Integer_Variable_1) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &lt;= 0) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != Integer_Variable_1) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.free</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt;= Integer_Variable_1) ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != Integer_Variable_1) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / -1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % -1 ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.free) , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % 1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.start, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &gt;= Integer_Variable_1) ) holds for: &lt;this.start , this.start , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt;= 0) ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 &gt; 1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.capacity_, this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.free, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 &lt; 1) ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 &gt; 1) ) holds for: &lt;this.capacity_ , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % -1 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.capacity_, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.free) , orig(this.free) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 &gt;= 0) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , orig(this.free) , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.start) , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.start), this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.start, this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.start , this.start , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 = -1) ) holds for: &lt;this.start , return , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: &lt;this.free, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.free , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , orig(this.start) , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != Integer_Variable_1) ) holds for: &lt;this.start , this.free , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 &gt; -1) ) holds for: &lt;return , return , size(this.data[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.free , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.free , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.start , this.free , this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , orig(this.start) , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.free , return , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(this.start)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 1 ) holds for: &lt;this.capacity_, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.start , this.start , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.start , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.capacity_ , this.capacity_ , return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 &lt;= 1) ) holds for: &lt;this.start, return&gt;</string>
    <string>FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 &gt; -1) ) holds for: &lt;return, size(this.data[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.capacity_ , this.start&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.start , this.free , orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != 1) ) holds for: &lt;this.free, return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.start , this.free , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 1 ) holds for: size(this.data[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.free , this.free , return&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.free, orig(this.start)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;n , n , n&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.start, orig(this.free)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.free) , this.capacity_ , this.capacity_&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;this.start, this.free&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.free) , this.capacity_ , this.capacity_&gt;</string>
  </set>
</object-stream>