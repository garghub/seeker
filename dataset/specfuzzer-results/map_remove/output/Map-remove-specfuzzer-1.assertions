===========================================================================
examples.Map:::OBJECT
this.keys != null
this.data != null
===========================================================================
examples.Map.remove(java.lang.Object):::ENTER
FuzzedInvariant ( all n : Map.data : n != null ) holds for: this
FuzzedInvariant ( no n : Map.data : n = null ) holds for: this
daikon.Quant.eltsNotEqual(this.data, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.data), "java.lang.String")
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.data), new String[] { "java.lang.String" }) || daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.data), new String[] { "java.lang.String", "java.lang.String" })
k != null
k.getClass().getName() == java.lang.String.class.getName()
daikon.Quant.size(this.keys) == 1 || daikon.Quant.size(this.keys) == 2
daikon.Quant.size(this.data) == 1 || daikon.Quant.size(this.data) == 2
daikon.Quant.memberOf(k.getClass().getName() , daikon.Quant.typeArray(this.keys) )
daikon.Quant.memberOf(k.getClass().getName() , daikon.Quant.typeArray(this.data) )
===========================================================================
examples.Map.remove(java.lang.Object):::EXIT
this.keys == \old(this.keys)
this.data == \old(this.data)
daikon.Quant.size(this.keys) == \old(daikon.Quant.size(this.keys))-1
daikon.Quant.size(this.data) == \old(daikon.Quant.size(this.data))-1
daikon.Quant.eltsNotEqual(this.data, null)
daikon.Quant.eltsNotEqual(this.data, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.data), "java.lang.String")
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.data), new String[] {  }) || daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.data), new String[] { "java.lang.String" })
\result == 0 || \result == 1
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.keys[])
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: size(this.keys[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.keys[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.keys[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.keys[])-1
FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: size(this.keys[])-1
FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: size(this.keys[])-1
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: size(this.keys[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.keys[])-1
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(size(this.keys[]))
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(size(this.keys[]))
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: orig(size(this.keys[]))
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: orig(size(this.keys[]))
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(size(this.keys[]))
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: orig(size(this.keys[]))
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(size(this.data[]))
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(size(this.data[]))
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: orig(size(this.data[]))
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: orig(size(this.data[]))
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(size(this.data[]))
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: orig(size(this.data[]))
FuzzedInvariant ( Integer_Variable_0 <= #(Map.data) ) holds for: <orig(this), return>
FuzzedInvariant ( Integer_Variable_0 <= #(Map.keys) ) holds for: <orig(this), return>
