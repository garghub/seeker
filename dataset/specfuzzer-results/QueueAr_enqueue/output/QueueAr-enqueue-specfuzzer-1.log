> SpecFuzzer
# Inference step (Daikon + Fuzzed Specs)
Daikon version 5.8.2, released May 4, 2020; http://plse.cs.washington.edu/daikon.

Loading invariants from file: invs_file.xml
Loaded: 0

Fuzzing specs:
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 != 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= -1)
Fuzzed spec: (Integer_Variable_0 > -1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 = -1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 1) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 1) xor (Integer_Variable_1 >= 0)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 1
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) implies (Integer_Variable_1 <= 0)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 = 0)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) xor (Integer_Variable_1 < 1)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 >= 1)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 0
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) or (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= 0) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= 1)
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 0) xor (Integer_Variable_1 = 0)
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 <= 1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 <= 0)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + -1
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: (Integer_Variable_0 != -1) iff (Integer_Variable_1 = 1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= 1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 1
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 != 1)
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 >= 0)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > -1) or (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 > -1)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 < -1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0)
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * -1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 <= -1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 0
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= 1) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0)
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 1) iff (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 0
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > 0)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 0) xor (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % -1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 != 0)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * -1
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) xor (Integer_Variable_1 < -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != 1) or (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) xor (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 0) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) iff (Integer_Variable_1 >= 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 1
Fuzzed spec: (Integer_Variable_0 >= 0) xor (Integer_Variable_1 >= 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % -1
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 = 1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 != -1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = 1) or (Integer_Variable_1 = 1)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) xor (Integer_Variable_1 >= 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 > Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 <= 1)
Fuzzed spec: (Integer_Variable_0 >= 0) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 < 1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 < 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1)
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > -1)
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != 1) xor (Integer_Variable_1 > 0)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 <= 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 != 0)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != -1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 1
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0)
Fuzzed spec: (Integer_Variable_0 = -1) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 = -1)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 1)
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= #(QueueAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 < -1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 0
Fuzzed spec: (Integer_Variable_0 = 1) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 >= #(QueueAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= 1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= 0)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + -1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) iff (Integer_Variable_1 < 0)
Fuzzed spec: no n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = -1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 != 0)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) xor (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 != 1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= 1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 = 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) xor (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 > 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 <= 1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != -1) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 = 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= -1) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 <= 1)
Unique fuzzed invariants: 429 (2000)
Unary: 24 - Binary: 155 - Ternary: 250 - Discarded: 39
Reading declaration files Processing trace data; reading 1 dtrace file:
Loaded objects from file: /specfuzzer/experiments/QueueAr_enqueue/setup-files/QueueArTesterDriver-objects.xml
Total loaded objects: 2835

No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
DataStructures.Overflow:::OBJECT
===========================================================================
DataStructures.Overflow.Overflow():::EXIT
===========================================================================
DataStructures.QueueAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.currentSize
this.currentSize >= 0
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.front
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.front
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.front
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.front
this.front >= 0
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.back
this.back >= -1
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
this.currentSize <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.back>
this.front <= size(this.theArray[])
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.QueueAr(int):::ENTER
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: capacity
capacity >= 0
===========================================================================
DataStructures.QueueAr.QueueAr(int):::EXIT
this.currentSize == this.front
this.back == size(this.theArray[])-1
orig(capacity) == size(this.theArray[])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(capacity)>
this.currentSize <= orig(capacity)
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.currentSize one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize <= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.front, orig(this.front)>
this.front >= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
return.getClass().getName() in orig(this.theArray[].getClass().getName())
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
orig(this.currentSize) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.front), size(this.theArray[])>
orig(this.front) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
this.currentSize <= this.front
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize <= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.front)>
this.currentSize <= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.front), this.front>
this.front >= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
orig(this.currentSize) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.front), size(this.theArray[])>
orig(this.front) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER
this.currentSize one of { 0, 1, 2 }
this.front one of { 0, 1, 2 }
this.back >= 0
this.theArray[this.currentSize] == null
this.theArray.getClass().getName() != x.getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>
this.currentSize <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, this.back>
this.front <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
orig(this.theArray[post(this.back)]) == orig(this.theArray[this.currentSize])
this.currentSize one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize
this.front one of { 0, 1, 2 }
this.back one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.back)
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.back)
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.back)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
this.front % this.currentSize == 0
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize > orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, this.back>
this.front <= this.back
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= size(this.theArray[])-1
this.back >= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
orig(this.currentSize) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
orig(this.back) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
this.currentSize + this.front - this.back - 1 == 0
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
this.front - this.back + orig(this.currentSize) == 0
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.getFront():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <this, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
===========================================================================
DataStructures.QueueAr.getFront():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isEmpty():::ENTER
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <this, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
(this.currentSize == 0)  <==>  (return == true)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (this.back >= -1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize one of { 1, 2, 3 })  <==>  (return == false)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.back one of { 0, 1, 2 })
(this.currentSize one of { 1, 2, 3 })  ==>  (this.currentSize + this.front - this.back - 1 == 0)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front <= size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front <= this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front one of { 0, 1, 2 })
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="return == true"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
return == true
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
this.currentSize <= this.front
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="not(return == true)"
this.currentSize one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize
this.front one of { 0, 1, 2 }
this.back one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
return == false
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, this.back>
this.front <= this.back
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
this.currentSize + this.front - this.back - 1 == 0
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isFull():::ENTER
this.currentSize one of { 0, 1, 2 }
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <this, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
===========================================================================
DataStructures.QueueAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
(return == true)  <==>  (this.currentSize == size(this.theArray[]))
(return == true)  ==>  (this.back == size(this.theArray[])-1)
(return == true)  ==>  (this.currentSize == this.front)
(return == true)  ==>  (this.theArray[] == [])
(return == true)  ==>  (this.theArray[].getClass().getName() == [])
(this.back >= 0)  <==>  (return == false)
(this.back >= 0)  <==>  (this.currentSize <= size(this.theArray[])-1)
(this.back >= 0)  <==>  (this.front <= size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this))
(this.back >= 0)  ==>  (this.currentSize one of { 0, 1, 2 })
(this.back >= 0)  ==>  (this.front one of { 0, 1, 2 })
this.currentSize one of { 0, 1, 2 }
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="return == true"
this.currentSize == this.front
this.currentSize == orig(this.front)
this.currentSize == size(this.theArray[])
this.currentSize == orig(size(this.theArray[]))
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
this.theArray[] == []
this.theArray[].getClass().getName() == []
return == true
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="not(return == true)"
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
this.back >= 0
return == false
FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
this.currentSize <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
===========================================================================
DataStructures.QueueAr.makeEmpty():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize <= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.front)>
this.currentSize <= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), this.back>
this.back >= orig(this.back)
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
orig(this.currentSize) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.front), size(this.theArray[])>
orig(this.front) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
Exiting Daikon.

# Filtering step

- Mutation is: 1:STD:<ASSIGN>:<NO-OP>:DataStructures.QueueAr@<init>(int):32:theArray = new Object[capacity] |==> <NO-OP>
Checking invs on mutant: experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m1.dtrace.gz
Loaded invs from previous step: 0
                                                                               [7:51:07 AM]:                                                                  
No return from procedure observed 241 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 241 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 0 errors found in 0 samples (NaN%)
QueueArTesterDriver.inv.gz: 0 false positives, out of 0, which is NaN%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 0
Saving mutants results file

- Mutation is: 10:AOR:-(int,int):%(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length % 1
Checking invs on mutant: experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
Loaded invs from previous step: 0
                                                                               [7:51:08 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m10-objects.xml
Total loaded objects: 2835
[7:51:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:51:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:52:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:53:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:54:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:55:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe
No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 10,517 errors found in 6,422,563 samples (0.16%)
QueueArTesterDriver.inv.gz: 1480 false positives, out of 23677, which is 6.25%.
Preserving 385 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 385
Saving mutants results file

- Mutation is: 11:AOR:-(int,int):*(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length QueueArTesterDriver.inv.gz base-invs-by-mutants.csv base_invs_file.xml experiments hs_err_pid1983241.log hs_err_pid51463.log invs-by-mutants.csv invs.csv invs_file.xml lib literals mutants scripts testers 1
Checking invs on mutant: experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m11.dtrace.gz
Loaded invs from previous step: 385
                                                                               [7:55:59 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m11-objects.xml
Total loaded objects: 2002
[7:56:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:56:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:57:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe
No return from procedure observed 107 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 99 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 101,640 errors found in 3,763,655 samples (2.70%)
QueueArTesterDriver.inv.gz: 1486 false positives, out of 23677, which is 6.28%.
Preserving 361 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 385
Saving - Total: 436
Saving mutants results file

- Mutation is: 12:AOR:-(int,int):+(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length + 1
Checking invs on mutant: experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m12.dtrace.gz
Loaded invs from previous step: 436
                                                                               [7:58:47 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m12-objects.xml
Total loaded objects: 2002
[7:58:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:58:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[7:59:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:00:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe
No return from procedure observed 107 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 99 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 99,562 errors found in 3,763,655 samples (2.65%)
QueueArTesterDriver.inv.gz: 1278 false positives, out of 23677, which is 5.40%.
Preserving 315 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 436
Saving - Total: 552
Saving mutants results file

- Mutation is: 13:AOR:-(int,int):/(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length / 1
Checking invs on mutant: experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m13.dtrace.gz
Loaded invs from previous step: 552
                                                                               [8:01:34 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m13-objects.xml
Total loaded objects: 2002
[8:01:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:01:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:02:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:03:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe
No return from procedure observed 107 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 99 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 101,640 errors found in 3,763,655 samples (2.70%)
QueueArTesterDriver.inv.gz: 1486 false positives, out of 23677, which is 6.28%.
                                                                               Preserving 361 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 552
Saving - Total: 552
Saving mutants results file

- Mutation is: 14:STD:<ASSIGN>:<NO-OP>:DataStructures.QueueAr@<init>(int):35:back = theArray.length - 1 |==> <NO-OP>
Checking invs on mutant: experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
Loaded invs from previous step: 552
                                                                               [8:04:23 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m14-objects.xml
Total loaded objects: 2835
[8:04:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:04:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:05:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:06:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:07:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:08:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe
No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 10,517 errors found in 6,422,563 samples (0.16%)
QueueArTesterDriver.inv.gz: 1480 false positives, out of 23677, which is 6.25%.
Preserving 385 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 552
Saving - Total: 552
Saving mutants results file

- Mutation is: 2:LVR:0:POS:DataStructures.QueueAr@<init>(int):33:0 |==> 1
Checking invs on mutant: experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
Loaded invs from previous step: 552
                                                                               [8:09:11 AM]:                                                                  Loaded objects from file: /specfuzzer/experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m2-objects.xml
Total loaded objects: 2848
[8:09:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:09:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:10:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:11:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:12:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:13:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe
No return from procedure observed 21 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 9 invocations
  DataStructures.QueueAr.getFront() : 1 invocation
  DataStructures.QueueAr.dequeue() : 2 invocations
  DataStructures.QueueAr.dequeueAll() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 44,094 errors found in 6,581,868 samples (0.67%)
QueueArTesterDriver.inv.gz: 1071 false positives, out of 23677, which is 4.52%.
Preserving 402 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 552
Saving - Total: 921
Saving mutants results file

- Mutation is: 3:LVR:0:NEG:DataStructures.QueueAr@<init>(int):33:0 |==> -1
Checking invs on mutant: experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
Loaded invs from previous step: 921
                                                                               [8:14:03 AM]:                                                                  [8:14:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTeLoaded objects from file: /specfuzzer/experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m3-objects.xml
Total loaded objects: 447
[8:14:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:14:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:15:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:16:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:17:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:18:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:19:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:20:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:21:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:22:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:23:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:24:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:25:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:26:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:27:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:28:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:29:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:30:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:31:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:32:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:33:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:34:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:35:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:36:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:37:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:38:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:39:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:40:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:41:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:42:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:43:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:44:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:45:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:46:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:47:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:48:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:49:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:50:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:51:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:52:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:53:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:54:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:55:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:56:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:57:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:58:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[8:59:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:00:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:01:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:02:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:03:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:04:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:05:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:06:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:07:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:08:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:09:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:10:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:11:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:12:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:13:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:14:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:15:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:16:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:17:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:56 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:18:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:42 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:45 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:46 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:47 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:48 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:49 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:50 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:51 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:52 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:53 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:54 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:55 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:57 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:58 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:19:59 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:00 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:01 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:02 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:03 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:04 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:05 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:06 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:07 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:08 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:09 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:10 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:11 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:12 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:13 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:14 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:15 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:16 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:17 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:18 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:19 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:20 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:21 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:22 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:23 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:24 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:25 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:26 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:27 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:28 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:29 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:30 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:31 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:32 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:33 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:34 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:35 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:36 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:37 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:38 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:39 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:40 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:41 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:43 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe[9:20:44 AM]: Reading experiments/QueueAr_enqueue/setup-files/mutants/QueueArTe
No return from procedure observed 5 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 3 invocations
  DataStructures.QueueAr.dequeueAll() : 1 invocation
  DataStructures.QueueAr.dequeue() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 11,078,796 errors found in 89,756,702 samples (12.34%)
QueueArTesterDriver.inv.gz: 2976 false positives, out of 23669, which is 12.57%.
                                                                               Preserving 880 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 921
Saving - Total: 1630
Saving mutants results file

Filtering step finished due to timeout: 5441
# Filtering step took minutes: 90
# Mutation killing ability results saved in: experiments/QueueAr_enqueue/output/QueueAr-enqueue-specfuzzer-1-invs-by-mutants.csv

# Writing assertions to file: experiments/QueueAr_enqueue/output/QueueAr-enqueue-specfuzzer-1.assertions

# Filtering specs with buckets
> Mutant filter from file: experiments/QueueAr_enqueue/output/QueueAr-enqueue-specfuzzer-1-invs-by-mutants.csv
Unique mutants: 7
Loading assertions from: experiments/QueueAr_enqueue/output/QueueAr-enqueue-specfuzzer-1.assertions
Specs killing mutants: 263

> Minimizing by exploring the bit vector of each spec
Building bit vectors of size: 7
Building buckets
=====================================
Buckets: 9
Vector: [1. 0. 0. 0. 1. 1. 1.]
Mutants:
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)> l:  141  - Fails:  754 Quality:  757
	FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  146  - Fails:  670 Quality:  673
	FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  146  - Fails:  654 Quality:  657
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back> l:  136  - Fails:  496 Quality:  499
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)> l:  172  - Fails:  496 Quality:  499
	FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)> l:  168  - Fails:  272 Quality:  275
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)> l:  169  - Fails:  92 Quality:  95
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)> l:  173  - Fails:  84 Quality:  87
Picked:
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>

Vector: [1. 0. 0. 0. 1. 0. 1.]
Mutants:
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)> l:  142  - Fails:  518 Quality:  521
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)> l:  148  - Fails:  74 Quality:  77
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)> l:  141  - Fails:  74 Quality:  77
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.back)> l:  142  - Fails:  74 Quality:  77
Picked:
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>

Vector: [1. 0. 0. 0. 1. 0. 0.]
Mutants:
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back> l:  136  - Fails:  60 Quality:  62
	FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)> l:  157  - Fails:  44 Quality:  47
	FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)> l:  164  - Fails:  44 Quality:  47
	\old(daikon.Quant.getElement_Object(this.theArray, \new(this.back))) == \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize)) l:  141  - Fails:  44 Quality:  44
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)> l:  168  - Fails:  36 Quality:  39
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)> l:  173  - Fails:  36 Quality:  39
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.back)> l:  135  - Fails:  36 Quality:  38
	this.back == 0 || this.back == 1 || this.back == 2 l:  50  - Fails:  8 Quality:  8
Picked:
	\old(daikon.Quant.getElement_Object(this.theArray, \new(this.back))) == \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize))
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>

Vector: [1. 0. 0. 0. 1. 1. 0.]
Mutants:
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)> l:  185  - Fails:  280 Quality:  283
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.back)> l:  147  - Fails:  200 Quality:  203
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)> l:  153  - Fails:  196 Quality:  199
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)> l:  154  - Fails:  196 Quality:  199
Picked:
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>

Vector: [1. 1. 1. 1. 1. 0. 0.]
Mutants:
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m11.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m12.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m13.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
Specs:
	this.back <= daikon.Quant.size(this.theArray)-1 l:  47  - Fails:  3835 Quality:  3835
Picked:
	this.back <= daikon.Quant.size(this.theArray)-1

Vector: [0. 1. 1. 1. 0. 0. 1.]
Mutants:
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m11.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m12.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m13.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)> l:  172  - Fails:  728 Quality:  731
Picked:
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>

Vector: [0. 0. 0. 0. 0. 1. 1.]
Mutants:
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  167  - Fails:  102431 Quality:  102434
	this.front == 0 || this.front == 1 || this.front == 2 l:  53  - Fails:  11113 Quality:  11113
	this.currentSize == 0 l:  21  - Fails:  758 Quality:  758
	FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  150  - Fails:  236 Quality:  239
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)> l:  170  - Fails:  230 Quality:  233
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)> l:  168  - Fails:  230 Quality:  233
	FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)> l:  155  - Fails:  228 Quality:  231
	FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)> l:  158  - Fails:  208 Quality:  211
	FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)> l:  158  - Fails:  208 Quality:  211
	FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  146  - Fails:  62 Quality:  65
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)> l:  142  - Fails:  62 Quality:  65
	FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  146  - Fails:  62 Quality:  65
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back> l:  135  - Fails:  62 Quality:  65
	FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  145  - Fails:  60 Quality:  63
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back> l:  136  - Fails:  60 Quality:  63
	FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)> l:  159  - Fails:  48 Quality:  51
	FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)> l:  163  - Fails:  48 Quality:  51
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.currentSize)> l:  137  - Fails:  48 Quality:  50
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.currentSize)> l:  143  - Fails:  48 Quality:  50
	this.front % this.currentSize == 0 l:  34  - Fails:  46 Quality:  46
	this.currentSize == 1 || this.currentSize == 2 || this.currentSize == 3 l:  71  - Fails:  44 Quality:  44
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  162  - Fails:  24 Quality:  27
	FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  147  - Fails:  24 Quality:  27
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back> l:  99  - Fails:  24 Quality:  26
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back> l:  98  - Fails:  24 Quality:  26
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back> l:  99  - Fails:  24 Quality:  26
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, this.back> l:  129  - Fails:  24 Quality:  26
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back> l:  99  - Fails:  24 Quality:  26
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, this.back> l:  99  - Fails:  24 Quality:  26
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back> l:  95  - Fails:  24 Quality:  26
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, this.back> l:  99  - Fails:  24 Quality:  26
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, this.back> l:  99  - Fails:  24 Quality:  26
	this.front <= this.back l:  23  - Fails:  24 Quality:  24
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  166  - Fails:  16 Quality:  19
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)> l:  173  - Fails:  16 Quality:  19
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)> l:  162  - Fails:  10 Quality:  13
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)> l:  167  - Fails:  10 Quality:  13
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)> l:  166  - Fails:  10 Quality:  13
	FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back> l:  109  - Fails:  10 Quality:  12
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back> l:  130  - Fails:  10 Quality:  12
Picked:
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>

Vector: [0. 0. 0. 0. 0. 1. 0.]
Mutants:
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back> l:  105  - Fails:  1101 Quality:  1103
	FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back> l:  119  - Fails:  980 Quality:  982
	FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  146  - Fails:  954 Quality:  957
	FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  150  - Fails:  307 Quality:  310
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)> l:  142  - Fails:  236 Quality:  239
	FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)> l:  152  - Fails:  206 Quality:  209
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)> l:  180  - Fails:  206 Quality:  209
	FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)> l:  152  - Fails:  206 Quality:  209
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)> l:  175  - Fails:  206 Quality:  209
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)> l:  177  - Fails:  206 Quality:  209
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)> l:  175  - Fails:  206 Quality:  209
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)> l:  180  - Fails:  206 Quality:  209
	this.back >= \old(this.currentSize) l:  35  - Fails:  206 Quality:  206
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back> l:  99  - Fails:  190 Quality:  192
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)> l:  178  - Fails:  188 Quality:  191
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)> l:  174  - Fails:  188 Quality:  191
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)> l:  179  - Fails:  188 Quality:  191
	FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back> l:  113  - Fails:  175 Quality:  177
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.back)> l:  112  - Fails:  150 Quality:  152
	FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back> l:  119  - Fails:  68 Quality:  70
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  167  - Fails:  36 Quality:  39
	this.currentSize <= daikon.Quant.size(this.theArray) l:  52  - Fails:  38 Quality:  38
	FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  146  - Fails:  22 Quality:  25
	FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  146  - Fails:  22 Quality:  25
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)> l:  174  - Fails:  18 Quality:  21
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)> l:  173  - Fails:  18 Quality:  21
	FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)> l:  156  - Fails:  16 Quality:  19
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.back)> l:  135  - Fails:  14 Quality:  17
	FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)> l:  158  - Fails:  14 Quality:  17
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.back)> l:  142  - Fails:  14 Quality:  17
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.back)> l:  147  - Fails:  14 Quality:  17
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)> l:  166  - Fails:  14 Quality:  17
	FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.back)> l:  119  - Fails:  14 Quality:  16
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, this.back> l:  125  - Fails:  14 Quality:  16
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, this.back> l:  129  - Fails:  14 Quality:  16
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, orig(this.back)> l:  105  - Fails:  14 Quality:  16
	FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize> l:  103  - Fails:  13 Quality:  14
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)> l:  174  - Fails:  8 Quality:  11
	FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)> l:  159  - Fails:  8 Quality:  11
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  162  - Fails:  8 Quality:  11
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)> l:  173  - Fails:  8 Quality:  11
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  163  - Fails:  8 Quality:  11
	FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)> l:  162  - Fails:  8 Quality:  11
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  167  - Fails:  8 Quality:  11
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)> l:  175  - Fails:  8 Quality:  11
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)> l:  179  - Fails:  8 Quality:  11
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.currentSize)> l:  142  - Fails:  8 Quality:  10
	FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.front, orig(this.currentSize)> l:  121  - Fails:  8 Quality:  10
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front> l:  132  - Fails:  8 Quality:  10
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front> l:  136  - Fails:  8 Quality:  10
	\old(this.currentSize) <= daikon.Quant.size(this.theArray) l:  58  - Fails:  4 Quality:  4
Picked:
	this.currentSize <= daikon.Quant.size(this.theArray)
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
	\old(this.currentSize) <= daikon.Quant.size(this.theArray)

Vector: [0. 0. 0. 0. 0. 0. 1.]
Mutants:
	experiments/QueueAr_enqueue/setup-files/mutants/QueueArTesterDriver-m3.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back> l:  105  - Fails:  103393 Quality:  103395
	FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.currentSize l:  71  - Fails:  103393 Quality:  103394
	FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.currentSize l:  71  - Fails:  103393 Quality:  103394
	FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.back> l:  114  - Fails:  103391 Quality:  103393
	this.currentSize >= 0 l:  21  - Fails:  103393 Quality:  103393
	FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.back> l:  118  - Fails:  103391 Quality:  103393
	FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back> l:  114  - Fails:  103358 Quality:  103360
	FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  149  - Fails:  103227 Quality:  103230
	FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.currentSize l:  72  - Fails:  103107 Quality:  103108
	FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  151  - Fails:  102075 Quality:  102078
	FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front> l:  117  - Fails:  80226 Quality:  80228
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front> l:  106  - Fails:  80226 Quality:  80228
	FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front> l:  119  - Fails:  80226 Quality:  80228
	FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front> l:  115  - Fails:  80226 Quality:  80228
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front> l:  107  - Fails:  80218 Quality:  80220
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front> l:  107  - Fails:  80218 Quality:  80220
	FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front> l:  117  - Fails:  80184 Quality:  80186
	FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front> l:  117  - Fails:  80184 Quality:  80186
	FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front> l:  115  - Fails:  79394 Quality:  79396
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  119  - Fails:  23008 Quality:  23010
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  119  - Fails:  23008 Quality:  23010
	FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  129  - Fails:  22998 Quality:  23000
	FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)> l:  123  - Fails:  22956 Quality:  22958
	FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)> l:  121  - Fails:  22956 Quality:  22958
	FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)> l:  123  - Fails:  22956 Quality:  22958
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)> l:  144  - Fails:  22956 Quality:  22958
	FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)> l:  163  - Fails:  22918 Quality:  22921
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  118  - Fails:  22918 Quality:  22920
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  150  - Fails:  22916 Quality:  22918
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)> l:  148  - Fails:  22916 Quality:  22918
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)> l:  144  - Fails:  22916 Quality:  22918
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)> l:  145  - Fails:  22910 Quality:  22912
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  145  - Fails:  22908 Quality:  22910
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)> l:  113  - Fails:  22754 Quality:  22756
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)> l:  113  - Fails:  22754 Quality:  22756
	FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)> l:  122  - Fails:  22682 Quality:  22684
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front> l:  132  - Fails:  832 Quality:  834
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front> l:  136  - Fails:  832 Quality:  834
	FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.currentSize l:  72  - Fails:  286 Quality:  287
	FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)> l:  126  - Fails:  236 Quality:  238
	FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  146  - Fails:  116 Quality:  119
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)> l:  150  - Fails:  92 Quality:  94
	FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  129  - Fails:  92 Quality:  94
	FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  129  - Fails:  90 Quality:  92
	FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)> l:  127  - Fails:  90 Quality:  92
	FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)> l:  129  - Fails:  90 Quality:  92
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  146  - Fails:  90 Quality:  92
	FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  133  - Fails:  90 Quality:  92
	FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)> l:  123  - Fails:  46 Quality:  48
	FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.currentSize)> l:  123  - Fails:  46 Quality:  48
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)> l:  140  - Fails:  46 Quality:  48
	FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)> l:  162  - Fails:  40 Quality:  43
	FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)> l:  151  - Fails:  40 Quality:  43
	FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)> l:  150  - Fails:  40 Quality:  43
	FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)> l:  149  - Fails:  40 Quality:  43
	FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)> l:  150  - Fails:  40 Quality:  43
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)> l:  172  - Fails:  40 Quality:  43
	FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)> l:  163  - Fails:  40 Quality:  43
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)> l:  110  - Fails:  40 Quality:  42
	FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  132  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front> l:  106  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front> l:  106  - Fails:  40 Quality:  42
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.currentSize)> l:  138  - Fails:  40 Quality:  42
	FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front> l:  117  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  118  - Fails:  40 Quality:  42
	FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  126  - Fails:  40 Quality:  42
	FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front> l:  114  - Fails:  40 Quality:  42
	FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back> l:  119  - Fails:  40 Quality:  42
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  145  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)> l:  110  - Fails:  40 Quality:  42
	FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), orig(this.back)> l:  128  - Fails:  40 Quality:  42
	FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)> l:  127  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  118  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back> l:  105  - Fails:  40 Quality:  42
	FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back> l:  116  - Fails:  40 Quality:  42
	FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)> l:  122  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front> l:  107  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back> l:  104  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back> l:  105  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front> l:  105  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front> l:  107  - Fails:  40 Quality:  42
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)> l:  145  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front> l:  105  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)> l:  117  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  117  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back> l:  105  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)> l:  111  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front> l:  106  - Fails:  40 Quality:  42
	FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.back)> l:  125  - Fails:  40 Quality:  42
	FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.back> l:  113  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back> l:  104  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  118  - Fails:  40 Quality:  42
	FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize l:  71  - Fails:  40 Quality:  41
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)> l:  148  - Fails:  38 Quality:  41
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)> l:  149  - Fails:  38 Quality:  41
	FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  145  - Fails:  38 Quality:  41
	FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  144  - Fails:  38 Quality:  41
	FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize l:  70  - Fails:  40 Quality:  41
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  119  - Fails:  38 Quality:  40
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back> l:  105  - Fails:  38 Quality:  40
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  147  - Fails:  38 Quality:  40
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)> l:  111  - Fails:  38 Quality:  40
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front> l:  107  - Fails:  38 Quality:  40
	FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  129  - Fails:  38 Quality:  40
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front> l:  106  - Fails:  38 Quality:  40
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)> l:  112  - Fails:  38 Quality:  40
	FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front> l:  120  - Fails:  38 Quality:  40
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back> l:  106  - Fails:  38 Quality:  40
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back> l:  106  - Fails:  38 Quality:  40
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  118  - Fails:  38 Quality:  40
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back> l:  106  - Fails:  38 Quality:  40
	FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize l:  71  - Fails:  38 Quality:  39
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back> l:  131  - Fails:  33 Quality:  35
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back> l:  135  - Fails:  33 Quality:  35
	FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  147  - Fails:  13 Quality:  16
	FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  151  - Fails:  8 Quality:  11
	FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back> l:  150  - Fails:  8 Quality:  11
	FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  134  - Fails:  8 Quality:  10
	FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)> l:  155  - Fails:  2 Quality:  5
	FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)> l:  159  - Fails:  2 Quality:  5
	FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)> l:  164  - Fails:  2 Quality:  5
	FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)> l:  167  - Fails:  2 Quality:  5
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)> l:  173  - Fails:  2 Quality:  5
	FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)> l:  151  - Fails:  2 Quality:  5
	FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)> l:  163  - Fails:  2 Quality:  5
	FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)> l:  158  - Fails:  2 Quality:  5
	FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)> l:  154  - Fails:  2 Quality:  5
	FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)> l:  162  - Fails:  2 Quality:  5
	FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)> l:  152  - Fails:  2 Quality:  5
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back> l:  136  - Fails:  2 Quality:  5
	FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)> l:  164  - Fails:  2 Quality:  5
	FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.back)> l:  120  - Fails:  2 Quality:  4
	FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)> l:  122  - Fails:  2 Quality:  4
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back> l:  106  - Fails:  2 Quality:  4
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  146  - Fails:  2 Quality:  4
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  151  - Fails:  2 Quality:  4
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front> l:  107  - Fails:  2 Quality:  4
	FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.back)> l:  120  - Fails:  2 Quality:  4
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)> l:  111  - Fails:  2 Quality:  4
	FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), orig(this.back)> l:  128  - Fails:  2 Quality:  4
	FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back> l:  116  - Fails:  2 Quality:  4
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back> l:  106  - Fails:  2 Quality:  4
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front> l:  106  - Fails:  2 Quality:  4
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back> l:  137  - Fails:  2 Quality:  4
	FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), orig(this.back)> l:  128  - Fails:  2 Quality:  4
	FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.back)> l:  124  - Fails:  2 Quality:  4
Picked:
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>

Buckets: 9
Specs: 12
Saved in file: experiments/QueueAr_enqueue/output/QueueAr-enqueue-specfuzzer-1-buckets.assertions

