===========================================================================
DataStructures.QueueAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class.getName()
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.currentSize
this.currentSize >= 0
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.front
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.front
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.front
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.front
this.front >= 0
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.back
this.back >= -1
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
this.currentSize <= daikon.Quant.size(this.theArray)
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.back>
this.front <= daikon.Quant.size(this.theArray)
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER
this.currentSize == 0 || this.currentSize == 1 || this.currentSize == 2
this.front == 0 || this.front == 1 || this.front == 2
this.back >= 0
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == null
this.theArray.getClass().getName() != x.getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.back>
this.currentSize <= daikon.Quant.size(this.theArray)-1
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, this.back>
this.front <= daikon.Quant.size(this.theArray)-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT
this.theArray == \old(this.theArray)
this.theArray.getClass().getName() == \old(this.theArray.getClass().getName())
this.front == \old(this.front)
\old(x) == daikon.Quant.getElement_Object(this.theArray, this.back)
daikon.Quant.size(this.theArray) == \old(daikon.Quant.size(this.theArray))
daikon.Quant.getElement_Object(this.theArray, this.currentSize-1) == daikon.Quant.getElement_Object(this.theArray, \old(this.currentSize))
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize)-1)) == \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize))
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.back))) == \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize))
this.currentSize == 1 || this.currentSize == 2 || this.currentSize == 3
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize
this.front == 0 || this.front == 1 || this.front == 2
this.back == 0 || this.back == 1 || this.back == 2
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.back)
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.back)
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.back)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != \old(x.getClass().getName())
daikon.Quant.memberOf(\old(x.getClass().getName()) , daikon.Quant.typeArray(this.theArray) )
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
this.front % this.currentSize == 0
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize > \old(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 <= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) iff (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, this.back>
this.front <= this.back
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= daikon.Quant.size(this.theArray)-1
this.back >= \old(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
\old(this.currentSize) <= daikon.Quant.size(this.theArray)-1
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 < 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
\old(this.back) <= daikon.Quant.size(this.theArray)-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
this.currentSize + this.front - this.back - 1 == 0
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
this.front - this.back + \old(this.currentSize) == 0
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
