> SpecFuzzer
# Inference step (Daikon + Fuzzed Specs)
Daikon version 5.8.2, released May 4, 2020; http://plse.cs.washington.edu/daikon.

Loading invariants from file: invs_file.xml
Loaded: 0

Fuzzing specs:
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 != 1)
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= -1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 <= 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 = 0)
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 = 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 0) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 > 1)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 0) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= -1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - -1
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 >= #(StackAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + -1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % -1
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= 0)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 1) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 > -1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 != -1)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != -1) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 < 0)
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 0) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 0
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 < -1)
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: some n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > #(StackAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 <= -1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1)
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 0) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 <= -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 < 0)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 <= 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0)
Fuzzed spec: all n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= -1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 1
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > 1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 > 0)
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 = 0)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 != 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 0) xor (Integer_Variable_1 != 1)
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= -1)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 = 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= 0) or (Integer_Variable_1 != #(StackAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 0)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 != 0)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= 1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 != -1)
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 0
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 = 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 1) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 > 1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 0
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 < -1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 != 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 >= 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 < 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 != 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 0) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 != 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 = 0)
Fuzzed spec: (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != -1) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 1) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 > 0)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = 0) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 1
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 <= 1)
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 > 1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= 0) xor (Integer_Variable_1 >= -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 < -1)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 >= 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: (Integer_Variable_0 = 0) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - -1
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: all n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 <= 1)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 >= 1)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 = 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 1
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 >= 1)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 > 0)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= 0) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 <= -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 0) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < 0)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 != 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = -1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= -1) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = 0) xor (Integer_Variable_1 > 1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 1) xor (Integer_Variable_1 <= 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > -1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 < 0)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 0) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < 0)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = -1) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 0) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 1) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / -1
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 >= -1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 > -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 = 1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 >= 1)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 > 1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) implies (Integer_Variable_1 <= -1)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 >= 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 = -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Unique fuzzed invariants: 451 (2000)
Unary: 24 - Binary: 139 - Ternary: 288 - Discarded: 38
Reading declaration files Processing trace data; reading 1 dtrace file:
Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/StackArTesterDriver-objects.xml
Total loaded objects: 3542

No return from procedure observed 53 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 38 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
DataStructures.Overflow:::OBJECT
===========================================================================
DataStructures.Overflow.Overflow():::EXIT
===========================================================================
DataStructures.StackAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.topOfStack
this.topOfStack >= -1
this.topOfStack <= size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.StackAr(int):::ENTER
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: capacity
capacity >= 0
===========================================================================
DataStructures.StackAr.StackAr(int):::EXIT
orig(capacity) == size(this.theArray[])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.isEmpty():::ENTER
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(this.topOfStack == -1)  <==>  (return == true)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack one of { 0, 1 })  <==>  (return == false)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(this.topOfStack one of { 0, 1 })  ==>  (orig(this.theArray[post(this.topOfStack)]) != null)
(this.topOfStack one of { 0, 1 })  ==>  (orig(this.theArray[this.topOfStack]) != null)
(this.topOfStack one of { 0, 1 })  ==>  (this.theArray[orig(this.topOfStack)] != null)
(this.topOfStack one of { 0, 1 })  ==>  (this.theArray[this.topOfStack] != null)
(this.topOfStack one of { 0, 1 })  ==>  (this.topOfStack < size(this.theArray[])-1)
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="return == true"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == true
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="not(return == true)"
this.topOfStack one of { 0, 1 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack
return == false
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
this.theArray[this.topOfStack] != null
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.isFull():::ENTER
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(return == false)  <==>  (this.topOfStack < size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(return == false)  ==>  (this.topOfStack one of { -1, 0, 1 })
(return == true)  <==>  (this.topOfStack == size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), size(this.theArray[])-1>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), size(this.theArray[])-1>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), size(this.theArray[])-1>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n != null ) holds for: orig(this))
(return == true)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this))
(return == true)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this))
(return == true)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n = null ) holds for: orig(this))
(return == true)  ==>  (this.theArray[] == [])
(return == true)  ==>  (this.theArray[].getClass().getName() == [])
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="return == true"
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray[] == []
this.theArray[].getClass().getName() == []
return == true
FuzzedInvariant ( all n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n = null ) holds for: orig(this)
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="not(return == true)"
return == false
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.makeEmpty():::ENTER
this.topOfStack one of { -1, 0 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack <= orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.pop():::ENTER
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: this
this.topOfStack one of { 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
this.theArray[this.topOfStack] != null
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.pop():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
this.topOfStack one of { -1, 0 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
this.theArray[orig(this.topOfStack)] == null
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack < orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
this.theArray[orig(this.topOfStack)] in orig(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
this.theArray.getClass().getName() != x_object.getClass().getName()
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x_object) == this.theArray[this.topOfStack]
size(this.theArray[]) == orig(size(this.theArray[]))
this.topOfStack one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
orig(this.theArray[post(this.topOfStack)]) == null
this.theArray.getClass().getName() != orig(x_object.getClass().getName())
orig(this.theArray[post(this.topOfStack)]) in this.theArray[]
orig(x_object.getClass().getName()) in this.theArray[].getClass().getName()
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack > orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.top():::ENTER
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.top():::EXIT75
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
this.theArray[] elements == return
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.top():::EXIT76
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
this.topOfStack one of { 0, 1 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack
return != null
FuzzedInvariant ( some n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.top():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(this.topOfStack == -1)  <==>  (return == null)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this))
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this))
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == return)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack one of { 0, 1 })  <==>  (return != null)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n != null ) holds for: orig(this))
(this.topOfStack one of { 0, 1 })  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(this.topOfStack one of { 0, 1 })  ==>  (orig(this.theArray[post(this.topOfStack)]) != null)
(this.topOfStack one of { 0, 1 })  ==>  (orig(this.theArray[this.topOfStack]) != null)
(this.topOfStack one of { 0, 1 })  ==>  (return == orig(this.theArray[post(this.topOfStack)]))
(this.topOfStack one of { 0, 1 })  ==>  (return == orig(this.theArray[this.topOfStack]))
(this.topOfStack one of { 0, 1 })  ==>  (return == this.theArray[orig(this.topOfStack)])
(this.topOfStack one of { 0, 1 })  ==>  (return == this.theArray[this.topOfStack])
(this.topOfStack one of { 0, 1 })  ==>  (return.getClass().getName() in this.theArray[].getClass().getName())
(this.topOfStack one of { 0, 1 })  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(this.topOfStack one of { 0, 1 })  ==>  (this.theArray[orig(this.topOfStack)] != null)
(this.topOfStack one of { 0, 1 })  ==>  (this.theArray[this.topOfStack] != null)
(this.topOfStack one of { 0, 1 })  ==>  (this.topOfStack < size(this.theArray[])-1)
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT114
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
this.theArray[] elements == return
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT117
return == orig(this.theArray[this.topOfStack])
return != null
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
orig(this.topOfStack) one of { 0, 1 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.topOfStack)
size(this.theArray[]) one of { 4, 35, 97 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
this.theArray[orig(this.topOfStack)] == null
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack < orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
this.theArray[orig(this.topOfStack)] in orig(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
(return != null)  <==>  (orig(this.topOfStack) one of { 0, 1 })
(return != null)  <==>  (this.topOfStack < orig(this.topOfStack))
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.topOfStack))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.topOfStack))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[]))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.topOfStack))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return != null)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return != null)  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(return != null)  ==>  (orig(this.theArray[this.topOfStack]) != null)
(return != null)  ==>  (orig(this.topOfStack) < size(this.theArray[])-1)
(return != null)  ==>  (return == orig(this.theArray[this.topOfStack]))
(return != null)  ==>  (return.getClass().getName() in orig(this.theArray[].getClass().getName()))
(return != null)  ==>  (size(this.theArray[]) one of { 4, 35, 97 })
(return != null)  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(return != null)  ==>  (this.theArray[orig(this.topOfStack)] == null)
(return != null)  ==>  (this.theArray[orig(this.topOfStack)] in orig(this.theArray[]))
(return != null)  ==>  (this.topOfStack < size(this.theArray[])-1)
(return != null)  ==>  (this.topOfStack one of { -1, 0 })
(return == null)  <==>  (orig(this.topOfStack) == -1)
(return == null)  <==>  (this.topOfStack == orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) implies (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), orig(this.topOfStack)>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), orig(this.topOfStack)>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), orig(this.topOfStack)>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>)
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: orig(this.topOfStack))
(return == null)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(return == null)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this))
(return == null)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this))
(return == null)  ==>  (orig(this.theArray[]) elements == null)
(return == null)  ==>  (orig(this.theArray[]) elements == return)
(return == null)  ==>  (orig(this.theArray[].getClass().getName()) elements == null)
(return == null)  ==>  (this.theArray[] == orig(this.theArray[]))
(return == null)  ==>  (this.theArray[] elements == null)
(return == null)  ==>  (this.theArray[] elements == return)
(return == null)  ==>  (this.theArray[].getClass().getName() elements == null)
(return == null)  ==>  (this.topOfStack == -1)
this.topOfStack one of { -1, 0 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
this.topOfStack <= orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
return.getClass().getName() in orig(this.theArray[].getClass().getName())
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 <= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.Underflow:::OBJECT
===========================================================================
DataStructures.Underflow.Underflow():::EXIT
Exiting Daikon.

# Filtering step

- Mutation is: 1:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@<init>(int):32:theArray = new Object[capacity] |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m1.dtrace.gz
Loaded invs from previous step: 0
                                                                               [7:11:43 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m1-objects.xml
Total loaded objects: 804
[7:11:44 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:11:45 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:11:46 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:11:47 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:11:48 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:11:49 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste
No return from procedure observed 271 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 9 invocations
  DataStructures.StackAr.makeEmpty() : 127 invocations
  DataStructures.StackAr.isFull() : 88 invocations
  DataStructures.StackAr.push(java.lang.Object) : 47 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 2,185 errors found in 142,512 samples (1.53%)
StackArTesterDriver.inv.gz: 153 false positives, out of 594, which is 25.76%.
Preserving 74 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 74
Saving mutants results file

- Mutation is: 2:LVR:NEG:0:DataStructures.StackAr@<init>(int):33:-1 |==> 0
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
Loaded invs from previous step: 74
                                                                               [7:11:50 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m2-objects.xml
Total loaded objects: 3552
[7:11:51 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:11:52 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:11:53 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:11:54 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:11:55 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:11:57 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:11:58 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:11:59 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:00 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:01 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:02 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:03 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:04 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:05 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:06 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:07 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:08 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:09 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:10 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:11 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:12 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:13 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:14 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:15 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:16 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:17 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:18 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:19 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:20 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:21 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:22 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:23 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:24 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:25 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:26 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:27 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:28 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:29 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:30 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:31 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:32 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:33 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:34 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:35 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:36 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:37 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:38 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:39 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:40 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:41 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:42 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:43 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:44 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:45 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:46 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:47 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:48 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:49 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:50 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:51 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:52 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:53 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:54 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:55 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:56 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:12:57 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste
No return from procedure observed 46 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 26 invocations
  DataStructures.StackAr.push(java.lang.Object) : 2 invocations
  DataStructures.StackAr.top() : 3 invocations
  DataStructures.StackAr.makeEmpty() : 4 invocations
  DataStructures.StackAr.topAndPop() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 34,844 errors found in 2,024,943 samples (1.72%)
StackArTesterDriver.inv.gz: 1078 false positives, out of 6884, which is 15.66%.
Preserving 353 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 74
Saving - Total: 400
Saving mutants results file

- Mutation is: 3:LVR:NEG:POS:DataStructures.StackAr@<init>(int):33:-1 |==> 1
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
Loaded invs from previous step: 400
                                                                               [7:12:59 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m3-objects.xml
Total loaded objects: 3521
[7:13:00 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:01 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:02 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:03 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:04 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:05 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:06 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:07 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:08 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:09 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:10 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:11 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:12 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:13 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:14 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:15 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:16 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:17 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:18 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:19 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:20 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:21 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:22 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:23 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:24 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:26 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:27 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:28 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:29 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:30 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:31 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:32 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:33 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:34 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:35 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:36 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:37 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:38 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:39 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:40 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:41 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:42 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:43 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:44 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:45 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:46 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:47 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:48 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:49 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:50 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:51 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:52 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:53 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:54 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:55 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:56 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:57 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:58 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:13:59 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:00 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:01 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:02 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:03 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:04 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:05 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:06 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:07 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:08 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:09 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste
No return from procedure observed 51 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 25 invocations
  DataStructures.StackAr.top() : 7 invocations
  DataStructures.StackAr.push(java.lang.Object) : 3 invocations
  DataStructures.StackAr.makeEmpty() : 5 invocations
  DataStructures.StackAr.topAndPop() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 71,625 errors found in 2,026,996 samples (3.53%)
StackArTesterDriver.inv.gz: 1083 false positives, out of 6886, which is 15.73%.
Preserving 369 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 400
Saving - Total: 468
Saving mutants results file

- Mutation is: 38:EVR:<IDENTIFIER(java.lang.Object)>:<DEFAULT>:DataStructures.StackAr@push(java.lang.Object):98:x_object |==> null
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m38.dtrace.gz
Loaded invs from previous step: 468
                                                                               [7:14:11 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m38-objects.xml
Total loaded objects: 3542
[7:14:12 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:13 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:14 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:15 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:16 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:17 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:18 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:19 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:20 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:21 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:22 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:23 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:24 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:25 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:26 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:27 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:28 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:29 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:30 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:31 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:32 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:33 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:35 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:36 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:38 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:39 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:40 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:41 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:42 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:43 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:44 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:45 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:46 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:47 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:49 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:53 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:54 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:55 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:56 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:57 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:58 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:14:59 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:00 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:01 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:02 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:03 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:04 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:05 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:06 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:07 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:08 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:09 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:10 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:11 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:12 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:13 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:14 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:15 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:16 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:17 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste
No return from procedure observed 53 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 38 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,960,183 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 6883, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 468
Saving - Total: 468
Saving mutants results file

- Mutation is: 39:COR:isFull():TRUE:DataStructures.StackAr@push(java.lang.Object):100:isFull() |==> false
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m39.dtrace.gz
Loaded invs from previous step: 468
                                                                               [7:15:19 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m39-objects.xml
Total loaded objects: 3208
[7:15:20 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:21 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:22 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:23 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:24 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:25 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:26 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:29 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:30 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:31 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:32 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:34 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:35 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:38 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:40 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:41 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:44 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:46 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:47 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:48 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:49 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:50 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:51 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:52 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:53 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:54 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:55 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:56 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:57 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:58 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:15:59 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:00 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:01 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:02 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:03 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:04 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:05 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:06 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:07 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:08 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:09 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:10 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:11 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:12 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:13 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:14 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:15 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:16 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:17 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:18 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:19 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:20 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:21 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste
No return from procedure observed 53 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 38 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,851,205 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 6881, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 468
Saving - Total: 468
Saving mutants results file

- Mutation is: 4:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@<init>(int):33:topOfStack = -1 |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
Loaded invs from previous step: 468
                                                                               [7:16:23 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m4-objects.xml
Total loaded objects: 3552
[7:16:24 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:25 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:26 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:27 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:28 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:29 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:30 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:31 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:32 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:33 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:34 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:35 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:36 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:37 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:38 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:39 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:40 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:42 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:43 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:44 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:45 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:46 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:47 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:48 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:49 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:50 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:51 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:52 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:53 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:54 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:55 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:56 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:57 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:58 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:16:59 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:00 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:01 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:02 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:03 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:04 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:05 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:06 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:07 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:08 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:09 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:10 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:11 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:12 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:13 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:14 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:15 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:16 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:17 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:18 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:19 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:20 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:21 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:22 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:23 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:24 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:25 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:26 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:27 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:28 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:29 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:30 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:31 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:32 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:33 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:34 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:35 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste
No return from procedure observed 46 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 26 invocations
  DataStructures.StackAr.push(java.lang.Object) : 2 invocations
  DataStructures.StackAr.top() : 3 invocations
  DataStructures.StackAr.makeEmpty() : 4 invocations
  DataStructures.StackAr.topAndPop() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 34,842 errors found in 2,024,943 samples (1.72%)
StackArTesterDriver.inv.gz: 1078 false positives, out of 6884, which is 15.66%.
Preserving 353 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 468
Saving - Total: 468
Saving mutants results file

- Mutation is: 40:COR:isFull():FALSE:DataStructures.StackAr@push(java.lang.Object):100:isFull() |==> true
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m40.dtrace.gz
Loaded invs from previous step: 468
                                                                               [7:17:37 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m40-objects.xml
Total loaded objects: 1359
[7:17:38 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:39 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:41 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:42 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:45 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:46 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:48 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:49 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:53 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:17:56 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste
No return from procedure observed 193 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 16 invocations
  DataStructures.StackAr.push(java.lang.Object) : 167 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 548,486 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 3251, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 468
Saving - Total: 468
Saving mutants results file

- Mutation is: 41:LVR:POS:0:DataStructures.StackAr@push(java.lang.Object):102:1 |==> 0
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m41.dtrace.gz
Loaded invs from previous step: 468
                                                                               [7:18:00 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m41-objects.xml
Total loaded objects: 1673
[7:18:01 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:02 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:05 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:09 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:12 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:15 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:20 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:21 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste
No return from procedure observed 193 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 16 invocations
  DataStructures.StackAr.push(java.lang.Object) : 167 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 591,075 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 3251, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 468
Saving - Total: 468
Saving mutants results file

- Mutation is: 42:LVR:POS:NEG:DataStructures.StackAr@push(java.lang.Object):102:1 |==> -1
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m42.dtrace.gz
Loaded invs from previous step: 468
                                                                               [7:18:23 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m42-objects.xml
Total loaded objects: 1673
[7:18:24 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:25 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:26 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:27 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:29 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:30 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:31 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:32 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:33 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:35 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:36 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:37 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:38 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:40 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:44 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste
No return from procedure observed 193 times.  Unmatched entries are ignored!
Unterminated calls:
[7:18:45 PM]: Finished reading experiments/StackAr_push/setup-files/mutants/Sta  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 16 invocations
  DataStructures.StackAr.push(java.lang.Object) : 167 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 591,075 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 3251, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 468
Saving - Total: 468
Saving mutants results file

- Mutation is: 43:AOR:+(int,int):%(int,int):DataStructures.StackAr@push(java.lang.Object):102:topOfStack + 1 |==> topOfStack % 1
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m43.dtrace.gz
Loaded invs from previous step: 468
                                                                               [7:18:46 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m43-objects.xml
Total loaded objects: 3540
[7:18:47 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:48 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:49 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:51 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:53 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:54 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:57 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:58 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:18:59 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:01 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:02 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:06 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:07 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:08 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:09 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:10 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:12 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:13 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:14 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:15 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:16 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:17 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:18 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:19 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:20 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:21 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:22 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:23 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:24 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:25 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:26 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:27 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:28 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:29 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:30 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:31 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:32 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:33 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:34 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:35 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:36 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:37 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:38 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:39 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:40 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:41 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:42 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:43 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:44 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:45 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:46 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:47 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:48 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:49 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:50 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:51 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:52 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:53 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste
No return from procedure observed 53 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 38 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 5,752 errors found in 1,955,853 samples (0.29%)
StackArTesterDriver.inv.gz: 104 false positives, out of 6883, which is 1.51%.
Preserving 49 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 468
Saving - Total: 513
Saving mutants results file

- Mutation is: 44:AOR:+(int,int):*(int,int):DataStructures.StackAr@push(java.lang.Object):102:topOfStack + 1 |==> topOfStack StackArTesterDriver.inv.gz base-invs-by-mutants.csv base_invs_file.xml experiments hs_err_pid1983241.log hs_err_pid51463.log hs_err_pid53479.log invs-by-mutants.csv invs.csv invs_file.xml lib literals mutants scripts testers 1
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m44.dtrace.gz
Loaded invs from previous step: 513
                                                                               [7:19:55 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m44-objects.xml
Total loaded objects: 1673
[7:19:56 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:57 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:58 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:19:59 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:00 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:01 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:02 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:03 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:04 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:05 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:06 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:08 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:09 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:10 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:11 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:12 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:13 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:14 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:15 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:16 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:17 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste
No return from procedure observed 193 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 16 invocations
  DataStructures.StackAr.push(java.lang.Object) : 167 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 591,075 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 3251, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 513
Saving - Total: 513
Saving mutants results file

- Mutation is: 45:AOR:+(int,int):-(int,int):DataStructures.StackAr@push(java.lang.Object):102:topOfStack + 1 |==> topOfStack - 1
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m45.dtrace.gz
Loaded invs from previous step: 513
                                                                               [7:20:19 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m45-objects.xml
Total loaded objects: 1673
[7:20:20 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:21 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:22 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:23 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:24 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:25 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:26 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:27 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:28 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:29 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:30 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:31 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:32 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:33 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:34 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:35 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:36 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:37 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:38 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:39 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:40 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste
No return from procedure observed 193 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 16 invocations
  DataStructures.StackAr.push(java.lang.Object) : 167 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 591,075 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 3251, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 513
Saving - Total: 513
Saving mutants results file

- Mutation is: 46:AOR:+(int,int):/(int,int):DataStructures.StackAr@push(java.lang.Object):102:topOfStack + 1 |==> topOfStack / 1
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
Loaded invs from previous step: 513
                                                                               [7:20:43 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m46-objects.xml
Total loaded objects: 1673
[7:20:44 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:45 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:46 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:47 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:48 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:49 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:50 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:51 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:52 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:53 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:54 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:55 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:56 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:57 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:58 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:20:59 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:00 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:01 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:02 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:03 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:04 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste
No return from procedure observed 193 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 16 invocations
  DataStructures.StackAr.push(java.lang.Object) : 167 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 591,075 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 3251, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 513
Saving - Total: 513
Saving mutants results file

- Mutation is: 47:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@push(java.lang.Object):102:topOfStack = topOfStack + 1 |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
Loaded invs from previous step: 513
                                                                               [7:21:06 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m47-objects.xml
Total loaded objects: 1673
[7:21:07 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:08 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:09 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:10 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:11 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:13 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:14 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:15 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:16 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:17 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:18 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:19 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:20 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:21 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:22 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:23 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:24 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:25 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:26 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:27 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:28 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste
No return from procedure observed 193 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 16 invocations
  DataStructures.StackAr.push(java.lang.Object) : 167 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 591,075 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 3251, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 513
Saving - Total: 513
Saving mutants results file

- Mutation is: 48:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@push(java.lang.Object):103:theArray[topOfStack] = x_object |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m48.dtrace.gz
Loaded invs from previous step: 513
                                                                               [7:21:31 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m48-objects.xml
Total loaded objects: 3542
[7:21:32 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:33 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:34 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:35 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:36 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:37 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:38 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:39 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:40 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:41 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:42 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:43 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:44 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:45 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:46 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:47 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:48 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:49 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:50 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:51 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:52 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:53 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:54 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:55 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:56 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:57 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:58 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:21:59 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:00 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:01 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:02 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:03 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:04 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:05 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:06 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:08 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:09 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:10 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:11 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:12 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:13 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:14 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:15 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:16 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:17 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:18 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:19 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:20 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:21 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:22 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:23 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:24 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:25 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:26 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:27 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:28 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:29 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:30 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:31 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:32 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:33 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:34 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:35 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:36 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:37 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste[7:22:38 PM]: Reading experiments/StackAr_push/setup-files/mutants/StackArTeste
No return from procedure observed 53 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 38 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 3,929 errors found in 1,957,785 samples (0.20%)
StackArTesterDriver.inv.gz: 26 false positives, out of 6871, which is 0.38%.
Preserving 6 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 513
Saving - Total: 513
Saving mutants results file

- Mutation is: 49:LVR:TRUE:FALSE:DataStructures.StackAr@push(java.lang.Object):104:true |==> false
Checking invs on mutant: experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
Loaded invs from previous step: 513
                                                                               [7:22:40 PM]:                                                                  Saving mutants results file

# Filtering step took minutes: 11
# Mutation killing ability results saved in: experiments/StackAr_push/output/StackAr-push-specfuzzer-1-invs-by-mutants.csv

# Writing assertions to file: experiments/StackAr_push/output/StackAr-push-specfuzzer-1.assertions

# Filtering specs with buckets
> Mutant filter from file: experiments/StackAr_push/output/StackAr-push-specfuzzer-1-invs-by-mutants.csv
Unique mutants: 7
Loading assertions from: experiments/StackAr_push/output/StackAr-push-specfuzzer-1.assertions
Specs killing mutants: 39

> Minimizing by exploring the bit vector of each spec
Building bit vectors of size: 7
Building buckets
=====================================
Buckets: 7
Vector: [1. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m1.dtrace.gz
Specs:
	this.theArray != null l:  21  - Fails:  1117 Quality:  1117
Picked:
	this.theArray != null

Vector: [0. 1. 1. 1. 0. 0. 0.]
Mutants:
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  480 Quality:  482
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  480 Quality:  482
	this.topOfStack <= daikon.Quant.size(this.theArray)-1 l:  53  - Fails:  208 Quality:  208
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  142  - Fails:  142 Quality:  144
	FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  126  - Fails:  116 Quality:  118
	this.topOfStack < daikon.Quant.size(this.theArray) l:  50  - Fails:  96 Quality:  96
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  143  - Fails:  84 Quality:  86
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  143  - Fails:  58 Quality:  60
	this.topOfStack == 0 || this.topOfStack == 1 || this.topOfStack == 2 l:  68  - Fails:  60 Quality:  60
	this.topOfStack < daikon.Quant.size(this.theArray)-1 l:  52  - Fails:  23 Quality:  23
	\old(this.topOfStack) < daikon.Quant.size(this.theArray)-1 l:  58  - Fails:  19 Quality:  19
Picked:
	this.topOfStack <= daikon.Quant.size(this.theArray)-1
	\old(this.topOfStack) < daikon.Quant.size(this.theArray)-1
	this.topOfStack < daikon.Quant.size(this.theArray)
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
	this.topOfStack < daikon.Quant.size(this.theArray)-1

Vector: [0. 1. 1. 1. 0. 1. 1.]
Mutants:
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m48.dtrace.gz
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack> l:  101  - Fails:  1380 Quality:  1381
	FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack> l:  102  - Fails:  1372 Quality:  1373
Picked:
	FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>

Vector: [0. 1. 1. 1. 1. 0. 0.]
Mutants:
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m43.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  566 Quality:  568
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  566 Quality:  568
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  143  - Fails:  228 Quality:  230
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  143  - Fails:  170 Quality:  172
Picked:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>

Vector: [0. 0. 1. 0. 0. 1. 1.]
Mutants:
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m48.dtrace.gz
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack> l:  102  - Fails:  30 Quality:  31
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>

Vector: [0. 0. 0. 0. 1. 0. 0.]
Mutants:
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m43.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  112 Quality:  114
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  117  - Fails:  112 Quality:  114
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  143  - Fails:  112 Quality:  114
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  144  - Fails:  112 Quality:  114
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  115  - Fails:  112 Quality:  114
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  112  - Fails:  112 Quality:  114
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  115  - Fails:  112 Quality:  114
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  112 Quality:  114
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  115  - Fails:  112 Quality:  114
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  112 Quality:  114
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  116  - Fails:  112 Quality:  114
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  115  - Fails:  112 Quality:  114
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  141  - Fails:  112 Quality:  114
	FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  126  - Fails:  112 Quality:  114
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)> l:  111  - Fails:  112 Quality:  114
	this.topOfStack > \old(this.topOfStack) l:  39  - Fails:  112 Quality:  112
	daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.theArray, \new(this.topOfStack))) , this.theArray ) l:  114  - Fails:  78 Quality:  78
Picked:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
	daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.theArray, \new(this.topOfStack))) , this.theArray )

Vector: [0. 0. 0. 0. 0. 1. 1.]
Mutants:
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m48.dtrace.gz
	experiments/StackAr_push/setup-files/mutants/StackArTesterDriver-m49.dtrace.gz
Specs:
	daikon.Quant.memberOf(\old(x_object.getClass().getName()) , daikon.Quant.typeArray(this.theArray) ) l:  99  - Fails:  1664 Quality:  1664
	\old(x_object) == daikon.Quant.getElement_Object(this.theArray, this.topOfStack) l:  80  - Fails:  1664 Quality:  1664
	daikon.Quant.memberOf(\old(x_object) , this.theArray ) l:  54  - Fails:  1664 Quality:  1664
Picked:
	daikon.Quant.memberOf(\old(x_object.getClass().getName()) , daikon.Quant.typeArray(this.theArray) )
	\old(x_object) == daikon.Quant.getElement_Object(this.theArray, this.topOfStack)
	daikon.Quant.memberOf(\old(x_object) , this.theArray )

daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.theArray, \new(this.topOfStack))) , this.theArray )
daikon.Quant.memberOf(\old(x_object) , this.theArray )
daikon.Quant.memberOf(\old(x_object.getClass().getName()) , daikon.Quant.typeArray(this.theArray) )
Buckets: 7
Specs: 14
Saved in file: experiments/StackAr_push/output/StackAr-push-specfuzzer-1-buckets.assertions

