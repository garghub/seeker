buckets=72
specs=85
=====================================
:::OBJECT
this.ancestors != null
daikon.Quant.size(this.max_child.children) == 0
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
FuzzedInvariant ( no n : Composite.children : n.init_value > n.max_child.init_value ) holds for: this
daikon.Quant.size(this.parent.parent.children) == 1
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.parent.parent.children), new String[] { "examples.Composite" }) || daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.parent.parent.children), new String[] { "examples.Composite", "examples.Composite" })
daikon.Quant.size(this.parent.max_child.children) == 0 || daikon.Quant.size(this.parent.max_child.children) == 1 || daikon.Quant.size(this.parent.max_child.children) == 2
FuzzedInvariant ( no n : Composite.children : n.init_value >= n.max_child.init_value ) holds for: this
this.value >= this.init_value
this.children != null
daikon.Quant.size(this.max_child.parent.children) == 1 || daikon.Quant.size(this.max_child.parent.children) == 2 || daikon.Quant.size(this.max_child.parent.children) == 3
=====================================
:::POSTCONDITION
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.max_child.value , c.value , orig(this.max_child.value)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.parent.init_value , this.value , this.init_value>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.parent.value , this.max_child.parent.init_value , c.value>
daikon.Quant.isReverse(this.max_child.children, \old(this.max_child.children))
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= -1) ) holds for: <this.parent.parent.value, this.parent.init_value>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.parent.parent.value , c.value , orig(this.value)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.init_value , orig(this.value) , orig(this.max_child.value)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.parent.value) , this.parent.init_value , this.init_value>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.parent.value), this.max_child.value>
daikon.Quant.size(c.parent.children) == 1 || daikon.Quant.size(c.parent.children) == 2 || daikon.Quant.size(c.parent.children) == 3
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.value)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.parent.init_value, this.init_value>
c.value == c.init_value
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.value , this.init_value , orig(this.value)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <c.value , orig(this.parent.parent.value) , orig(this.value)>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.parent.max_child.value) , this.parent.init_value , this.init_value>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.value , orig(this.value) , this.max_child.value>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.value , this.max_child.value , orig(this.max_child.parent.init_value)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)>
FuzzedInvariant ( some n : Composite.children : (n.max_child.*(parent + max_child)) & (n.parent.*(parent + max_child)) in empty ) holds for: orig(this)
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.parent.max_child.value), c.value>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.parent.parent.init_value , this.value , orig(this.value)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.value)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= -1) ) holds for: <this.parent.init_value, orig(this.parent.parent.value)>
daikon.Quant.size(this.parent.max_child.children)-1 <= \old(daikon.Quant.size(this.parent.max_child.children))
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.parent.init_value, orig(this.parent.parent.value)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 != -1) ) holds for: <this.init_value, orig(this.max_child.value)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.parent.value , orig(this.parent.value) , c.value>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.parent.init_value , this.init_value , orig(this.value)>
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.parent.children), new String[] { "examples.Composite" }) || daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.parent.children), new String[] { "examples.Composite", "examples.Composite" })
this.parent.parent.init_value == -100 || this.parent.parent.init_value == -3 || this.parent.parent.init_value == 52
this.parent.max_child.value == this.parent.max_child.init_value
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.parent.parent.value , this.init_value , c.value>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.parent.init_value, this.value>
FuzzedInvariant ( some n : Composite.children : n.children != n.parent.children ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.parent.parent.value , this.parent.init_value , this.value>
FuzzedInvariant ( some n : Composite.children : n.value <= Integer_Variable_0 ) holds for: <orig(this), this.parent.max_child.value>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.parent.init_value , c.value , orig(this.parent.parent.value)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.parent.value , this.parent.init_value , this.value>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.parent.parent.value , this.parent.init_value , orig(this.parent.value)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < 1) ) holds for: <c.value, orig(this.parent.parent.value)>
this.max_child.value == this.max_child.init_value
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.init_value, orig(this.max_child.value)>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.parent.parent.value , this.parent.parent.init_value , this.init_value>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.parent.value) , this.init_value , orig(this.value)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.parent.value), this.parent.init_value>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.parent.value , orig(this.parent.parent.value) , orig(this.parent.value)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.init_value , this.max_child.value , c.value>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.init_value , c.value , orig(this.max_child.value)>
daikon.Quant.pairwiseEqual(this.max_child.children, \old(this.max_child.children))
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: <this.init_value, orig(this.parent.parent.value)>
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.max_child.children), \old(daikon.Quant.typeArray(this.max_child.children)))
this.parent.value >= this.init_value
this.parent == this.max_child
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.parent.value , this.init_value , orig(this.value)>
daikon.Quant.size(this.children) == 1 || daikon.Quant.size(this.children) == 2 || daikon.Quant.size(this.children) == 3
this.parent.value >= this.value
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.value) , this.max_child.value , c.value>
FuzzedInvariant ( some n : Composite.children : n.value <= Integer_Variable_0 ) holds for: <orig(this), this.value>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.parent.value) , this.init_value , orig(this.value)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.parent.value), c.value>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.parent.value), this.value>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: <this.value, c.value>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= 1) ) holds for: <this.parent.value, this.init_value>
c.parent != null
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.parent.value , this.parent.init_value , this.max_child.value>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(this.parent.value), orig(this.value)>
daikon.Quant.size(this.children)-1 == \old(daikon.Quant.size(this.children))
daikon.Quant.size(this.max_child.parent.children)-1 == \old(daikon.Quant.size(this.max_child.parent.children))
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: <this.parent.value, c.value>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.parent.value) , this.value , c.value>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.parent.init_value , this.init_value , orig(this.value)>
